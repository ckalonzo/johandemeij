{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {\n  categories: [{\n    id: 1,\n    name: \"Compositions\"\n  }, {\n    id: 2,\n    name: \"Amstel Classics\"\n  }, {\n    id: 3,\n    name: \"Music for the Theatre\"\n  }, {\n    id: 4,\n    name: \"Symphony Orchestra\"\n  }, {\n    id: 5,\n    name: \"The Music of S&oslash;ren Hyldgaard\"\n  }, {\n    id: 6,\n    name: \"Solo Concertos\"\n  }, {\n    id: 9,\n    name: \"Cd's\"\n  }, {\n    id: 0,\n    name: \"All music\"\n  }],\n  allPresentations: []\n};\nexport default function musicReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_MUSIC:\n      {\n        db.collection(\"presentations\").orderBy('cdName', 'asc').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.allPresentations = action.payload;\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_BY_CATEGORY:\n      {\n        db.collection(\"presentations\").where(\"category\", \"==\", action.payload.toString()).orderBy('cdName', 'asc').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.allPresentations = action.payload;\n        return stateCopy;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Websites/johandemeij/johan-app/src/redux/reducers/music.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","categories","id","name","allPresentations","musicReducer","state","action","type","LOAD_MUSIC","collection","orderBy","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_MUSIC_SUCCESS","stateCopy","cloneDeep","payload","LOAD_MUSIC_FAIL","LOAD_MUSIC_BY_CATEGORY","where","toString","LOAD_MUSIC_BY_CATEGORY_SUCCESS"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\n\nconst initialState = {\n    categories:[\n        {id:1,name:\"Compositions\"},\n        {id:2,name:\"Amstel Classics\"},\n        {id:3,name:\"Music for the Theatre\"},\n        {id:4,name:\"Symphony Orchestra\"},\n        {id:5,name:\"The Music of S&oslash;ren Hyldgaard\"},\n        {id:6,name:\"Solo Concertos\"},\n        {id:9,name:\"Cd's\"},\n        {id:0,name:\"All music\"},\n    ],\n    allPresentations:[]\n};\nexport default function musicReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_MUSIC: {\n      db.collection(\"presentations\")\n      .orderBy('cdName', 'asc')\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,data))\n        });\n        return state\n      }\n      case ACTIONS.LOAD_MUSIC_SUCCESS: {\n          let stateCopy = _.cloneDeep(state)\n          stateCopy.allPresentations = action.payload\n        return stateCopy\n      }\n      case ACTIONS.LOAD_MUSIC_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_MUSIC_BY_CATEGORY:{\n\n        db.collection(\"presentations\")\n        .where(\"category\",\"==\", action.payload.toString())\n        .orderBy('cdName', 'asc')\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,data))\n        });\n         return state \n      }\n      case ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        stateCopy.allPresentations = action.payload\n         return stateCopy \n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}