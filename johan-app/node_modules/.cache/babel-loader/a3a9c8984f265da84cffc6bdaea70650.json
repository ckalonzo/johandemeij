{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function presentationsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_PRESENTATIONS:\n      {\n        console.log(action);\n        let stateCopy = '';\n        db.collection(\"presentations\").startAt(action.payload.skip).limit(action.payload.limit).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATIONS_SUCCESS, stateCopy));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATIONS_SUCCESS:\n      {\n        return _.sortBy(action.payload, ['cdName', 'asc']);\n      }\n\n    case ACTIONS.LOAD_PRESENTATIONS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/presentations.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","presentationsReducer","state","action","type","LOAD_PRESENTATIONS","console","log","stateCopy","collection","startAt","payload","skip","limit","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_PRESENTATIONS_SUCCESS","sortBy","LOAD_PRESENTATIONS_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,OAAQC,CAAR,MAAe,QAAf;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,oBAAT,CAA+BC,KAAK,GAAGF,YAAvC,EAAqDG,MAArD,EAA6D;AACxE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKR,OAAO,CAACS,kBAAb;AAAiC;AACnCC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACI,YAAIK,SAAS,GAAG,EAAhB;AACCV,QAAAA,EAAE,CAACW,UAAH,CAAc,eAAd,EACCC,OADD,CACSP,MAAM,CAACQ,OAAP,CAAeC,IADxB,EAECC,KAFD,CAEOV,MAAM,CAACQ,OAAP,CAAeE,KAFtB,EAGAC,GAHA,GAIAC,IAJA,CAIKC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAT,UAAAA,SAAS,GAAGS,IAAZ;AACAd,UAAAA,MAAM,CAACkB,aAAP,CAAqBxB,UAAU,CAACD,OAAO,CAAC0B,0BAAT,EAAoCd,SAApC,CAA/B;AACD,SARA;AAUD,eAAON,KAAP;AACD;;AACD,SAAKN,OAAO,CAAC0B,0BAAb;AAAyC;AACvC,eAAOvB,CAAC,CAACwB,MAAF,CAASpB,MAAM,CAACQ,OAAhB,EAAwB,CAAC,QAAD,EAAU,KAAV,CAAxB,CAAP;AACD;;AACD,SAAKf,OAAO,CAAC4B,uBAAb;AAAsC;AAEpC,eAAOtB,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA1BJ;AA8BD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport  _ from \"lodash\"\nconst initialState = {};\nexport default function presentationsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_PRESENTATIONS: {\n    console.log(action)\n        let stateCopy = ''\n         db.collection(\"presentations\")\n         .startAt(action.payload.skip)\n         .limit(action.payload.limit)\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATIONS_SUCCESS,stateCopy))\n        });\n\n        return state\n      }\n      case ACTIONS.LOAD_PRESENTATIONS_SUCCESS: {\n        return _.sortBy(action.payload,['cdName','asc'])\n      }\n      case ACTIONS.LOAD_PRESENTATIONS_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}