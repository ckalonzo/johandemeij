{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, storage } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function cdReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_CD:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        console.log(action.payload);\n        db.collection(\"cds\").add(stateCopy).then(docRef => {\n          stateCopy._id = docRef.id;\n          db.collection(\"cds\").doc(docRef.id).update({\n            _id: docRef.id\n          }).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_SUCCESS, stateCopy));\n          });\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_CD_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_CD_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let _id = '';\n        db.collection(\"cds\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          stateCopy = data;\n          stateCopy[0]._id = _id;\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_SUCCESS, stateCopy));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_CD_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD:\n      {\n        db.collection(\"cds\").doc(action.payload._id).update(action.payload).then(() => {\n          console.log(\"success\");\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_CD_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE:\n      {\n        // let stateCopy = _.cloneDeep(action.payload)\n        //  let image = stateCopy.image\n        //  updateCdImage(image).then((json)=>{\n        //   if(json.status!==404 || json.status!==500) {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n        //   } else {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,json.response.message))\n        //   }\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,err)))\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_CD_IMAGE:\n      {\n        let image = {},\n            cd = {};\n\n        if (action.payload.cover === \"main\") {\n          image = {\n            albumID: action.payload.albumID,\n            cover: action.payload.cover ? action.payload.cover : \"\",\n            imageName: action.payload.image.name\n          };\n        } else {\n          image = {\n            albumID: action.payload.albumID,\n            caption: action.payload.caption ? action.payload.caption : \"\",\n            cover: action.payload.cover ? action.payload.cover : \"\",\n            imageName: action.payload.image.name\n          };\n        }\n\n        if (action.payload.cover === \"frontCover\") {\n          cd = {\n            frontCover: action.payload.image.name,\n            frontCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        } else if (action.payload.cover === \"backCover\") {\n          cd = {\n            backCover: action.payload.image.name,\n            backCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        } else {\n          cd = {\n            cdImage: action.payload.image.name\n          };\n        }\n\n        console.log(action, image, cd); // db.collection(\"cds\").doc(action.payload.docId)\n        // .update(cd).then(()=>{   \n        //     db.collection(\"postimages\")\n        //     .doc()\n        //     .set(image)\n        //     .then(() => {\n        //       action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_SUCCESS,action.payload))\n        //     });\n        //  });\n\n        action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_SUCCESS, action.payload));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_CD_IMAGE_SUCCESS:\n      {\n        if (action.payload.cover === \"main\") {\n          let path = \"music_catalogue/\";\n        } else {\n          let path = \"posts/\";\n        }\n\n        let postImageRef = storage.ref(path + action.payload.image.name).put(action.payload.image);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref(path).child(action.payload.image.name).getDownloadURL().then(url => {\n            console.log(url);\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, action.payload.albumID));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_CD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE:\n      {\n        console.log(action);\n        let image = '';\n\n        if (action.submitted.cover === \"frontCover\") {\n          image = {\n            frontCover: action.json.data.filename,\n            frontCaption: action.submitted.caption\n          };\n        } else {\n          image = {\n            backCover: action.json.data.filename,\n            backCaption: action.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD, image));\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cd.reducer.js"],"names":["ACTIONS","mainAction","db","storage","_","initialState","cdReducer","state","action","type","CREATE_NEW_CD","stateCopy","cloneDeep","payload","console","log","collection","add","then","docRef","_id","id","doc","update","asyncDispatch","CREATE_NEW_CD_SUCCESS","CREATE_NEW_CD_FAIL","LOAD_CD","where","get","querySnapshot","data","docs","map","LOAD_CD_SUCCESS","length","LOAD_CD_FAIL","UPDATE_CD","UPDATE_CD_SUCCESS","UPDATE_CD_FAIL","UPDATE_CD_IMAGE","UPDATE_CD_IMAGE_SUCCESS","newImage","submitted","albumID","caption","cover","imageName","json","filename","updatedAt","Date","now","currentID","UPDATE_POST_IMAGE","UPDATE_CD_IMAGE_FAIL","UPLOAD_CD_IMAGE","image","cd","name","frontCover","frontCaption","backCover","backCaption","cdImage","UPLOAD_CD_IMAGE_SUCCESS","path","postImageRef","ref","put","on","snapshot","error","child","getDownloadURL","url","LOAD_PRESENTATION","UPLOAD_CD_IMAGE_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,EAAYC,OAAZ,QAA0B,gBAA1B;AACA,OAAQC,CAAR,MAAe,QAAf;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,SAAT,CAAoBC,KAAK,GAAGF,YAA5B,EAA0CG,MAA1C,EAAkD;AAC7D,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKT,OAAO,CAACU,aAAb;AAA4B;AAC5B,YAAIC,SAAS,GAAGP,CAAC,CAACQ,SAAF,CAAYJ,MAAM,CAACK,OAAnB,CAAhB;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACK,OAAnB;AACEX,QAAAA,EAAE,CAACc,UAAH,CAAc,KAAd,EACCC,GADD,CACKN,SADL,EAECO,IAFD,CAEOC,MAAD,IAAU;AACdR,UAAAA,SAAS,CAACS,GAAV,GAAgBD,MAAM,CAACE,EAAvB;AACAnB,UAAAA,EAAE,CAACc,UAAH,CAAc,KAAd,EACCM,GADD,CACKH,MAAM,CAACE,EADZ,EAECE,MAFD,CAEQ;AAACH,YAAAA,GAAG,EAACD,MAAM,CAACE;AAAZ,WAFR,EAEyBH,IAFzB,CAE8B,MAAI;AAChCV,YAAAA,MAAM,CAACgB,aAAP,CAAqBvB,UAAU,CAACD,OAAO,CAACyB,qBAAT,EAA+Bd,SAA/B,CAA/B;AACD,WAJD;AAMD,SAVD;AAWF,eAAOH,MAAM,CAACK,OAAd;AACC;;AACD,SAAKb,OAAO,CAACyB,qBAAb;AAAoC;AACpC,eAAOjB,MAAM,CAACK,OAAd;AACC;;AACD,SAAKb,OAAO,CAAC0B,kBAAb;AAAiC;AACjC,eAAOnB,KAAP;AACC;;AACD,SAAKP,OAAO,CAAC2B,OAAb;AAAsB;AACtB,YAAIhB,SAAS,GAAGP,CAAC,CAACQ,SAAF,CAAYL,KAAZ,CAAhB;;AACA,YAAIa,GAAG,GAAG,EAAV;AACIlB,QAAAA,EAAE,CAACc,UAAH,CAAc,KAAd,EACCY,KADD,CACO,IADP,EACY,IADZ,EACiBpB,MAAM,CAACK,OADxB,EAECgB,GAFD,GAGCX,IAHD,CAGMY,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBX,GAAG,IAAG;AACxCF,YAAAA,GAAG,GAAGE,GAAG,CAACD,EAAV;AACD,mBAAQC,GAAG,CAACS,IAAJ,EAAR;AAAmB,WAFP,CAAb;AAGCpB,UAAAA,SAAS,GAAGoB,IAAZ;AACApB,UAAAA,SAAS,CAAC,CAAD,CAAT,CAAaS,GAAb,GAAmBA,GAAnB;AACDZ,UAAAA,MAAM,CAACgB,aAAP,CAAqBvB,UAAU,CAACD,OAAO,CAACkC,eAAT,EAAyBvB,SAAzB,CAA/B;AACD,SAVD;AAWA,eAAOJ,KAAP;AACH;;AACD,SAAMP,OAAO,CAACkC,eAAd;AAA8B;AAE1B,eAAO1B,MAAM,CAACK,OAAP,CAAesB,MAAf,GAAwB,CAAxB,GAA4B3B,MAAM,CAACK,OAAP,CAAe,CAAf,CAA5B,GAA8C,EAArD;AACH;;AACD,SAAMb,OAAO,CAACoC,YAAd;AAA2B;AACvB,eAAO7B,KAAP;AACH;;AACD,SAAKP,OAAO,CAACqC,SAAb;AAAuB;AAEvBnC,QAAAA,EAAE,CAACc,UAAH,CAAc,KAAd,EAAqBM,GAArB,CAAyBd,MAAM,CAACK,OAAP,CAAeO,GAAxC,EACGG,MADH,CACUf,MAAM,CAACK,OADjB,EAC0BK,IAD1B,CAC+B,MAAI;AAC/BJ,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACFP,UAAAA,MAAM,CAACgB,aAAP,CAAqBvB,UAAU,CAACD,OAAO,CAACsC,iBAAT,EAA2B9B,MAAM,CAACK,OAAlC,CAA/B;AACD,SAJD;AAKA,eAAON,KAAP;AACC;;AACD,SAAKP,OAAO,CAACsC,iBAAb;AAA+B;AAC/B,YAAI3B,SAAS,GAAGP,CAAC,CAACQ,SAAF,CAAYL,KAAZ,CAAhB;;AACAC,QAAAA,MAAM,CAACgB,aAAP,CAAqBvB,UAAU,CAACD,OAAO,CAAC2B,OAAT,EAAiBhB,SAAS,CAACU,EAA3B,CAA/B;AACA,eAAO;AAACd,UAAAA,KAAD;AAAO,aAAGC,MAAM,CAACK;AAAjB,SAAP;AACC;;AACD,SAAKb,OAAO,CAACuC,cAAb;AAA4B;AAC5B,eAAOhC,KAAP;AACC;;AACD,SAAKP,OAAO,CAACwC,eAAb;AAA6B;AACzB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAOjC,KAAP;AACH;;AACD,SAAKP,OAAO,CAACyC,uBAAb;AAAqC;AAC/B,YAAI9B,SAAS,GAAGP,CAAC,CAACQ,SAAF,CAAYL,KAAZ,CAAhB;;AAEA,YAAImC,QAAQ,GAAG;AACbtB,UAAAA,GAAG,EAACZ,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBvB,GADhB;AAEbwB,UAAAA,OAAO,EAACpC,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBC,OAFpB;AAGbC,UAAAA,OAAO,EAACrC,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBE,OAHpB;AAIbC,UAAAA,KAAK,EAACtC,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBG,KAJlB;AAKbC,UAAAA,SAAS,EAACvC,MAAM,CAACK,OAAP,CAAemC,IAAf,CAAoBjB,IAApB,CAAyBkB,QALtB;AAMbC,UAAAA,SAAS,EAACC,IAAI,CAACC,GAAL;AANG,SAAf;AAQAzC,QAAAA,SAAS,CAAC0C,SAAV,GAAsB7C,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBC,OAA/C;AACApC,QAAAA,MAAM,CAACgB,aAAP,CAAqBvB,UAAU,CAAED,OAAO,CAACsD,iBAAV,EAA4BZ,QAA5B,CAA/B;AACF,eAAO/B,SAAP;AACH;;AACD,SAAKX,OAAO,CAACuD,oBAAb;AAAkC;AAC9B,eAAOhD,KAAP;AACH;;AACD,SAAKP,OAAO,CAACwD,eAAb;AAA6B;AAC3B,YAAIC,KAAK,GAAG,EAAZ;AAAA,YACIC,EAAE,GAAE,EADR;;AAEA,YAAGlD,MAAM,CAACK,OAAP,CAAeiC,KAAf,KAAyB,MAA5B,EAAmC;AACjCW,UAAAA,KAAK,GAAG;AACNb,YAAAA,OAAO,EAAEpC,MAAM,CAACK,OAAP,CAAe+B,OADlB;AAENE,YAAAA,KAAK,EAAEtC,MAAM,CAACK,OAAP,CAAeiC,KAAf,GAAuBtC,MAAM,CAACK,OAAP,CAAeiC,KAAtC,GAA4C,EAF7C;AAGNC,YAAAA,SAAS,EAACvC,MAAM,CAACK,OAAP,CAAe4C,KAAf,CAAqBE;AAHzB,WAAR;AAKD,SAND,MAMO;AACLF,UAAAA,KAAK,GAAG;AACNb,YAAAA,OAAO,EAAEpC,MAAM,CAACK,OAAP,CAAe+B,OADlB;AAENC,YAAAA,OAAO,EAAErC,MAAM,CAACK,OAAP,CAAegC,OAAf,GAAyBrC,MAAM,CAACK,OAAP,CAAegC,OAAxC,GAAiD,EAFpD;AAGNC,YAAAA,KAAK,EAAEtC,MAAM,CAACK,OAAP,CAAeiC,KAAf,GAAuBtC,MAAM,CAACK,OAAP,CAAeiC,KAAtC,GAA4C,EAH7C;AAINC,YAAAA,SAAS,EAACvC,MAAM,CAACK,OAAP,CAAe4C,KAAf,CAAqBE;AAJzB,WAAR;AAMD;;AAGD,YAAGnD,MAAM,CAACK,OAAP,CAAeiC,KAAf,KAAyB,YAA5B,EAAyC;AACxCY,UAAAA,EAAE,GAAG;AACHE,YAAAA,UAAU,EAAGpD,MAAM,CAACK,OAAP,CAAe4C,KAAf,CAAqBE,IAD/B;AAEHE,YAAAA,YAAY,EAACrD,MAAM,CAACK,OAAP,CAAegC,OAAf,GAAyBrC,MAAM,CAACK,OAAP,CAAegC,OAAxC,GAAiD;AAF3D,WAAL;AAIA,SALD,MAKQ,IAAGrC,MAAM,CAACK,OAAP,CAAeiC,KAAf,KAAyB,WAA5B,EAAwC;AAC9CY,UAAAA,EAAE,GAAG;AACHI,YAAAA,SAAS,EAAGtD,MAAM,CAACK,OAAP,CAAe4C,KAAf,CAAqBE,IAD9B;AAEHI,YAAAA,WAAW,EAACvD,MAAM,CAACK,OAAP,CAAegC,OAAf,GAAyBrC,MAAM,CAACK,OAAP,CAAegC,OAAxC,GAAiD;AAF1D,WAAL;AAID,SALO,MAKD;AACLa,UAAAA,EAAE,GAAG;AACHM,YAAAA,OAAO,EAAGxD,MAAM,CAACK,OAAP,CAAe4C,KAAf,CAAqBE;AAD5B,WAAL;AAGD;;AAED7C,QAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ,EAAmBiD,KAAnB,EAAyBC,EAAzB,EAnC2B,CAqC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAlD,QAAAA,MAAM,CAACgB,aAAP,CAAqBvB,UAAU,CAACD,OAAO,CAACiE,uBAAT,EAAiCzD,MAAM,CAACK,OAAxC,CAA/B;AACE,eAAON,KAAP;AACD;;AACD,SAAKP,OAAO,CAACiE,uBAAb;AAAqC;AAEnC,YAAGzD,MAAM,CAACK,OAAP,CAAeiC,KAAf,KAAyB,MAA5B,EAAmC;AACjC,cAAIoB,IAAI,GAAG,kBAAX;AACD,SAFD,MAEO;AACL,cAAIA,IAAI,GAAG,QAAX;AACD;;AAED,YAAIC,YAAY,GAAGhE,OAAO,CAACiE,GAAR,CAAYF,IAAI,GAAC1D,MAAM,CAACK,OAAP,CAAe4C,KAAf,CAAqBE,IAAtC,EAA4CU,GAA5C,CAAgD7D,MAAM,CAACK,OAAP,CAAe4C,KAA/D,CAAnB;AACAU,QAAAA,YAAY,CAACG,EAAb,CAAgB,eAAhB,EAAiCC,QAAD,IAAY,CAC1C;AACD,SAFD,EAEGC,KAAD,IAAS;AACT;AACA1D,UAAAA,OAAO,CAACC,GAAR,CAAYyD,KAAZ;AACD,SALD,EAKE,MAAI;AACJ;AACArE,UAAAA,OAAO,CAACiE,GAAR,CAAYF,IAAZ,EAAkBO,KAAlB,CAAwBjE,MAAM,CAACK,OAAP,CAAe4C,KAAf,CAAqBE,IAA7C,EAAmDe,cAAnD,GAAoExD,IAApE,CAAyEyD,GAAG,IAAE;AAC5E7D,YAAAA,OAAO,CAACC,GAAR,CAAY4D,GAAZ;AACAnE,YAAAA,MAAM,CAACgB,aAAP,CAAqBvB,UAAU,CAACD,OAAO,CAAC4E,iBAAT,EAA2BpE,MAAM,CAACK,OAAP,CAAe+B,OAA1C,CAA/B;AACD,WAHD;AAID,SAXD;AAYA,eAAOrC,KAAP;AACD;;AACD,SAAKP,OAAO,CAAC6E,oBAAb;AAAkC;AAChC,eAAOtE,KAAP;AACD;;AACD,SAAKP,OAAO,CAACwC,eAAb;AAA6B;AAC3B1B,QAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACA,YAAIiD,KAAK,GAAG,EAAZ;;AACA,YAAGjD,MAAM,CAACmC,SAAP,CAAiBG,KAAjB,KAA2B,YAA9B,EAA4C;AAC1CW,UAAAA,KAAK,GAAG;AACNG,YAAAA,UAAU,EAACpD,MAAM,CAACwC,IAAP,CAAYjB,IAAZ,CAAiBkB,QADtB;AAENY,YAAAA,YAAY,EAACrD,MAAM,CAACmC,SAAP,CAAiBE;AAFxB,WAAR;AAID,SALD,MAKO;AACLY,UAAAA,KAAK,GAAG;AACNK,YAAAA,SAAS,EAACtD,MAAM,CAACwC,IAAP,CAAYjB,IAAZ,CAAiBkB,QADrB;AAENc,YAAAA,WAAW,EAACvD,MAAM,CAACmC,SAAP,CAAiBE;AAFvB,WAAR;AAID;;AACDrC,QAAAA,MAAM,CAACgB,aAAP,CAAqBvB,UAAU,CAAED,OAAO,CAACqC,SAAV,EAAoBoB,KAApB,CAA/B;AACA,eAAOlD,KAAP;AACD;;AACH;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA9LJ;AAkMD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db,storage} from \"../../firebase\";\nimport  _ from \"lodash\"\nconst initialState = {};\nexport default function cdReducer (state = initialState, action) {\n    switch (action.type) {\n  \n        case ACTIONS.CREATE_NEW_CD: {\n        let stateCopy = _.cloneDeep(action.payload)\n        console.log(action.payload)\n          db.collection(\"cds\")\n          .add(stateCopy)\n          .then((docRef)=>{\n            stateCopy._id = docRef.id\n            db.collection(\"cds\")\n            .doc(docRef.id)\n            .update({_id:docRef.id}).then(()=>{\n              action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_SUCCESS,stateCopy))\n            });\n           \n          });\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_CD_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_CD_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_CD: {\n        let stateCopy = _.cloneDeep(state)\n        let _id = ''\n            db.collection(\"cds\")\n            .where(\"id\",\"==\",action.payload)\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc =>{ \n                _id = doc.id\n               return  doc.data()});\n               stateCopy = data\n               stateCopy[0]._id = _id\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_SUCCESS,stateCopy))\n            });\n            return state\n        }\n        case  ACTIONS.LOAD_CD_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_CD_FAIL:{\n            return state\n        }\n        case ACTIONS.UPDATE_CD:{\n          \n        db.collection(\"cds\").doc(action.payload._id)\n          .update(action.payload).then(()=>{\n            console.log(\"success\")\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_SUCCESS,action.payload))\n        });\n        return state\n        }\n        case ACTIONS.UPDATE_CD_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD,stateCopy.id))\n        return {state,...action.payload}\n        }\n        case ACTIONS.UPDATE_CD_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE:{\n            // let stateCopy = _.cloneDeep(action.payload)\n            //  let image = stateCopy.image\n            //  updateCdImage(image).then((json)=>{\n    \n            //   if(json.status!==404 || json.status!==500) {\n            //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n            //   } else {\n            //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,json.response.message))\n            //   }\n            // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,err)))\n          \n            return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_CD_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE:{\n          let image = {},\n              cd= {}\n          if(action.payload.cover === \"main\"){\n            image = {\n              albumID: action.payload.albumID,\n              cover: action.payload.cover ? action.payload.cover:\"\",\n              imageName:action.payload.image.name\n            }\n          } else {\n            image = {\n              albumID: action.payload.albumID,\n              caption: action.payload.caption ? action.payload.caption :\"\",\n              cover: action.payload.cover ? action.payload.cover:\"\",\n              imageName:action.payload.image.name\n            }\n          }\n\n\n          if(action.payload.cover === \"frontCover\"){\n           cd = {\n             frontCover : action.payload.image.name,\n             frontCaption:action.payload.caption ? action.payload.caption :\"\",\n           }\n          } else  if(action.payload.cover === \"backCover\"){\n            cd = {\n              backCover : action.payload.image.name,\n              backCaption:action.payload.caption ? action.payload.caption :\"\",\n            }\n          } else {\n            cd = {\n              cdImage : action.payload.image.name\n            }\n          }\n\n          console.log(action,image,cd)\n\n        // db.collection(\"cds\").doc(action.payload.docId)\n        // .update(cd).then(()=>{   \n        //     db.collection(\"postimages\")\n        //     .doc()\n        //     .set(image)\n        //     .then(() => {\n        //       action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_SUCCESS,action.payload))\n        //     });\n        //  });\n\n        action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_SUCCESS,action.payload))\n          return state\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE_SUCCESS:{\n\n          if(action.payload.cover === \"main\"){\n            let path = \"music_catalogue/\"\n          } else {\n            let path = \"posts/\"\n          }\n\n          let postImageRef = storage.ref(path+action.payload.image.name).put(action.payload.image);\n          postImageRef.on('state_changed',(snapshot)=>{\n            //progress function\n          },(error)=>{\n            //error\n            console.log(error)\n          },()=>{\n            //complete\n            storage.ref(path).child(action.payload.image.name).getDownloadURL().then(url=>{\n              console.log(url)\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,action.payload.albumID))\n            })\n          })\n          return state\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE_FAIL:{\n          return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE:{\n          console.log(action)\n          let image = ''\n          if(action.submitted.cover === \"frontCover\") {\n            image = {\n              frontCover:action.json.data.filename,\n              frontCaption:action.submitted.caption \n            }\n          } else {\n            image = {\n              backCover:action.json.data.filename,\n              backCaption:action.submitted.caption \n            }\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_CD,image))\n          return state\n        }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}