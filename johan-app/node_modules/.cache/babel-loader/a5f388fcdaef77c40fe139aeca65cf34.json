{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { uploadImage } from \"API/indexAPI\";\nconst initialState = {};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        uploadImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, json));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let image = action.json ? action.json.data.filename : '';\n        stateCopy.postImage[0].imageName = image;\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","uploadImage","initialState","singlePostReducer","state","action","type","LOAD_ARTICLE","payload","LOAD_POST","UPDATE_POST","then","json","asyncDispatch","UPDATE_POST_SUCCESS","data","catch","err","UPDATE_POST_FAIL","UPLOAD_IMAGE","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_FAIL","stateCopy","_","cloneDeep","image","filename","postImage","imageName"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAAQC,WAAR,QAA0B,cAA1B;AAEA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,iBAAT,CAA4BC,KAAK,GAAGF,YAApC,EAAkDG,MAAlD,EAA0D;AACrE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,OAAO,CAACS,YAAb;AAA0B;AACxB,eAAOF,MAAM,CAACG,OAAd;AACD;;AACD,SAAKV,OAAO,CAACW,SAAb;AAAwB;AACtB,eAAOJ,MAAM,CAACG,OAAd;AACD;;AACD,SAAKV,OAAO,CAACY,WAAb;AAAyB;AACvBX,QAAAA,UAAU,CAACM,MAAM,CAACG,OAAR,CAAV,CAA2BG,IAA3B,CAAgCC,IAAI,IAAE;AACpCP,UAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACF,OAAO,CAACgB,mBAAT,EAA6BF,IAAI,CAACG,IAAL,CAAUA,IAAvC,CAA/B;AACD,SAFD,EAEGC,KAFH,CAESC,GAAG,IAAE;AACZZ,UAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACF,OAAO,CAACoB,gBAAT,EAA0BD,GAA1B,CAA/B;AACD,SAJD;AAKA,eAAOb,KAAP;AACD;;AACD,SAAKN,OAAO,CAACgB,mBAAb;AAAiC;AAC/B,eAAO;AAACV,UAAAA,KAAD;AAAO,aAAGC,MAAM,CAACG;AAAjB,SAAP;AACD;;AACD,SAAKV,OAAO,CAACoB,gBAAb;AAA8B;AAC5B,eAAOd,KAAP;AACD;;AACD,SAAKN,OAAO,CAACqB,YAAb;AAA0B;AACxBlB,QAAAA,WAAW,CAACI,MAAM,CAACG,OAAR,CAAX,CAA4BG,IAA5B,CAAkCC,IAAD,IAAQ;AACvCP,UAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACF,OAAO,CAACsB,oBAAT,EAA8BR,IAA9B,CAA/B;AACD,SAFD,EAEGI,KAFH,CAESC,GAAG,IAAIZ,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACF,OAAO,CAACuB,iBAAT,EAA2BJ,GAA3B,CAA/B,CAFhB;AAGA,eAAOb,KAAP;AACD;;AACD,SAAKN,OAAO,CAACsB,oBAAb;AAAkC;AAC9B,YAAIE,SAAS,GAAGC,CAAC,CAACC,SAAF,CAAYpB,KAAZ,CAAhB;;AACA,YAAIqB,KAAK,GAAGpB,MAAM,CAACO,IAAP,GAAcP,MAAM,CAACO,IAAP,CAAYG,IAAZ,CAAiBW,QAA/B,GAAwC,EAApD;AACAJ,QAAAA,SAAS,CAACK,SAAV,CAAoB,CAApB,EAAuBC,SAAvB,GAAmCH,KAAnC;AACF,eAAOH,SAAP;AACD;;AACD,SAAKxB,OAAO,CAACuB,iBAAb;AAA+B;AAC7B,eAAOjB,KAAP;AACD;;AACD;AACE,aAAOA,KAAP;AArCJ;AAwCD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {uploadImage} from \"API/indexAPI\"\n\nconst initialState = {};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n        return action.payload\n      }\n      case ACTIONS.UPDATE_POST:{\n        updatePost(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        uploadImage(action.payload).then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,json))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          let image = action.json ? action.json.data.filename:''\n          stateCopy.postImage[0].imageName = image\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      default: \n        return state\n       \n    }\n  }"]},"metadata":{},"sourceType":"module"}