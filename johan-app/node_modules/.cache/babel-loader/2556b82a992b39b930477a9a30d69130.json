{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database, db, dbRef, agendaRef } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"agendas\").add(stateCopy).then(docRef => {\n          db.collection(\"agendas\").doc(docRef.id).update(stateCopy).then(() => {\n            stateCopy._id = docRef.id;\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n          });\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020');\n        agendaYearRef.on('child_added', snap => {\n          const data = snap.val();\n          console.log(data); //return console.log(snap.val())\n\n          return data;\n        }); // let query = agendaRef.child(\"year\").equalTo(\"2020\")\n        // query.on('child_added',DataSnapshot =>{\n        //    let data = DataSnapshot\n        //    console.log(data);\n        // })\n\n        let _id = '';\n        let stateCopy = '';\n        db.collection(\"agendas\").where(\"year\", \"==\", \"2020\") // .orderBy(\"month\",\"desc\")\n        // .orderBy(\"day\",\"desc\")\n        .get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          stateCopy = data;\n          let newData = [];\n          stateCopy.map((agenda, i) => {\n            agenda._id = _id;\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            if (i >= action.payload.skip && i <= action.payload.limit) newData.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, newData));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              post.title = title[0];\n              post.date = `${post.year}-${post.month}-${post.day}`;\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        let _id, stateCopy;\n\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          stateCopy = data;\n          if (stateCopy[0]) stateCopy[0]._id = _id;\n\n          if (data.length > 0) {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, stateCopy));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL, {\n              error: \"Failed to retrieve agenda\"\n            }));\n          }\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return { ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        console.log(action);\n        db.collection(\"agendas\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","database","db","dbRef","agendaRef","_","initialState","agendaReducer","state","action","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","collection","add","then","docRef","doc","id","update","_id","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","DELETE_AGENDA","where","get","querySnapshot","forEach","ref","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","agendaYearRef","orderByChild","startAt","on","snap","data","val","console","log","docs","map","newData","agenda","i","date","month","day","year","skip","limit","push","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","d","Date","getDay","getMonth","toString","getFullYear","orderBy","post","title","filter","presentation","cd","cdName","LOAD_AGENDAS_SUCCESS","agendas","LOAD_AGENDAS_FAIL","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","error","UPDATE_AGENDA","UPDATE_AGENDA_SUCCESS"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database,db , dbRef,agendaRef} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n    let stateCopy = _.cloneDeep(action.payload)\n    db.collection(\"agendas\")\n    .add(stateCopy).then((docRef)=>{\n    db.collection(\"agendas\")\n    .doc(docRef.id)\n    .update(stateCopy).then(()=>{\n      stateCopy._id = docRef.id\n      action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n    });\n    })\n    return stateCopy\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.DELETE_AGENDA:{\n\n    db.collection(\"agendas\")\n    .where('id','==',action.payload)\n    .get()\n    .then((querySnapshot) => {\n      querySnapshot.forEach((doc)=> doc.ref.delete())\n      action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n    });\n    return state\n    }  \n    case ACTIONS.DELETE_AGENDA_SUCCESS:{\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n    return state\n    }  \n    case ACTIONS.LOAD_CD_AGENDA: {\n     var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020')\n    \n     agendaYearRef.on('child_added',(snap)=>{\n    const data = snap.val()\n     console.log(data)\n      //return console.log(snap.val())\n    return data\n    })\n    \n      // let query = agendaRef.child(\"year\").equalTo(\"2020\")\n      // query.on('child_added',DataSnapshot =>{\n      //    let data = DataSnapshot\n      //    console.log(data);\n      // })\n     \n\n    let _id = ''\n    let stateCopy = ''\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",\"2020\")\n    // .orderBy(\"month\",\"desc\")\n    // .orderBy(\"day\",\"desc\")\n    .get()\n    .then(querySnapshot => {\n    const data = querySnapshot.docs.map(doc => {\n      _id = doc.id\n      return doc.data()});\n      stateCopy = data\n      let newData = []\n      stateCopy.map((agenda,i)=>{\n        agenda._id = _id\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        if(i >= action.payload.skip && i <= action.payload.limit)\n        newData.push(agenda)\n      })\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,newData))\n    });\n\n    return state\n    }\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n    return action.payload\n    }\n    case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS: {\n    let d = new Date();\n    let day = d.getDay();\n    let month = (d.getMonth() + 1).toString()\n    let year = d.getFullYear().toString();\n\n    let stateCopy = ''\n    //=======================================================\n    db.collection(\"agendas\")\n    //.where(\"year\",'==',year)\n    .where(\"month\",'>=',month)\n    .orderBy(\"month\",\"asc\")\n    .orderBy(\"day\",\"asc\")\n    .get()\n    .then(querySnapshot => {\n    const data = querySnapshot.docs.map(doc => doc.data());\n    stateCopy = data;\n\n    //=======================================================\n      db.collection(\"presentations\")\n      // .where(\"id\",\"==\",stateCopy.cd.toString())\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n\n        stateCopy.map((post,i)=>{\n\n        let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n        post.title = title[0]; \n        post.date=`${post.year}-${post.month}-${post.day}`\n        return post\n        })\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n      });\n    //========================================================\n    });\n\n\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n    let stateCopy = _.cloneDeep(action.payload)\n    let d = new Date();\n    let year = d.getFullYear().toString();\n\n\n    return stateCopy.filter(agendas=>agendas.year === year)\n    }\n    case ACTIONS.LOAD_AGENDAS_FAIL:{\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA:{\n    let _id,stateCopy \n    db.collection(\"agendas\")\n    .where(\"id\",\"==\",action.payload)\n    .get()\n    .then(querySnapshot => {\n    const data = querySnapshot.docs.map(doc => {\n    _id = doc.id\n    return doc.data()});\n    stateCopy= data\n    if(stateCopy[0])\n    stateCopy[0]._id = _id\n      \n\n    if(data.length > 0){\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,stateCopy))\n    } else {\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL,{error:\"Failed to retrieve agenda\"}))\n    }\n    });\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA_SUCCESS:{\n    return {...action.payload[0]}\n    }\n    case ACTIONS.LOAD_AGENDA_FAIL:{\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA:{\n    console.log(action)\n    db.collection(\"agendas\")\n    .doc(action.payload._id)\n    .update(action.payload).then(()=>{\n      action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n    });\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n    let stateCopy = _.cloneDeep(state)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n    return {state,...action.payload}\n    }\n    default: \n      return {\n        ...state\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}