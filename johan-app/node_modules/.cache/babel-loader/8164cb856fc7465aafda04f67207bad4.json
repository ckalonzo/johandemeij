{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, database } from \"../../firebase\";\nconst initialState = {};\nexport default function concertInformationReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.SUBMIT_CONCERT_INFORMATION:\n      {\n        let stateCopy = action.payload;\n        db.collection(\"concertinformation\").add(stateCopy).then(function (docRef) {\n          console.log(docRef);\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.SUBMIT_CONCERT_INFORMATION_SUCCESS, {\n            status: \"success\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.SUBMIT_CONCERT_INFORMATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.SUBMIT_CONCERT_INFORMATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_SUBMISSIONS:\n      {\n        let items = ''; // db.collection(\"concertinformation\")\n        //  .get()\n        //  .then(querySnapshot => {\n        //    const data = querySnapshot.docs.map(doc => {\n        //     items = doc.data()\n        //      return doc.data()});\n        //     action.asyncDispatch(mainAction(ACTIONS.LOAD_SUBMISSIONS_SUCCESS,items))\n        //  });\n\n        var submissionRef = database.ref('concertinformation');\n        submissionRef.on('value', (snap, i) => {\n          const data = snap.val();\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_SUBMISSIONS_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_SUBMISSIONS_SUCCESS:\n      {\n        console.log(action.payload);\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_SUBMISSIONS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/concertInfomation.reducer.js"],"names":["ACTIONS","mainAction","db","database","initialState","concertInformationReducer","state","action","type","SUBMIT_CONCERT_INFORMATION","stateCopy","payload","collection","add","then","docRef","console","log","_id","id","asyncDispatch","SUBMIT_CONCERT_INFORMATION_SUCCESS","status","SUBMIT_CONCERT_INFORMATION_FAIL","LOAD_SUBMISSIONS","items","submissionRef","ref","on","snap","i","data","val","LOAD_SUBMISSIONS_SUCCESS","LOAD_SUBMISSIONS_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,yBAAT,CAAoCC,KAAK,GAAGF,YAA5C,EAA0DG,MAA1D,EAAkE;AAC7E,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKR,OAAO,CAACS,0BAAb;AAAyC;AAC1C,YAAIC,SAAS,GAAGH,MAAM,CAACI,OAAvB;AACCT,QAAAA,EAAE,CAACU,UAAH,CAAc,oBAAd,EACCC,GADD,CACKH,SADL,EAECI,IAFD,CAEM,UAASC,MAAT,EAAgB;AACpBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAL,UAAAA,SAAS,CAACQ,GAAV,GAAgBH,MAAM,CAACI,EAAvB;AACAZ,UAAAA,MAAM,CAACa,aAAP,CAAqBnB,UAAU,CAACD,OAAO,CAACqB,kCAAT,EAA4C;AAACC,YAAAA,MAAM,EAAC;AAAR,WAA5C,CAA/B;AACD,SAND;AAOE,eAAOhB,KAAP;AACD;;AACD,SAAKN,OAAO,CAACqB,kCAAb;AAAiD;AAE/C,eAAOd,MAAM,CAACI,OAAd;AACD;;AACD,SAAKX,OAAO,CAACuB,+BAAb;AAA8C;AAE5C,eAAOjB,KAAP;AACD;;AACD,SAAKN,OAAO,CAACwB,gBAAb;AAA+B;AACpC,YAAIC,KAAK,GAAG,EAAZ,CADoC,CAEjC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEC,YAAIC,aAAa,GAAGvB,QAAQ,CAACwB,GAAT,CAAa,oBAAb,CAApB;AACAD,QAAAA,aAAa,CAACE,EAAd,CAAiB,OAAjB,EAAyB,CAACC,IAAD,EAAMC,CAAN,KAAU;AAElC,gBAAMC,IAAI,GAAGF,IAAI,CAACG,GAAL,EAAb;AACAzB,UAAAA,MAAM,CAACa,aAAP,CAAqBnB,UAAU,CAACD,OAAO,CAACiC,wBAAT,EAAkCF,IAAlC,CAA/B;AACC,SAJF;AAMG,eAAOzB,KAAP;AACD;;AACD,SAAKN,OAAO,CAACiC,wBAAb;AAAuC;AACrCjB,QAAAA,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACI,OAAnB;AACA,eAAOJ,MAAM,CAACI,OAAd;AACD;;AACD,SAAKX,OAAO,CAACkC,qBAAb;AAAoC;AAElC,eAAO5B,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AApDJ;AAwDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db , database } from \"../../firebase\";\nconst initialState = {};\nexport default function concertInformationReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.SUBMIT_CONCERT_INFORMATION: {\n     let stateCopy = action.payload\n      db.collection(\"concertinformation\")\n      .add(stateCopy)\n      .then(function(docRef){\n        console.log(docRef)\n        stateCopy._id = docRef.id\n        action.asyncDispatch(mainAction(ACTIONS.SUBMIT_CONCERT_INFORMATION_SUCCESS,{status:\"success\"}))\n      });\n        return state\n      }\n      case ACTIONS.SUBMIT_CONCERT_INFORMATION_SUCCESS: {\n\n        return action.payload\n      }\n      case ACTIONS.SUBMIT_CONCERT_INFORMATION_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_SUBMISSIONS: {\n let items = ''\n    // db.collection(\"concertinformation\")\n    //  .get()\n    //  .then(querySnapshot => {\n    //    const data = querySnapshot.docs.map(doc => {\n    //     items = doc.data()\n    //      return doc.data()});\n      \n    //     action.asyncDispatch(mainAction(ACTIONS.LOAD_SUBMISSIONS_SUCCESS,items))\n    //  });\n\n     var submissionRef = database.ref('concertinformation')\n     submissionRef.on('value',(snap,i)=>{\n    \n      const data = snap.val()\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_SUBMISSIONS_SUCCESS,data))\n      })\n     \n        return state\n      }\n      case ACTIONS.LOAD_SUBMISSIONS_SUCCESS: {\n        console.log(action.payload)\n        return action.payload\n      }\n      case ACTIONS.LOAD_SUBMISSIONS_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}