{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nconst initialState = {};\nexport default function cdInfoReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_INFO:\n      {\n        let stateCopy = []; //=======================================================\n\n        db.collection(\"cd_info\").where(\"cdId\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n          console.log(\"cdinfo ===>\", data);\n          stateCopy.map((cdinfo, i) => {\n            //=======================================================\n            db.collection(\"presentations\").where(\"id\", \"==\", cdinfo.track_title).get().then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n              cdinfo.presentationData = { ...data\n              };\n              console.log(\"presentations ===>\", data);\n            }); //========================================================\n\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS, stateCopy));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cdInfo.reducer.js"],"names":["ACTIONS","mainAction","db","initialState","cdInfoReducer","state","action","type","LOAD_CD_INFO","stateCopy","collection","where","payload","get","then","querySnapshot","data","docs","map","doc","console","log","cdinfo","i","track_title","presentationData","asyncDispatch","LOAD_CD_INFO_SUCCESS","LOAD_CD_INFO_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAGA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AAEjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,OAAO,CAACQ,YAAb;AAA2B;AAEzB,YAAIC,SAAS,GAAG,EAAhB,CAFyB,CAGzB;;AACAP,QAAAA,EAAE,CAACQ,UAAH,CAAc,SAAd,EACCC,KADD,CACO,MADP,EACc,IADd,EACmBL,MAAM,CAACM,OAD1B,EAEAC,GAFA,GAGAC,IAHA,CAGKC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,UAAAA,SAAS,GAACO,IAAV;AAEAI,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BL,IAA1B;AAEAP,UAAAA,SAAS,CAACS,GAAV,CAAc,CAACI,MAAD,EAAQC,CAAR,KAAY;AAExB;AACArB,YAAAA,EAAE,CAACQ,UAAH,CAAc,eAAd,EACCC,KADD,CACO,IADP,EACY,IADZ,EACiBW,MAAM,CAACE,WADxB,EAECX,GAFD,GAGCC,IAHD,CAGMC,aAAa,IAAI;AACrB,oBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AAEAM,cAAAA,MAAM,CAACG,gBAAP,GAA0B,EAAC,GAAGT;AAAJ,eAA1B;AACAI,cAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCL,IAAjC;AAED,aATD,EAHwB,CAezB;;AAEDV,YAAAA,MAAM,CAACoB,aAAP,CAAqBzB,UAAU,CAACD,OAAO,CAAC2B,oBAAT,EAA8BlB,SAA9B,CAA/B;AAGA,WApBA;AAwBD,SAjCA;AAmCA,eAAOJ,KAAP;AACD;;AACD,SAAKL,OAAO,CAAC2B,oBAAb;AAAmC;AAEjC,eAAOrB,MAAM,CAACM,OAAd;AACD;;AACD,SAAKZ,OAAO,CAAC4B,iBAAb;AAAgC;AAE9B,eAAOvB,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AArDJ;AAyDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\n\nconst initialState = {\n\n}\nexport default function cdInfoReducer (state = initialState, action) {\n   \n    switch (action.type) {\n  \n      case ACTIONS.LOAD_CD_INFO: {\n\n        let stateCopy = []\n        //=======================================================\n        db.collection(\"cd_info\")\n        .where(\"cdId\",\"==\",action.payload)\n       .get()\n       .then(querySnapshot => {\n         const data = querySnapshot.docs.map(doc => doc.data());\n         stateCopy=data;\n\n         console.log(\"cdinfo ===>\",data)\n         \n         stateCopy.map((cdinfo,i)=>{\n\n           //=======================================================\n           db.collection(\"presentations\")\n           .where(\"id\",\"==\",cdinfo.track_title)\n           .get()\n           .then(querySnapshot => {\n             const data = querySnapshot.docs.map(doc => doc.data());\n\n             cdinfo.presentationData = {...data}\n             console.log(\"presentations ===>\",data)\n            \n           });\n\n            \n          //========================================================\n         \n         action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS,stateCopy))\n        \n        \n        })\n       \n         \n        \n       });\n          \n        return state\n      }\n      case ACTIONS.LOAD_CD_INFO_SUCCESS: {\n        \n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_INFO_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}