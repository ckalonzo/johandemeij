{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function orderReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_ORDER_LOCATION:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"orders\").add(stateCopy).then(function (docRef) {\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_ORDER_LOCATION_SUCCESS, stateCopy));\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_ORDER_LOCATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_ORDER_LOCATION:\n      {\n        db.collection(\"orders\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_ORDER_LOCATION_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_ORDER_LOCATION_SUCCESS:\n      {\n        return action.payload ? action.payload : state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATIONS:\n      {\n        db.collection(\"orders\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_ORDER_LOCATIONS_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATIONS_SUCCESS:\n      {\n        return action.payload ? action.payload : state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATIONS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATION:\n      {\n        db.collection(\"orders\").where(\"id\", '==', action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_ORDER_LOCATION_SUCCESS, ...data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATION_SUCCESS:\n      {\n        return action.payload ? action.payload : state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_ORDER_LOCATION:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let _id = console.log(stateCopy.id);\n\n        db.collection(\"orders\").where(\"id\", '==', stateCopy.id).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          console.log(data);\n          db.collection(\"orders\").doc(_id).update(stateCopy).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_ORDER_LOCATION_SUCCESS, stateCopy));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_ORDER_LOCATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Users/carlkalonzo/Documents/DEV/johandemeij/johan-app/src/redux/reducers/orderLocations.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","orderReducer","state","action","type","CREATE_ORDER_LOCATION","stateCopy","cloneDeep","payload","collection","add","then","docRef","_id","id","asyncDispatch","CREATE_ORDER_LOCATION_SUCCESS","DELETE_ORDER_LOCATION","where","get","querySnapshot","forEach","doc","ref","delete","DELETE_ORDER_LOCATION_SUCCESS","LOAD_ORDER_LOCATIONS","data","docs","map","LOAD_ORDER_LOCATIONS_SUCCESS","LOAD_ORDER_LOCATIONS_FAIL","LOAD_ORDER_LOCATION","LOAD_ORDER_LOCATION_SUCCESS","LOAD_ORDER_LOCATION_FAIL","UPDATE_ORDER_LOCATION","console","log","update","UPDATE_ORDER_LOCATION_SUCCESS"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\"\nconst initialState = {};\nexport default function orderReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_ORDER_LOCATION: {\n        let stateCopy = _.cloneDeep(action.payload)\n        db.collection(\"orders\")\n          .add(stateCopy)\n          .then(function(docRef){\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_ORDER_LOCATION_SUCCESS,stateCopy))\n          });\n        return stateCopy\n      }\n      case ACTIONS.CREATE_ORDER_LOCATION_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.DELETE_ORDER_LOCATION:{\n\n        db.collection(\"orders\")\n        .where('id','==',action.payload)\n         .get()\n         .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=> doc.ref.delete())\n           action.asyncDispatch(mainAction(ACTIONS.DELETE_ORDER_LOCATION_SUCCESS,[]))\n         });\n       return state\n     } \n     case ACTIONS.DELETE_ORDER_LOCATION_SUCCESS: {\n      return action.payload ? action.payload : state\n    } \n      case ACTIONS.LOAD_ORDER_LOCATIONS: {\n      db.collection(\"orders\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_ORDER_LOCATIONS_SUCCESS,data))\n      });\n\n        return state\n      }\n      case ACTIONS.LOAD_ORDER_LOCATIONS_SUCCESS: {\n        return action.payload ? action.payload : state\n      }\n      case ACTIONS.LOAD_ORDER_LOCATIONS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_ORDER_LOCATION: {\n        db.collection(\"orders\")\n        .where(\"id\",'==',action.payload)\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_ORDER_LOCATION_SUCCESS,...data))\n          });\n        return state\n      }\n      case ACTIONS.LOAD_ORDER_LOCATION_SUCCESS: {\n        return action.payload ? action.payload : state\n      }\n      case ACTIONS.LOAD_ORDER_LOCATION_FAIL: {\n        return state\n      }\n      case ACTIONS.UPDATE_ORDER_LOCATION:{\n        console.log(action)\n        let stateCopy = _.cloneDeep(action.payload)\n        let _id = \n        console.log(stateCopy.id)\n\n        db.collection(\"orders\")\n        .where(\"id\",'==',stateCopy.id)\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => {\n              _id = doc.id\n              return doc.data()});\n              console.log(data)\n           db.collection(\"orders\").doc(_id)\n            .update(stateCopy).then(()=>{\n              action.asyncDispatch(mainAction(ACTIONS.UPDATE_ORDER_LOCATION_SUCCESS,stateCopy))\n            });\n          });\n        return state\n      }\n      case ACTIONS.UPDATE_ORDER_LOCATION_SUCCESS:{\n        return action.payload\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}