{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { uploadPostImage } from \"API/indexAPI\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(state);\n\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","uploadPostImage","_","initialState","singlePostReducer","state","action","type","LOAD_ARTICLE","payload","LOAD_POST","UPDATE_POST","then","json","asyncDispatch","UPDATE_POST_SUCCESS","data","catch","err","UPDATE_POST_FAIL","UPLOAD_IMAGE","stateCopy","cloneDeep","image","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","console","log"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAAQC,eAAR,QAA8B,cAA9B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,iBAAT,CAA4BC,KAAK,GAAGF,YAApC,EAAkDG,MAAlD,EAA0D;AACrE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,OAAO,CAACU,YAAb;AAA0B;AACxB,eAAOF,MAAM,CAACG,OAAd;AACD;;AACD,SAAKX,OAAO,CAACY,SAAb;AAAwB;AACtB,eAAOJ,MAAM,CAACG,OAAd;AACD;;AACD,SAAKX,OAAO,CAACa,WAAb;AAAyB;AACvBZ,QAAAA,UAAU,CAACO,MAAM,CAACG,OAAR,CAAV,CAA2BG,IAA3B,CAAgCC,IAAI,IAAE;AACpCP,UAAAA,MAAM,CAACQ,aAAP,CAAqBd,UAAU,CAACF,OAAO,CAACiB,mBAAT,EAA6BF,IAAI,CAACG,IAAL,CAAUA,IAAvC,CAA/B;AACD,SAFD,EAEGC,KAFH,CAESC,GAAG,IAAE;AACZZ,UAAAA,MAAM,CAACQ,aAAP,CAAqBd,UAAU,CAACF,OAAO,CAACqB,gBAAT,EAA0BD,GAA1B,CAA/B;AACD,SAJD;AAKA,eAAOb,KAAP;AACD;;AACD,SAAKP,OAAO,CAACiB,mBAAb;AAAiC;AAC/B,eAAO;AAACV,UAAAA,KAAD;AAAO,aAAGC,MAAM,CAACG;AAAjB,SAAP;AACD;;AACD,SAAKX,OAAO,CAACqB,gBAAb;AAA8B;AAC5B,eAAOd,KAAP;AACD;;AACD,SAAKP,OAAO,CAACsB,YAAb;AAA0B;AACxB,YAAIC,SAAS,GAAGnB,CAAC,CAACoB,SAAF,CAAYhB,MAAM,CAACG,OAAnB,CAAhB;;AACC,YAAIc,KAAK,GAAGF,SAAS,CAACE,KAAtB;AACAtB,QAAAA,eAAe,CAACsB,KAAD,CAAf,CAAuBX,IAAvB,CAA6BC,IAAD,IAAQ;AAEnC,cAAGA,IAAI,CAACW,MAAL,KAAc,GAAd,IAAqBX,IAAI,CAACW,MAAL,KAAc,GAAtC,EAA2C;AACzClB,YAAAA,MAAM,CAACQ,aAAP,CAAqBd,UAAU,CAACF,OAAO,CAAC2B,oBAAT,EAA8B;AAACC,cAAAA,SAAS,EAACL,SAAX;AAAqBR,cAAAA;AAArB,aAA9B,CAA/B;AACD,WAFD,MAEO;AACLP,YAAAA,MAAM,CAACQ,aAAP,CAAqBd,UAAU,CAACF,OAAO,CAAC6B,iBAAT,EAA2Bd,IAAI,CAACe,QAAL,CAAcC,OAAzC,CAA/B;AACD;AACF,SAPA,EAOEZ,KAPF,CAOQC,GAAG,IAAIZ,MAAM,CAACQ,aAAP,CAAqBd,UAAU,CAACF,OAAO,CAAC6B,iBAAT,EAA2BT,GAA3B,CAA/B,CAPf;AASD,eAAOb,KAAP;AACD;;AACD,SAAKP,OAAO,CAAC2B,oBAAb;AAAkC;AAChCK,QAAAA,OAAO,CAACC,GAAR,CAAYzB,MAAZ;;AACE,YAAIe,SAAS,GAAGnB,CAAC,CAACoB,SAAF,CAAYjB,KAAZ,CAAhB;;AAEF,eAAOgB,SAAP;AACD;;AACD,SAAKvB,OAAO,CAAC6B,iBAAb;AAA+B;AAC7B,eAAOtB,KAAP;AACD;;AACD;AACE,aAAOA,KAAP;AA7CJ;AAgDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {uploadPostImage} from \"API/indexAPI\"\nimport _ from \"lodash\"\nconst initialState = {};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n        return action.payload\n      }\n      case ACTIONS.UPDATE_POST:{\n        updatePost(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n        console.log(action)\n          let stateCopy = _.cloneDeep(state)\n          \n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      default: \n        return state\n       \n    }\n  }"]},"metadata":{},"sourceType":"module"}