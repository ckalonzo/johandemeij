{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { uploadImage } from \"API/indexAPI\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let image = action.payload.image;\n        uploadImage(image).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n            submitted: action.payload,\n            returned: json\n          }));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(state);\n\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","uploadImage","_","initialState","singlePostReducer","state","action","type","LOAD_ARTICLE","payload","LOAD_POST","UPDATE_POST","then","json","asyncDispatch","UPDATE_POST_SUCCESS","data","catch","err","UPDATE_POST_FAIL","UPLOAD_IMAGE","image","UPLOAD_IMAGE_SUCCESS","submitted","returned","UPLOAD_IMAGE_FAIL","console","log","stateCopy","cloneDeep"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAAQC,WAAR,QAA0B,cAA1B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,iBAAT,CAA4BC,KAAK,GAAGF,YAApC,EAAkDG,MAAlD,EAA0D;AACrE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,OAAO,CAACU,YAAb;AAA0B;AACxB,eAAOF,MAAM,CAACG,OAAd;AACD;;AACD,SAAKX,OAAO,CAACY,SAAb;AAAwB;AACtB,eAAOJ,MAAM,CAACG,OAAd;AACD;;AACD,SAAKX,OAAO,CAACa,WAAb;AAAyB;AACvBZ,QAAAA,UAAU,CAACO,MAAM,CAACG,OAAR,CAAV,CAA2BG,IAA3B,CAAgCC,IAAI,IAAE;AACpCP,UAAAA,MAAM,CAACQ,aAAP,CAAqBd,UAAU,CAACF,OAAO,CAACiB,mBAAT,EAA6BF,IAAI,CAACG,IAAL,CAAUA,IAAvC,CAA/B;AACD,SAFD,EAEGC,KAFH,CAESC,GAAG,IAAE;AACZZ,UAAAA,MAAM,CAACQ,aAAP,CAAqBd,UAAU,CAACF,OAAO,CAACqB,gBAAT,EAA0BD,GAA1B,CAA/B;AACD,SAJD;AAKA,eAAOb,KAAP;AACD;;AACD,SAAKP,OAAO,CAACiB,mBAAb;AAAiC;AAC/B,eAAO;AAACV,UAAAA,KAAD;AAAO,aAAGC,MAAM,CAACG;AAAjB,SAAP;AACD;;AACD,SAAKX,OAAO,CAACqB,gBAAb;AAA8B;AAC5B,eAAOd,KAAP;AACD;;AACD,SAAKP,OAAO,CAACsB,YAAb;AAA0B;AACvB,YAAIC,KAAK,GAAGf,MAAM,CAACG,OAAP,CAAeY,KAA3B;AACDpB,QAAAA,WAAW,CAACoB,KAAD,CAAX,CAAmBT,IAAnB,CAAyBC,IAAD,IAAQ;AAC9BP,UAAAA,MAAM,CAACQ,aAAP,CAAqBd,UAAU,CAACF,OAAO,CAACwB,oBAAT,EAA8B;AAACC,YAAAA,SAAS,EAACjB,MAAM,CAACG,OAAlB;AAA0Be,YAAAA,QAAQ,EAACX;AAAnC,WAA9B,CAA/B;AACD,SAFD,EAEGI,KAFH,CAESC,GAAG,IAAIZ,MAAM,CAACQ,aAAP,CAAqBd,UAAU,CAACF,OAAO,CAAC2B,iBAAT,EAA2BP,GAA3B,CAA/B,CAFhB;AAIA,eAAOb,KAAP;AACD;;AACD,SAAKP,OAAO,CAACwB,oBAAb;AAAkC;AAChCI,QAAAA,OAAO,CAACC,GAAR,CAAYrB,MAAZ;;AACE,YAAIsB,SAAS,GAAG1B,CAAC,CAAC2B,SAAF,CAAYxB,KAAZ,CAAhB;;AAEF,eAAOuB,SAAP;AACD;;AACD,SAAK9B,OAAO,CAAC2B,iBAAb;AAA+B;AAC7B,eAAOpB,KAAP;AACD;;AACD;AACE,aAAOA,KAAP;AAvCJ;AA0CD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {uploadImage} from \"API/indexAPI\"\nimport _ from \"lodash\"\nconst initialState = {};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n        return action.payload\n      }\n      case ACTIONS.UPDATE_POST:{\n        updatePost(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n         let image = action.payload.image\n        uploadImage(image).then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:action.payload,returned:json}))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n        console.log(action)\n          let stateCopy = _.cloneDeep(state)\n          \n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      default: \n        return state\n       \n    }\n  }"]},"metadata":{},"sourceType":"module"}