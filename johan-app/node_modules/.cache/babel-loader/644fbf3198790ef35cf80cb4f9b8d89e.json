{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { updatePostImage, createPost, uploadPostImage, createPostImage, deletePostImage, deletePost } from \"API/indexAPI\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {\n  currentID: ''\n};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_POST_IMAGE:\n      {\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"posts\").add(stateCopy).then(function (docRef) {\n          console.log(docRef);\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS, stateCopy));\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        deletePost(action.payload.image).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_FAIL, err));\n        });\n        stateCopy.currentID = action.payload.post;\n        return stateCopy;\n      }\n\n    case ACTIONS.DELETE_POST_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        deletePostImage(action.payload.image).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_FAIL, err));\n        });\n        stateCopy.currentID = action.payload.post;\n        return stateCopy;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        let post_id = '';\n        db.collection(\"posts\").get().then(snapshotChanges => {\n          const data = snapshotChanges.docs.map(doc => {\n            console.log(data);\n          });\n        }); //////====>\n\n        db.collection(\"posts\").where(\"ID\", '==', action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            post_id = doc.id;\n            return doc.data();\n          });\n\n          let stateCopy = _.cloneDeep(data);\n\n          if (stateCopy[0]) stateCopy[0]._id = post_id;\n          console.log(stateCopy);\n          let _id = ''; //=======================================================\n\n          db.collection(\"postimages\").where(\"albumID\", '==', action.payload).get().then(snapshotChanges => {\n            const data = snapshotChanges.docs.map(doc => {\n              _id = doc.id;\n              return doc.data();\n            });\n            stateCopy.map((post, i) => {\n              data[0]._id = _id;\n              return stateCopy[i].image = data;\n            });\n\n            if (snapshotChanges.size > 0) {\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, stateCopy));\n            } else {\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL, {\n                error: \"could not find this record\"\n              }));\n            }\n          }); //========================================================\n        }); //////====>\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        db.collection(\"posts\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE:\n      {\n        //   let stateCopy = _.cloneDeep(action.payload)\n        //   let image = stateCopy.image\n        //   uploadPostImage(image).then((json)=>{\n        //    if(json.status!==404 || json.status!==500) {\n        //      action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n        //    } else {\n        //      action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_FAIL,json.response.message))\n        //    }\n        //  }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n        db.collection(\"postimages\").doc().set(action.payload).then(() => {\n          console.log(action.payload);\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE, newImage));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","updatePostImage","createPost","uploadPostImage","createPostImage","deletePostImage","deletePost","db","_","NavDropdown","initialState","currentID","singlePostReducer","state","action","type","CREATE_NEW_POST_IMAGE","payload","then","json","asyncDispatch","CREATE_NEW_POST_IMAGE_SUCCESS","catch","err","CREATE_NEW_POST_IMAGE_FAIL","stateCopy","cloneDeep","LOAD_POST","ID","CREATE_NEW_POST","collection","add","docRef","console","log","_id","id","CREATE_NEW_POST_SUCCESS","CREATE_NEW_POST_FAIL","DELETE_POST","image","DELETE_POST_SUCCESS","DELETE_POST_FAIL","post","LOAD_DASHBOARD_POSTS","DELETE_POST_IMAGE","DELETE_POST_IMAGE_SUCCESS","DELETE_POST_IMAGE_FAIL","LOAD_ARTICLE","post_id","get","snapshotChanges","data","docs","map","doc","where","querySnapshot","i","size","LOAD_POST_SUCCESS","LOAD_POST_FAIL","error","UPDATE_POST","update","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","UPLOAD_POST_IMAGE","set","UPLOAD_POST_IMAGE_SUCCESS","UPLOAD_POST_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updatePostImage,createPost,uploadPostImage,createPostImage,deletePostImage,deletePost} from \"API/indexAPI\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {\n  currentID:''\n};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_POST_IMAGE:{\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST: {\n        let stateCopy = _.cloneDeep(action.payload)\n      \n        db.collection(\"posts\")\n          .add(stateCopy)\n          .then(function(docRef){\n            console.log(docRef)\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,stateCopy))\n          });\n        return stateCopy\n      }\n      case ACTIONS.CREATE_NEW_POST_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_FAIL: {\n        return state\n      }\n      case ACTIONS.DELETE_POST:{\n        \n        let stateCopy = _.cloneDeep(state)\n        deletePost(action.payload.image)\n        .then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS,json))\n        })\n        .catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_FAIL,err))\n        })\n        stateCopy.currentID = action.payload.post\n        return stateCopy\n      }  \n      case ACTIONS.DELETE_POST_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS,[]))\n        return state\n      }  \n      case ACTIONS.DELETE_POST_FAIL:{\n        return action.payload\n      }  \n      case ACTIONS.DELETE_POST_IMAGE:{\n\n        let stateCopy = _.cloneDeep(state)\n        deletePostImage(action.payload.image)\n        .then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS,json))\n        })\n        .catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_FAIL,err))\n        })\n        stateCopy.currentID = action.payload.post\n        return stateCopy\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_SUCCESS:{\n\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n\n        return state\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n        let post_id = ''\n        db.collection(\"posts\").get().then(snapshotChanges => {\n                    \n          const data = snapshotChanges.docs.map(doc => {\n            console.log( data)\n          })\n        })\n\n        //////====>\n        db.collection(\"posts\")\n        .where(\"ID\",'==',action.payload)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => {\n            post_id=doc.id\n            return doc.data()}); \n\n            let stateCopy = _.cloneDeep(data)\n            if(stateCopy[0])\n            stateCopy[0]._id = post_id\n            console.log(stateCopy)\n            let _id = ''\n\n             //=======================================================\n\n                  db.collection(\"postimages\")\n                  .where(\"albumID\",'==',action.payload)\n                  .get()\n                  .then(snapshotChanges => {\n                    \n                      const data = snapshotChanges.docs.map(doc => {\n                        _id=doc.id\n                        return doc.data()});\n                      \n                      stateCopy.map((post,i)=>{\n                        data[0]._id =  _id\n                      return stateCopy[i].image = data\n                    })\n                    if (snapshotChanges.size > 0) {\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy))} else {\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,{error:\"could not find this record\"}))}\n                  });\n\n              //========================================================\n\n         });\n          //////====>\n        return state\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n        \n        return {state,...action.payload[0]}\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n\n        db.collection(\"posts\").doc(action.payload._id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,action.payload))\n        });\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          \n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          stateCopy.currentID = action.payload.submitted.albumID\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE:{\n      //   let stateCopy = _.cloneDeep(action.payload)\n      //   let image = stateCopy.image\n      //   uploadPostImage(image).then((json)=>{\n\n      //    if(json.status!==404 || json.status!==500) {\n      //      action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n      //    } else {\n      //      action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_FAIL,json.response.message))\n      //    }\n      //  }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n\n       db.collection(\"postimages\")\n       .doc()\n       .set(action.payload)\n       .then(() => {\n         console.log(action.payload)\n         action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS,action.payload))\n       });\n\n       \n     \n       return state\n     }\n      case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n         \n         let newImage = {\n           albumID:action.payload.submitted.albumID,\n           caption:action.payload.submitted.caption,\n           cover:action.payload.submitted.cover,\n           imageName:action.payload.json.data.filename\n         }\n         stateCopy.currentID = action.payload.submitted.albumID\n         action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE,newImage))\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE_FAIL:{\n        return state\n      }\n      \n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}