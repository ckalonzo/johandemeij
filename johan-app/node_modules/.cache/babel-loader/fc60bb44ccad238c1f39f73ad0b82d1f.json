{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { uploadImage } from \"API/indexAPI\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function postImageReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_POST_IMAGE:\n      {\n        let image = '';\n        Object.values(action.payload.images).map(postImage => {\n          if (postImage.albumID === action.payload.ID) {\n            image = postImage;\n            return postImage;\n          }\n\n          return null;\n        });\n        console.log(image);\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGE_SUCCESS, image));\n        return state;\n      }\n\n    case ACTIONS.LOAD_POST_IMAGE_SUCCESS:\n      {\n        console.log(action);\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        uploadImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, json));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let image = action.json ? action.json.data.filename : '';\n        stateCopy.imageName = image;\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/postImage.reducer.js"],"names":["ACTIONS","mainAction","uploadImage","_","initialState","postImageReducer","state","action","type","LOAD_POST_IMAGE","image","Object","values","payload","images","map","postImage","albumID","ID","console","log","asyncDispatch","LOAD_POST_IMAGE_SUCCESS","UPLOAD_IMAGE","then","json","UPLOAD_IMAGE_SUCCESS","catch","err","UPLOAD_IMAGE_FAIL","stateCopy","cloneDeep","data","filename","imageName"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAAQC,WAAR,QAA0B,cAA1B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,gBAAT,CAA2BC,KAAK,GAAGF,YAAnC,EAAiDG,MAAjD,EAAyD;AACpE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,OAAO,CAACS,eAAb;AAA6B;AAC3B,YAAIC,KAAK,GAAE,EAAX;AACAC,QAAAA,MAAM,CAACC,MAAP,CAAcL,MAAM,CAACM,OAAP,CAAeC,MAA7B,EAAqCC,GAArC,CAAyCC,SAAS,IAAI;AAEtD,cAAGA,SAAS,CAACC,OAAV,KAAsBV,MAAM,CAACM,OAAP,CAAeK,EAAxC,EAA2C;AACzCR,YAAAA,KAAK,GAAGM,SAAR;AACA,mBAAOA,SAAP;AACD;;AACC,iBAAO,IAAP;AAED,SARD;AASAG,QAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACAH,QAAAA,MAAM,CAACc,aAAP,CAAqBpB,UAAU,CAACD,OAAO,CAACsB,uBAAT,EAAiCZ,KAAjC,CAA/B;AACE,eAAOJ,KAAP;AACH;;AACD,SAAKN,OAAO,CAACsB,uBAAb;AAAqC;AACnCH,QAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AACA,eAAOD,KAAP;AACD;;AACD,SAAKN,OAAO,CAACuB,YAAb;AAA0B;AACxBrB,QAAAA,WAAW,CAACK,MAAM,CAACM,OAAR,CAAX,CAA4BW,IAA5B,CAAkCC,IAAD,IAAQ;AACvClB,UAAAA,MAAM,CAACc,aAAP,CAAqBpB,UAAU,CAACD,OAAO,CAAC0B,oBAAT,EAA8BD,IAA9B,CAA/B;AACD,SAFD,EAEGE,KAFH,CAESC,GAAG,IAAIrB,MAAM,CAACc,aAAP,CAAqBpB,UAAU,CAACD,OAAO,CAAC6B,iBAAT,EAA2BD,GAA3B,CAA/B,CAFhB;AAGA,eAAOtB,KAAP;AACD;;AACD,SAAKN,OAAO,CAAC0B,oBAAb;AAAkC;AAC9B,YAAII,SAAS,GAAG3B,CAAC,CAAC4B,SAAF,CAAYzB,KAAZ,CAAhB;;AACA,YAAII,KAAK,GAAGH,MAAM,CAACkB,IAAP,GAAclB,MAAM,CAACkB,IAAP,CAAYO,IAAZ,CAAiBC,QAA/B,GAAwC,EAApD;AACAH,QAAAA,SAAS,CAACI,SAAV,GAAsBxB,KAAtB;AACF,eAAOoB,SAAP;AACD;;AACD,SAAK9B,OAAO,CAAC6B,iBAAb;AAA+B;AAC7B,eAAOvB,KAAP;AACD;;AACD;AACE,aAAOA,KAAP;AApCJ;AAuCD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {uploadImage} from \"API/indexAPI\"\nimport _ from \"lodash\"\nconst initialState = {};\nexport default function postImageReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.LOAD_POST_IMAGE:{\n        let image ='' \n        Object.values(action.payload.images).map(postImage => {\n          \n        if(postImage.albumID === action.payload.ID){\n          image = postImage;\n          return postImage\n        }\n          return null\n          \n        })\n        console.log(image)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGE_SUCCESS,image))\n          return state\n      }\n      case ACTIONS.LOAD_POST_IMAGE_SUCCESS:{\n        console.log(action)\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        uploadImage(action.payload).then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,json))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          let image = action.json ? action.json.data.filename:''\n          stateCopy.imageName = image\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      default: \n        return state\n       \n    }\n  }"]},"metadata":{},"sourceType":"module"}