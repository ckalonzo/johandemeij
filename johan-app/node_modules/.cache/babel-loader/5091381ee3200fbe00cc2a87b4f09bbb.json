{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        fetch('http://127.0.0.1:5020/api/loadAgendasByPage/' + action.payload.skip + \"/\" + action.payload.limit).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, res.data));\n          stateCopy.agendaTotal = res.data.length;\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let d = new Date();\n        let day = d.getDay();\n        let month = d.getMonth() + 1;\n        let year = d.getFullYear();\n        fetch('http://127.0.0.1:5020/api/loadfilteredAgendas/' + action.payload.skip + \"/\" + action.payload.limit + \"/\" + year + \"/\" + month).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let d = new Date();\n        let day = d.getDate();\n        let stateCopy = [];\n        action.payload.map(agenda => {\n          // if(agenda.day > day)\n          return stateCopy.push(agenda);\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","cloneDeep","fetch","payload","skip","limit","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","agendaTotal","length","catch","err","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","d","Date","day","getDay","month","getMonth","year","getFullYear","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","getDate","map","agenda","push"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AACjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,OAAO,CAACQ,cAAb;AAA6B;AAC3B,YAAIC,SAAS,GAAGP,CAAC,CAACQ,SAAF,CAAYL,KAAZ,CAAhB;;AACDM,QAAAA,KAAK,CAAC,iDAA+CL,MAAM,CAACM,OAAP,CAAeC,IAA9D,GAAmE,GAAnE,GAAuEP,MAAM,CAACM,OAAP,CAAeE,KAAvF,CAAL,CACEC,IADF,CACQC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADjB,EAEEF,IAFF,CAEQG,GAAD,IAAS;AACbZ,UAAAA,MAAM,CAACa,aAAP,CAAqBlB,UAAU,CAACD,OAAO,CAACoB,sBAAT,EAAgCF,GAAG,CAACF,IAApC,CAA/B;AACAP,UAAAA,SAAS,CAACY,WAAV,GAAwBH,GAAG,CAACF,IAAJ,CAASM,MAAjC;AACD,SALF,EAKIC,KALJ,CAKUC,GAAG,IAAIlB,MAAM,CAACa,aAAP,CAAqBlB,UAAU,CAACD,OAAO,CAACyB,mBAAT,EAA6BD,GAA7B,CAA/B,CALjB;AAOC,eAAOf,SAAP;AACD;;AACD,SAAKT,OAAO,CAACoB,sBAAb;AAAqC;AAGnC,eAAOd,MAAM,CAACM,OAAd;AACD;;AACD,SAAKZ,OAAO,CAACyB,mBAAb;AAAkC;AAEhC,eAAOpB,KAAP;AACD;;AACD,SAAKL,OAAO,CAAC0B,YAAb;AAA2B;AACzB,YAAIC,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACA,YAAIC,GAAG,GAAGF,CAAC,CAACG,MAAF,EAAV;AACA,YAAIC,KAAK,GAAGJ,CAAC,CAACK,QAAF,KAAe,CAA3B;AACA,YAAIC,IAAI,GAAGN,CAAC,CAACO,WAAF,EAAX;AACAvB,QAAAA,KAAK,CAAE,mDAAiDL,MAAM,CAACM,OAAP,CAAeC,IAAhE,GAAqE,GAArE,GAAyEP,MAAM,CAACM,OAAP,CAAeE,KAAxF,GAA8F,GAA9F,GAAkGmB,IAAlG,GAAuG,GAAvG,GAA6GF,KAA/G,CAAL,CACChB,IADD,CACOC,IAAD,IAASA,IAAI,CAACC,IAAL,EADf,EAECF,IAFD,CAEOG,GAAD,IAAS;AACbZ,UAAAA,MAAM,CAACa,aAAP,CAAqBlB,UAAU,CAACD,OAAO,CAACmC,oBAAT,EAA8BjB,GAAG,CAACF,IAAlC,CAA/B;AACD,SAJD,EAIGO,KAJH,CAISC,GAAG,IAAIlB,MAAM,CAACa,aAAP,CAAqBlB,UAAU,CAACD,OAAO,CAACoC,iBAAT,EAA2BZ,GAA3B,CAA/B,CAJhB;AAKA,eAAOnB,KAAP;AACD;;AACD,SAAKL,OAAO,CAACmC,oBAAb;AAAkC;AAChC,YAAIR,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACA,YAAIC,GAAG,GAAGF,CAAC,CAACU,OAAF,EAAV;AACA,YAAI5B,SAAS,GAAG,EAAhB;AACAH,QAAAA,MAAM,CAACM,OAAP,CAAe0B,GAAf,CAAmBC,MAAM,IAAE;AAC1B;AACC,iBAAO9B,SAAS,CAAC+B,IAAV,CAAeD,MAAf,CAAP;AACD,SAHD;AAIA,eAAO9B,SAAP;AACD;;AACD,SAAKT,OAAO,CAACoC,iBAAb;AAA+B;AAC7B,eAAO/B,KAAP;AACD;;AACD;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AAhDJ;AAoDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport _ from \"lodash\"\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n        let stateCopy = _.cloneDeep(state)\n       fetch('http://127.0.0.1:5020/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n          stateCopy.agendaTotal = res.data.length\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n       \n      \n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let d = new Date();\n        let day = d.getDay();\n        let month = d.getMonth() + 1\n        let year = d.getFullYear();\n        fetch ('http://127.0.0.1:5020/api/loadfilteredAgendas/'+action.payload.skip+\"/\"+action.payload.limit+\"/\"+year+\"/\" + month )\n        .then((data)=> data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,res.data))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_FAIL,err)))\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let d = new Date();\n        let day = d.getDate();\n        let stateCopy = []\n        action.payload.map(agenda=>{\n         // if(agenda.day > day)\n          return stateCopy.push(agenda)\n        })\n        return stateCopy\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}