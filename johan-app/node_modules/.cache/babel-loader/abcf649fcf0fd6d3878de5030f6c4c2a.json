{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function cdInfoReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_INFO:\n      {\n        let stateCopy = []; //=======================================================\n\n        db.collection(\"cd_info\").where(\"cdId\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS, stateCopy));\n        }); //=======================================================\n\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_SUCCESS:\n      {\n        let stateCopy = action.payload;\n        stateCopy.map((cdinfo, i) => {\n          //=======================================================\n          db.collection(\"presentations\").where(\"id\", \"==\", cdinfo.track_title).get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy[i].title = data[0].cdName;\n            stateCopy[i].duration = data[0].duration;\n            stateCopy[i].codes = data[0].codes;\n          }); //========================================================\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cdInfo.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","cdInfoReducer","state","action","type","LOAD_CD_INFO","stateCopy","collection","where","payload","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_CD_INFO_SUCCESS","cdinfo","i","track_title","title","cdName","duration","codes","LOAD_CD_INFO_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AAGA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AAEjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKR,OAAO,CAACS,YAAb;AAA2B;AAEzB,YAAIC,SAAS,GAAE,EAAf,CAFyB,CAGzB;;AACAR,QAAAA,EAAE,CAACS,UAAH,CAAc,SAAd,EACCC,KADD,CACO,MADP,EACc,IADd,EACmBL,MAAM,CAACM,OAD1B,EAEAC,GAFA,GAGAC,IAHA,CAGKC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,UAAAA,SAAS,GAAGO,IAAZ;AAEDV,UAAAA,MAAM,CAACc,aAAP,CAAqBpB,UAAU,CAACD,OAAO,CAACsB,oBAAT,EAA8BZ,SAA9B,CAA/B;AACA,SARA,EAJyB,CAazB;;AAEA,eAAOA,SAAP;AACD;;AACD,SAAKV,OAAO,CAACsB,oBAAb;AAAmC;AACjC,YAAIZ,SAAS,GAAEH,MAAM,CAACM,OAAtB;AACAH,QAAAA,SAAS,CAACS,GAAV,CAAc,CAACI,MAAD,EAAQC,CAAR,KAAY;AACxB;AACAtB,UAAAA,EAAE,CAACS,UAAH,CAAc,eAAd,EACCC,KADD,CACO,IADP,EACY,IADZ,EACiBW,MAAM,CAACE,WADxB,EAECX,GAFD,GAGCC,IAHD,CAGMC,aAAa,IAAI;AACrB,kBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,YAAAA,SAAS,CAACc,CAAD,CAAT,CAAaE,KAAb,GAAoBT,IAAI,CAAC,CAAD,CAAJ,CAAQU,MAA5B;AACAjB,YAAAA,SAAS,CAACc,CAAD,CAAT,CAAaI,QAAb,GAAuBX,IAAI,CAAC,CAAD,CAAJ,CAAQW,QAA/B;AACAlB,YAAAA,SAAS,CAACc,CAAD,CAAT,CAAaK,KAAb,GAAoBZ,IAAI,CAAC,CAAD,CAAJ,CAAQY,KAA5B;AACD,WARD,EAFwB,CAWzB;AACD,SAZA;AAaA,eAAOnB,SAAP;AACD;;AACD,SAAKV,OAAO,CAAC8B,iBAAb;AAAgC;AAE9B,eAAOxB,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA1CJ;AA8CD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\"\nconst initialState = {\n\n}\nexport default function cdInfoReducer (state = initialState, action) {\n   \n    switch (action.type) {\n  \n      case ACTIONS.LOAD_CD_INFO: {\n\n        let stateCopy =[]\n        //=======================================================\n        db.collection(\"cd_info\")\n        .where(\"cdId\",\"==\",action.payload)\n       .get()\n       .then(querySnapshot => {\n         const data = querySnapshot.docs.map(doc => doc.data());\n         stateCopy = data;\n      \n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS,stateCopy))\n       });\n        //=======================================================\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_INFO_SUCCESS: {\n        let stateCopy =action.payload\n        stateCopy.map((cdinfo,i)=>{\n          //=======================================================\n          db.collection(\"presentations\")\n          .where(\"id\",\"==\",cdinfo.track_title)\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy[i].title =data[0].cdName\n            stateCopy[i].duration =data[0].duration\n            stateCopy[i].codes =data[0].codes\n          });\n         //========================================================\n       })\n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_INFO_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}