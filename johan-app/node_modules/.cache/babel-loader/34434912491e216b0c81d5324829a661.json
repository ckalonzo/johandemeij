{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        console.log(action);\n        const agendaRef = database.ref('agendas');\n        agendaRef.child(action.payload.id).set(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, action.payload));\n        }).catch(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_FAIL, {\n            error: \"could not creat agenda\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        const agendaRef = database.ref('agendas/' + action.payload);\n        agendaRef.remove();\n        action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        let d = new Date();\n        let month = (d.getMonth() + 1).toString();\n        var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2020');\n        agendaYearRef.on('value', (snap, i) => {\n          let agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            if (agenda.month >= month || agenda.month >= +month && agenda.id > 0) return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, agendas));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['month', 'day'], ['asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        const agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2021');\n        agendaYearRef.on('value', (snap, i) => {\n          let agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            if (agenda.month >= month && agenda.cd != '') return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        var agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload);\n        agendaRef.on('child_added', (snap, i) => {\n          const data = snap.val();\n          console.log({ ...data\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...data\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        const agendaRef = database.ref('agendas');\n        agendaRef.child(action.payload.id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        }).catch(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_FAIL, {\n            error: \"failed to update agenda\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","database","_","initialState","agendaReducer","state","action","type","CREATE_NEW_AGENDA","console","log","agendaRef","ref","child","payload","id","set","then","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","catch","CREATE_NEW_AGENDA_FAIL","error","DELETE_AGENDA","remove","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","d","Date","month","getMonth","toString","agendaYearRef","orderByChild","startAt","endAt","on","snap","i","agendas","data","val","Object","values","map","agenda","date","day","year","push","LOAD_CD_AGENDA_SUCCESS","orderBy","LOAD_CD_AGENDA_FAIL","getDay","getFullYear","cd","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDA","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","UPDATE_AGENDA","update","UPDATE_AGENDA_SUCCESS","UPDATE_AGENDA_FAIL","stateCopy","cloneDeep"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n      console.log(action)\n     \n     const agendaRef = database.ref('agendas')\n    agendaRef.child(action.payload.id).set(action.payload).then(()=>{\n      action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,action.payload))\n    })\n    .catch(()=>{\n      action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_FAIL,{error:\"could not creat agenda\"}))\n    });\n   \n    return state\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.DELETE_AGENDA:{\n      const agendaRef = database.ref('agendas/'+action.payload)\n      agendaRef.remove()\n      action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n  \n    return state\n    }  \n    case ACTIONS.DELETE_AGENDA_SUCCESS:{\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n    return state\n    }  \n    case ACTIONS.LOAD_CD_AGENDA: {\n      let d = new Date();\n    let month = (d.getMonth() + 1).toString()\n     var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2020')\n     agendaYearRef.on('value',(snap,i)=>{\n    \n    let agendas = []\n    const data = snap.val()\n    Object.values(data).map(agenda=>{\n      agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n      if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n      return agendas.push(agenda)\n    })\n     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,agendas))\n    })\n\n    return state\n    }\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n    return _.orderBy(action.payload,['month','day'],['asc','asc'])\n    }\n    case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS: {\n    let d = new Date();\n    let day = d.getDay();\n    let month = (d.getMonth() + 1).toString()\n    let year = d.getFullYear().toString();\n\n    const agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2021')\n    agendaYearRef.on('value',(snap,i)=>{\n   \n   let agendas = []\n   const data = snap.val()\n   Object.values(data).map(agenda=>{\n     agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n     agenda.month = +agenda.month\n     if(agenda.month >= month && agenda.cd !='')\n      return agendas.push(agenda)\n   })\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n   })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDAS_FAIL:{\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA:{\n    var agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload)\n     agendaRef.on('child_added',(snap,i)=>{\n    const data = snap.val()\n    console.log({...data})\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...data}))\n      \n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDA_FAIL:{\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA:{\n      const agendaRef = database.ref('agendas')\n      agendaRef.child(action.payload.id).update(action.payload)\n      .then(()=>{\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n      }).catch(()=>{\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_FAIL,{error:\"failed to update agenda\"}))\n      })\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n    let stateCopy = _.cloneDeep(action.payload)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n    return stateCopy\n    }\n    case ACTIONS.UPDATE_AGENDA_FAIL:{\n   \n    return state\n    }\n    default: \n      return {\n        ...state\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}