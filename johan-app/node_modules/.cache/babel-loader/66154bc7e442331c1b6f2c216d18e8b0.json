{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nexport default function cdInfoReducer(state = initialState, action) {\n  const initialState = {\n    main: [],\n    additional: []\n  };\n\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_INFO:\n      {\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"cd_info\").where(\"cdId\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //========================================================\n        }); //=======================================================\n\n        db.collection(\"presentations\").where(\"cd\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cdInfo.reducer.js"],"names":["ACTIONS","mainAction","db","cdInfoReducer","state","initialState","action","main","additional","type","LOAD_CD_INFO","stateCopy","collection","where","payload","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_CD_INFO_SUCCESS","LOAD_CD_INFO_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AAEA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGC,YAAhC,EAA8CC,MAA9C,EAAsD;AACnE,QAAMD,YAAY,GAAG;AACnBE,IAAAA,IAAI,EAAC,EADc;AAEnBC,IAAAA,UAAU,EAAC;AAFQ,GAArB;;AAIE,UAAQF,MAAM,CAACG,IAAf;AAEE,SAAKT,OAAO,CAACU,YAAb;AAA2B;AAEzB,YAAIC,SAAS,GAAG,EAAhB,CAFyB,CAGzB;;AACAT,QAAAA,EAAE,CAACU,UAAH,CAAc,SAAd,EACCC,KADD,CACO,MADP,EACc,IADd,EACmBP,MAAM,CAACQ,OAD1B,EAEAC,GAFA,GAGAC,IAHA,CAGKC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,UAAAA,SAAS,GAAGO,IAAZ,CAFqB,CAKrB;AACD,SATA,EAJyB,CAehC;;AACUhB,QAAAA,EAAE,CAACU,UAAH,CAAc,eAAd,EACCC,KADD,CACO,IADP,EACY,IADZ,EACiBP,MAAM,CAACQ,OADxB,EAECC,GAFD,GAGCC,IAHD,CAGMC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAZ,UAAAA,MAAM,CAACgB,aAAP,CAAqBrB,UAAU,CAACD,OAAO,CAACuB,oBAAT,EAA8BL,IAA9B,CAA/B;AACD,SAND;AAQH,eAAOd,KAAP;AACD;;AACD,SAAKJ,OAAO,CAACuB,oBAAb;AAAmC;AAEjC,eAAOjB,MAAM,CAACQ,OAAd;AACD;;AACD,SAAKd,OAAO,CAACwB,iBAAb;AAAgC;AAE9B,eAAOpB,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AAtCJ;AA0CD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\n\nexport default function cdInfoReducer (state = initialState, action) {\n  const initialState = {\n    main:[],\n    additional:[]\n  }\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_CD_INFO: {\n\n        let stateCopy = ''\n        //=======================================================\n        db.collection(\"cd_info\")\n        .where(\"cdId\",\"==\",action.payload)\n       .get()\n       .then(querySnapshot => {\n         const data = querySnapshot.docs.map(doc => doc.data());\n         stateCopy = data;\n       \n        \n         //========================================================\n       });\n\n //=======================================================\n           db.collection(\"presentations\")\n           .where(\"cd\",\"==\",action.payload)\n           .get()\n           .then(querySnapshot => {\n             const data = querySnapshot.docs.map(doc => doc.data());\n             action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS,data))\n           });\n\n        return state\n      }\n      case ACTIONS.LOAD_CD_INFO_SUCCESS: {\n        \n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_INFO_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}