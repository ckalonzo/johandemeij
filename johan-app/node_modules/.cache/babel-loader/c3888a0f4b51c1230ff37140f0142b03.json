{"ast":null,"code":"import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import{database,db}from\"../../firebase\";import _ from\"lodash\";var initialState={};export default function AllAgendasReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.LOAD_ALL_AGENDAS:{var agendaYearRef=database.ref('agendas').orderByChild('year').startAt(action.payload).endAt(action.payload);agendaYearRef.on('value',function(snap,i){var d=new Date();var month=(d.getMonth()+1).toString();var agendas=[];var data=snap.val();Object.values(data).map(function(agenda){agenda.date=\"\".concat(agenda.month,\"-\").concat(agenda.day,\"-\").concat(agenda.year);if(agenda.month>=month||agenda.month>=+month&&agenda.id>0)return agendas.push(agenda);});action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,agendas));});return state;}case ACTIONS.LOAD_ALL_AGENDAS_SUCCESS:{return _.orderBy(action.payload,['month','day'],['asc','asc']);}case ACTIONS.LOAD_ALL_AGENDAS_FAIL:{return state;}default:return state;}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/allAgendas.reducer.js"],"names":["ACTIONS","mainAction","database","db","_","initialState","AllAgendasReducer","state","action","type","LOAD_ALL_AGENDAS","agendaYearRef","ref","orderByChild","startAt","payload","endAt","on","snap","i","d","Date","month","getMonth","toString","agendas","data","val","Object","values","map","agenda","date","day","year","id","push","asyncDispatch","LOAD_ALL_AGENDAS_SUCCESS","orderBy","LOAD_ALL_AGENDAS_FAIL"],"mappings":"AAAA,OAASA,OAAT,KAAwB,wBAAxB,CACA,OAASC,UAAT,KAA2B,6BAA3B,CACA,OAASC,QAAT,CAAkBC,EAAlB,KAA4B,gBAA5B,CACA,MAAOC,CAAAA,CAAP,KAAc,QAAd,CACA,GAAMC,CAAAA,YAAY,CAAG,EAArB,CAEA,cAAe,SAASC,CAAAA,iBAAT,EAA0D,IAA9BC,CAAAA,KAA8B,2DAAtBF,YAAsB,IAARG,CAAAA,MAAQ,2CACvE,OAAQA,MAAM,CAACC,IAAf,EAEE,IAAKT,CAAAA,OAAO,CAACU,gBAAb,CAA+B,CAC7B,GAAMC,CAAAA,aAAa,CAAGT,QAAQ,CAACU,GAAT,CAAa,SAAb,EAAwBC,YAAxB,CAAqC,MAArC,EAA6CC,OAA7C,CAAqDN,MAAM,CAACO,OAA5D,EAAqEC,KAArE,CAA2ER,MAAM,CAACO,OAAlF,CAAtB,CACAJ,aAAa,CAACM,EAAd,CAAiB,OAAjB,CAAyB,SAACC,IAAD,CAAMC,CAAN,CAAU,CACnC,GAAIC,CAAAA,CAAC,CAAG,GAAIC,CAAAA,IAAJ,EAAR,CACA,GAAIC,CAAAA,KAAK,CAAG,CAACF,CAAC,CAACG,QAAF,GAAe,CAAhB,EAAmBC,QAAnB,EAAZ,CACA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACA,GAAMC,CAAAA,IAAI,CAAGR,IAAI,CAACS,GAAL,EAAb,CACAC,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoBI,GAApB,CAAwB,SAAAC,MAAM,CAAE,CAC9BA,MAAM,CAACC,IAAP,WAAiBD,MAAM,CAACT,KAAxB,aAAiCS,MAAM,CAACE,GAAxC,aAA+CF,MAAM,CAACG,IAAtD,EACA,GAAGH,MAAM,CAACT,KAAP,EAAgBA,KAAhB,EAAyBS,MAAM,CAACT,KAAP,EAAgB,CAACA,KAAjB,EAA2BS,MAAM,CAACI,EAAP,CAAY,CAAnE,CACA,MAAOV,CAAAA,OAAO,CAACW,IAAR,CAAaL,MAAb,CAAP,CACD,CAJD,EAKCvB,MAAM,CAAC6B,aAAP,CAAqBpC,UAAU,CAACD,OAAO,CAACsC,wBAAT,CAAkCb,OAAlC,CAA/B,EACA,CAXD,EAYE,MAAOlB,CAAAA,KAAP,CACD,CACH,IAAKP,CAAAA,OAAO,CAACsC,wBAAb,CAAuC,CACnC,MAAOlC,CAAAA,CAAC,CAACmC,OAAF,CAAU/B,MAAM,CAACO,OAAjB,CAAyB,CAAC,OAAD,CAAS,KAAT,CAAzB,CAAyC,CAAC,KAAD,CAAO,KAAP,CAAzC,CAAP,CACH,CACD,IAAKf,CAAAA,OAAO,CAACwC,qBAAb,CAAoC,CAChC,MAAOjC,CAAAA,KAAP,CACH,CACD,QACE,MAAOA,CAAAA,KAAP,CAzBJ,CA2BC","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database,db } from \"../../firebase\";\nimport _ from \"lodash\"\nconst initialState = {\n};\nexport default function AllAgendasReducer (state = initialState, action) {\n  switch (action.type) {\n      \n    case ACTIONS.LOAD_ALL_AGENDAS: {\n      const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload).endAt(action.payload)\n      agendaYearRef.on('value',(snap,i)=>{\n      let d = new Date();\n      let month = (d.getMonth() + 1).toString()\n      let agendas = []\n      const data = snap.val()\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n        return agendas.push(agenda)\n      })\n       action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,agendas))\n      })\n        return state\n      }\n    case ACTIONS.LOAD_ALL_AGENDAS_SUCCESS: { \n        return _.orderBy(action.payload,['month','day'],['asc','asc'])\n    }\n    case ACTIONS.LOAD_ALL_AGENDAS_FAIL: {\n        return state\n    }\n    default: \n      return state\n    }\n  }"]},"metadata":{},"sourceType":"module"}