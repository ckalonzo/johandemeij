{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        fetch('http://localhost:3001/api/loadAgendas').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.payload.map(agenda => {\n          stateCopy.id = agenda.id;\n          stateCopy.orchestra = agenda.orchestra;\n          stateCopy.cd = agenda.cd;\n          stateCopy.cd1 = agenda.cd1;\n          stateCopy.cd2 = agenda.cd2;\n          stateCopy.cd3 = agenda.cd3;\n          stateCopy.date = agenda.date;\n          stateCopy.time = agenda.time;\n          stateCopy.location = agenda.location;\n          stateCopy.city = agenda.city;\n          stateCopy.country = agenda.country;\n          stateCopy.synopsis = agenda.synopsis;\n          stateCopy.day = agenda.day;\n          stateCopy.month = agenda.month;\n          stateCopy.year = agenda.year;\n          stateCopy.title = agenda.title;\n          stateCopy.ON_OFF = agenda.ON_OFF;\n          stateCopy.conductor = agenda.conductor;\n        });\n        console.log(action.payload);\n        return _.sortBy(action.payload, 'id');\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","fetch","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","catch","err","LOAD_CD_AGENDA_FAIL","stateCopy","cloneDeep","payload","map","agenda","id","orchestra","cd","cd1","cd2","cd3","date","time","location","city","country","synopsis","day","month","year","title","ON_OFF","conductor","console","log","sortBy"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AACjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,OAAO,CAACQ,cAAb;AAA6B;AAC5BC,QAAAA,KAAK,CAAC,uCAAD,CAAL,CACEC,IADF,CACQC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADjB,EAEEF,IAFF,CAEQG,GAAD,IAAS;AACbP,UAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACe,sBAAT,EAAgCF,GAAG,CAACF,IAApC,CAA/B;AACD,SAJF,EAIIK,KAJJ,CAIUC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACkB,mBAAT,EAA6BD,GAA7B,CAA/B,CAJjB;AAMC,eAAOZ,KAAP;AACD;;AACD,SAAKL,OAAO,CAACe,sBAAb;AAAqC;AACrC,YAAII,SAAS,GAAGjB,CAAC,CAACkB,SAAF,CAAYf,KAAZ,CAAhB;;AACAC,QAAAA,MAAM,CAACe,OAAP,CAAeC,GAAf,CAAmBC,MAAM,IAAI;AAC3BJ,UAAAA,SAAS,CAACK,EAAV,GAAeD,MAAM,CAACC,EAAtB;AACAL,UAAAA,SAAS,CAACM,SAAV,GAAqBF,MAAM,CAACE,SAA5B;AACAN,UAAAA,SAAS,CAACO,EAAV,GAAeH,MAAM,CAACG,EAAtB;AACAP,UAAAA,SAAS,CAACQ,GAAV,GAAgBJ,MAAM,CAACI,GAAvB;AACAR,UAAAA,SAAS,CAACS,GAAV,GAAeL,MAAM,CAACK,GAAtB;AACAT,UAAAA,SAAS,CAACU,GAAV,GAAgBN,MAAM,CAACM,GAAvB;AACAV,UAAAA,SAAS,CAACW,IAAV,GAAgBP,MAAM,CAACO,IAAvB;AACAX,UAAAA,SAAS,CAACY,IAAV,GAAiBR,MAAM,CAACQ,IAAxB;AACAZ,UAAAA,SAAS,CAACa,QAAV,GAAqBT,MAAM,CAACS,QAA5B;AACAb,UAAAA,SAAS,CAACc,IAAV,GAAiBV,MAAM,CAACU,IAAxB;AACAd,UAAAA,SAAS,CAACe,OAAV,GAAoBX,MAAM,CAACW,OAA3B;AACAf,UAAAA,SAAS,CAACgB,QAAV,GAAqBZ,MAAM,CAACY,QAA5B;AACAhB,UAAAA,SAAS,CAACiB,GAAV,GAAgBb,MAAM,CAACa,GAAvB;AACAjB,UAAAA,SAAS,CAACkB,KAAV,GAAkBd,MAAM,CAACc,KAAzB;AACAlB,UAAAA,SAAS,CAACmB,IAAV,GAAiBf,MAAM,CAACe,IAAxB;AACAnB,UAAAA,SAAS,CAACoB,KAAV,GAAkBhB,MAAM,CAACgB,KAAzB;AACApB,UAAAA,SAAS,CAACqB,MAAV,GAAmBjB,MAAM,CAACiB,MAA1B;AACArB,UAAAA,SAAS,CAACsB,SAAV,GAAsBlB,MAAM,CAACkB,SAA7B;AACD,SAnBD;AAoBAC,QAAAA,OAAO,CAACC,GAAR,CAAYrC,MAAM,CAACe,OAAnB;AACE,eAAOnB,CAAC,CAAC0C,MAAF,CAAStC,MAAM,CAACe,OAAhB,EAAwB,IAAxB,CAAP;AACD;;AACD,SAAKrB,OAAO,CAACkB,mBAAb;AAAkC;AAEhC,eAAOb,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA1CJ;AA8CD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport _ from \"lodash\"\nconst initialState = {};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_CD_AGENDA: {\n       fetch('http://localhost:3001/api/loadAgendas')\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n\n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n      let stateCopy = _.cloneDeep(state)\n      action.payload.map(agenda => {\n        stateCopy.id = agenda.id\n        stateCopy.orchestra= agenda.orchestra\n        stateCopy.cd = agenda.cd\n        stateCopy.cd1 = agenda.cd1\n        stateCopy.cd2= agenda.cd2\n        stateCopy.cd3 = agenda.cd3\n        stateCopy.date= agenda.date\n        stateCopy.time = agenda.time\n        stateCopy.location = agenda.location\n        stateCopy.city = agenda.city\n        stateCopy.country = agenda.country\n        stateCopy.synopsis = agenda.synopsis\n        stateCopy.day = agenda.day\n        stateCopy.month = agenda.month\n        stateCopy.year = agenda.year\n        stateCopy.title = agenda.title\n        stateCopy.ON_OFF = agenda.ON_OFF\n        stateCopy.conductor = agenda.conductor\n      })\n      console.log(action.payload)\n        return _.sortBy(action.payload,'id')\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}