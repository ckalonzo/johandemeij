{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database, db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        console.log(action);\n        const agendaRef = database.ref('agendas/' + action.payload.id);\n        agendaRef.set(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, action.payload));\n        }).catch(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_FAIL, {\n            error: \"could not creat agenda\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        console.log(action); //   const agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload)\n        //  console.log(agendaRef)\n        //   // agendaRef.remove()\n        //   action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n\n        let d = new Date();\n        let month = (d.getMonth() + 1).toString();\n        var agendaYearRef = database.ref('agendas').orderByChild('id').equalTo(action.payload);\n        agendaYearRef.on('value', (snap, i) => {\n          console.log(snap);\n          let agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            console.log(agenda);\n            agenda.remove(); // if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n\n            return agendas.push(agenda);\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        let d = new Date();\n        let year = d.getFullYear(); // let month = (d.getMonth() + 1).toString()\n        //  var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2020')\n        //  agendaYearRef.once('value',(snap,i)=>{\n        // let agendas = []\n        // const data = snap.val()\n        // Object.values(data).map(agenda=>{\n        //   agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        //  // if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n        //   return agendas.push(agenda)\n        // })\n        //  action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,agendas))\n        // })\n\n        let _id = '';\n        db.collection(\"agendas\").where(\"year\", \"==\", year).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['month', 'day'], ['asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let d = new Date();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload.year).endAt(action.payload.year);\n        agendaYearRef.on('value', (snap, i) => {\n          let agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            if (agenda) agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            if (agenda.month >= month && agenda.cd != '') return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        let d = new Date();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload.year).endAt(action.payload.year);\n        agendaYearRef.on('value', (snap, i) => {\n          let agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        let stateCopy = [];\n        var agendaRef = database.ref('agendas/' + action.payload);\n        agendaRef.on('value', (snap, i) => {\n          const data = snap.val();\n          if (data) action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...data\n          }));\n        });\n        var agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload);\n        agendaRef.on('child_added', (snap, i) => {\n          const data = snap.val();\n          stateCopy = data;\n          if (stateCopy) action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...stateCopy\n          }));\n        });\n        return { ...stateCopy\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        const agendaRef = database.ref('agendas');\n        agendaRef.child(action.payload.id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        }).catch(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_FAIL, {\n            error: \"failed to update agenda\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","database","db","_","initialState","agendaReducer","state","action","type","CREATE_NEW_AGENDA","console","log","agendaRef","ref","payload","id","set","then","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","catch","CREATE_NEW_AGENDA_FAIL","error","DELETE_AGENDA","d","Date","month","getMonth","toString","agendaYearRef","orderByChild","equalTo","on","snap","i","agendas","data","val","Object","values","map","agenda","remove","push","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","year","getFullYear","_id","collection","where","orderBy","get","snapshot","docs","doc","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","startAt","endAt","date","day","cd","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDAS_FILTERED","LOAD_AGENDA","stateCopy","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","UPDATE_AGENDA","child","update","UPDATE_AGENDA_SUCCESS","UPDATE_AGENDA_FAIL","cloneDeep"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database,db} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n      console.log(action)\n     \n     const agendaRef = database.ref('agendas/'+action.payload.id)\n    agendaRef.set(action.payload).then(()=>{\n      action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,action.payload))\n    })\n    .catch(()=>{\n      action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_FAIL,{error:\"could not creat agenda\"}))\n    });\n   \n    return state\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.DELETE_AGENDA:{\n      console.log(action)\n    //   const agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload)\n    //  console.log(agendaRef)\n    //   // agendaRef.remove()\n    //   action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n\n\n      let d = new Date();\n      let month = (d.getMonth() + 1).toString()\n       var agendaYearRef = database.ref('agendas').orderByChild('id').equalTo(action.payload)\n       agendaYearRef.on('value',(snap,i)=>{\n      console.log(snap)\n      let agendas = []\n      const data = snap.val()\n      Object.values(data).map(agenda=>{\n        \n       console.log(agenda)\n        agenda.remove()\n       // if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n        return agendas.push(agenda)\n      })\n      \n\n      })\n    return state\n    }  \n    case ACTIONS.DELETE_AGENDA_SUCCESS:{\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n    return state\n    }  \n    case ACTIONS.LOAD_CD_AGENDA: {\n    let d = new Date();\n    let year = d.getFullYear()\n    // let month = (d.getMonth() + 1).toString()\n    //  var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2020')\n    //  agendaYearRef.once('value',(snap,i)=>{\n    \n    // let agendas = []\n    // const data = snap.val()\n\n    // Object.values(data).map(agenda=>{\n    //   agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n    //  // if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n    //   return agendas.push(agenda)\n    // })\n    \n    //  action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,agendas))\n    // })\n    let _id=''\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",year)\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n    })\n      \n\n    return state\n    }\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n    return _.orderBy(action.payload,['month','day'],['asc','asc'])\n    }\n    case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS: {\n    let d = new Date();\n    let month = (d.getMonth() + 1).toString()\n    let year = d.getFullYear().toString();\n\n    const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload.year).endAt(action.payload.year)\n    agendaYearRef.on('value',(snap,i)=>{\n\n    let agendas = []\n    const data = snap.val()\n      Object.values(data).map(agenda=>{\n        if(agenda)\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n        if(agenda.month >= month && agenda.cd !='')\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDAS_FAIL:{\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n      let d = new Date();\n    let month = (d.getMonth() + 1).toString()\n    let year = d.getFullYear().toString();\n\n    const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload.year).endAt(action.payload.year)\n    agendaYearRef.on('value',(snap,i)=>{\n\n    let agendas = []\n    const data = snap.val()\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n      return action.payload\n    }\n    case ACTIONS.LOAD_AGENDA:{\n    let stateCopy = []\n    var agendaRef = database.ref('agendas/'+action.payload)\n     agendaRef.on('value',(snap,i)=>{\n    const data = snap.val()\n    if(data) \n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...data}))\n      \n    })\n    var agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload)\n     agendaRef.on('child_added',(snap,i)=>{\n    const data = snap.val()\n    stateCopy = data\n    if(stateCopy)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...stateCopy}))\n      \n    })\n    return {...stateCopy}\n    }\n    case ACTIONS.LOAD_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDA_FAIL:{\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA:{\n      const agendaRef = database.ref('agendas')\n      agendaRef.child(action.payload.id).update(action.payload)\n      .then(()=>{\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n      }).catch(()=>{\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_FAIL,{error:\"failed to update agenda\"}))\n      })\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n    let stateCopy = _.cloneDeep(action.payload)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n    return stateCopy\n    }\n    case ACTIONS.UPDATE_AGENDA_FAIL:{\n   \n    return state\n    }\n    default: \n      return {\n        ...state\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}