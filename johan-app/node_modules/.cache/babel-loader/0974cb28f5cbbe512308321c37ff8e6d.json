{"ast":null,"code":"import _objectSpread from\"/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import{db}from\"../../firebase\";import _ from'lodash';var initialState={};export default function agendaReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.LOAD_CD_AGENDA:{var stateCopy=_.cloneDeep(state);fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit).then(function(data){return data.json();}).then(function(res){action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data));stateCopy.agendaTotal=res.data.length;}).catch(function(err){return action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err));});return stateCopy;}case ACTIONS.LOAD_CD_AGENDA_SUCCESS:{return action.payload;}case ACTIONS.LOAD_CD_AGENDA_FAIL:{return state;}case ACTIONS.LOAD_AGENDAS:{var d=new Date();var day=d.getDay();var month=d.getMonth()+1;var year=d.getFullYear();db.collection(\"agendas\").where(\"year\",'==',\"2020\").where(\"month\",'>=',\"5\").get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,data));});return state;}case ACTIONS.LOAD_AGENDAS_SUCCESS:{var _d=new Date();var _day=_d.getDate();var _stateCopy=[];action.payload.map(function(agenda){// if(agenda.day > day)\nreturn _stateCopy.push(agenda);});return _stateCopy;}case ACTIONS.LOAD_AGENDAS_FAIL:{return state;}default:return _objectSpread({},state);}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","cloneDeep","fetch","payload","skip","limit","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","agendaTotal","length","catch","err","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","d","Date","day","getDay","month","getMonth","year","getFullYear","collection","where","get","querySnapshot","docs","map","doc","LOAD_AGENDAS_SUCCESS","getDate","agenda","push","LOAD_AGENDAS_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n        let stateCopy = _.cloneDeep(state)\n       fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n          stateCopy.agendaTotal = res.data.length\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let d = new Date();\n        let day = d.getDay();\n        let month = d.getMonth() + 1\n        let year = d.getFullYear();\n        db.collection(\"agendas\")\n       .where(\"year\",'==',\"2020\")\n       .where(\"month\",'>=',\"5\")\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => doc.data());\n           action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,data))\n         });\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let d = new Date();\n        let day = d.getDate();\n        let stateCopy = []\n        action.payload.map(agenda=>{\n         // if(agenda.day > day)\n          return stateCopy.push(agenda)\n        })\n        return stateCopy\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}