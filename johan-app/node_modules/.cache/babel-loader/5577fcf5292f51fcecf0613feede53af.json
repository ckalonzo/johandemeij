{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, storage } from \"../../firebase\";\nconst initialState = {};\nexport default function presentationMusicReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_PUBLICATION_MUSIC:\n      {\n        let stateCopy = action.payload;\n        let file = {\n          id: action.payload.id,\n          musicName: action.payload.musicFile,\n          pres_id: action.payload.ID\n        };\n        console.log(file); // db.collection(\"presentationmusic\")\n        //     .doc()\n        //     .set(file)\n        //     .then(() => {\n        //       action.asyncDispatch(mainAction(ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS,action.payload))\n        //     })\n      }\n\n    case ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS:\n      {\n        let postImageRef = storage.ref('music/' + action.payload.file.name).put(action.payload.file);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('/music').child(action.payload.image.name).getDownloadURL().then(url => {\n            console.log(url);\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC, action.payload.pres_id));\n          });\n        });\n      }\n\n    case ACTIONS.CREATE_PUBLICATION_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_PUBLICATION_MUSIC:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_PUBLICATION_MUSIC_SUCCESS:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_PUBLICATION_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PUBLICATION_MUSIC:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PUBLICATION_MUSIC_SUCCESS:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Users/carlkalonzo/Documents/DEV/johandemeij/johan-app/src/redux/reducers/presentationMusic.reducer.js"],"names":["ACTIONS","mainAction","db","storage","initialState","presentationMusicReducer","state","action","type","CREATE_PUBLICATION_MUSIC","stateCopy","payload","file","id","musicName","musicFile","pres_id","ID","console","log","CREATE_PUBLICATION_MUSIC_SUCCESS","postImageRef","ref","name","put","on","snapshot","error","child","image","getDownloadURL","then","url","asyncDispatch","LOAD_PUBLICATION_MUSIC","CREATE_PUBLICATION_MUSIC_FAIL","DELETE_PUBLICATION_MUSIC","DELETE_PUBLICATION_MUSIC_SUCCESS","DELETE_PUBLICATION_MUSIC_FAIL","LOAD_PUBLICATION_MUSIC_SUCCESS"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,EAAYC,OAAZ,QAA0B,gBAA1B;AACA,MAAMC,YAAY,GAAG,EAArB;AAGA,eAAe,SAASC,wBAAT,CAAmCC,KAAK,GAAGF,YAA3C,EAAyDG,MAAzD,EAAiE;AAC5E,UAAQA,MAAM,CAACC,IAAf;AAEC,SAAKR,OAAO,CAACS,wBAAb;AAAwC;AACvC,YAAIC,SAAS,GAAGH,MAAM,CAACI,OAAvB;AACA,YAAIC,IAAI,GAAG;AACTC,UAAAA,EAAE,EAAEN,MAAM,CAACI,OAAP,CAAeE,EADV;AAETC,UAAAA,SAAS,EAAEP,MAAM,CAACI,OAAP,CAAeI,SAFjB;AAGTC,UAAAA,OAAO,EAAET,MAAM,CAACI,OAAP,CAAeM;AAHf,SAAX;AAKAC,QAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ,EAPuC,CAQvC;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,SAAKZ,OAAO,CAACoB,gCAAb;AAAgD;AAC/C,YAAIC,YAAY,GAAGlB,OAAO,CAACmB,GAAR,CAAY,WAASf,MAAM,CAACI,OAAP,CAAeC,IAAf,CAAoBW,IAAzC,EAA+CC,GAA/C,CAAmDjB,MAAM,CAACI,OAAP,CAAeC,IAAlE,CAAnB;AACAS,QAAAA,YAAY,CAACI,EAAb,CAAgB,eAAhB,EAAiCC,QAAD,IAAY,CAC1C;AACD,SAFD,EAEGC,KAAD,IAAS;AACT;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD,SALD,EAKE,MAAI;AACJ;AACAxB,UAAAA,OAAO,CAACmB,GAAR,CAAY,QAAZ,EAAsBM,KAAtB,CAA4BrB,MAAM,CAACI,OAAP,CAAekB,KAAf,CAAqBN,IAAjD,EAAuDO,cAAvD,GAAwEC,IAAxE,CAA6EC,GAAG,IAAE;AAChFd,YAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACAzB,YAAAA,MAAM,CAAC0B,aAAP,CAAqBhC,UAAU,CAACD,OAAO,CAACkC,sBAAT,EAAgC3B,MAAM,CAACI,OAAP,CAAeK,OAA/C,CAA/B;AACD,WAHD;AAID,SAXD;AAaA;;AACD,SAAKhB,OAAO,CAACmC,6BAAb;AAA6C;AAC5C,eAAO7B,KAAP;AACA;;AACD,SAAKN,OAAO,CAACoC,wBAAb;AAAwC;AACvC,eAAO9B,KAAP;AACA;;AACD,SAAKN,OAAO,CAACqC,gCAAb;AAAgD;AAC/C,eAAO/B,KAAP;AACA;;AACD,SAAKN,OAAO,CAACsC,6BAAb;AAA6C;AAC5C,eAAOhC,KAAP;AACA;;AACD,SAAKN,OAAO,CAACkC,sBAAb;AAAsC;AACrC,eAAO5B,KAAP;AACA;;AACD,SAAKN,OAAO,CAACuC,8BAAb;AAA8C;AAC7C,eAAOjC,KAAP;AACA;;AACA;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AApDJ;AAwDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db,storage} from \"../../firebase\";\nconst initialState = {\n   \n};\nexport default function presentationMusicReducer (state = initialState, action) {\n    switch (action.type) {\n  \n     case ACTIONS.CREATE_PUBLICATION_MUSIC : {\n      let stateCopy = action.payload\n      let file = {\n        id: action.payload.id,\n        musicName: action.payload.musicFile,\n        pres_id: action.payload.ID \n      }\n      console.log(file)\n      // db.collection(\"presentationmusic\")\n      //     .doc()\n      //     .set(file)\n      //     .then(() => {\n      //       action.asyncDispatch(mainAction(ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS,action.payload))\n      //     })\n     }\n     case ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS : {\n      let postImageRef = storage.ref('music/'+action.payload.file.name).put(action.payload.file);\n      postImageRef.on('state_changed',(snapshot)=>{\n        //progress function\n      },(error)=>{\n        //error\n        console.log(error)\n      },()=>{\n        //complete\n        storage.ref('/music').child(action.payload.image.name).getDownloadURL().then(url=>{\n          console.log(url)\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC,action.payload.pres_id))\n        })\n      })\n\n     }\n     case ACTIONS.CREATE_PUBLICATION_MUSIC_FAIL : {\n      return state\n     }\n     case ACTIONS.DELETE_PUBLICATION_MUSIC : {\n      return state\n     }\n     case ACTIONS.DELETE_PUBLICATION_MUSIC_SUCCESS : {\n      return state\n     }\n     case ACTIONS.DELETE_PUBLICATION_MUSIC_FAIL : {\n      return state\n     }\n     case ACTIONS.LOAD_PUBLICATION_MUSIC : {\n      return state\n     }\n     case ACTIONS.LOAD_PUBLICATION_MUSIC_SUCCESS : {\n      return state\n     }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}