{"ast":null,"code":"import _objectSpread from\"/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import{db}from\"../../firebase\";import _ from\"lodash\";import{createCd,updateCd,updateCdImage,uploadCDImage}from\"API/indexAPI\";var initialState={};export default function cdReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.CREATE_NEW_CD:{createCd(action.payload).then(function(json){action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_SUCCESS,json));}).catch(function(err){console.log(action,err);action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_FAIL,err));});return action.payload;}case ACTIONS.CREATE_NEW_CD_SUCCESS:{return action.payload;}case ACTIONS.CREATE_NEW_CD_FAIL:{return state;}case ACTIONS.LOAD_CD:{var stateCopy=_.cloneDeep(state);stateCopy.currentID=action.payload;db.collection(\"cds\").where(\"id\",\"==\",action.payload).get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});console.log(data);action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_SUCCESS,data));});return state;}case ACTIONS.LOAD_CD_SUCCESS:{return action.payload.length>0?action.payload[0]:[];}case ACTIONS.LOAD_CD_FAIL:{return state;}case ACTIONS.UPDATE_CD:{updateCd(action.payload).then(function(json){console.log(json);action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_SUCCESS,json.data.data));}).catch(function(err){action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_FAIL,err));});return state;}case ACTIONS.UPDATE_CD_SUCCESS:{var _stateCopy=_.cloneDeep(state);action.asyncDispatch(mainAction(ACTIONS.LOAD_CD,_stateCopy.ID));return _objectSpread({state:state},action.payload);}case ACTIONS.UPDATE_CD_FAIL:{return state;}case ACTIONS.UPDATE_CD_IMAGE:{// let stateCopy = _.cloneDeep(action.payload)\n//  let image = stateCopy.image\n//  updateCdImage(image).then((json)=>{\n//   if(json.status!==404 || json.status!==500) {\n//     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n//   } else {\n//     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,json.response.message))\n//   }\n// }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,err)))\nreturn state;}case ACTIONS.UPDATE_CD_IMAGE_SUCCESS:{var _stateCopy2=_.cloneDeep(state);var newImage={_id:action.payload.submitted._id,albumID:action.payload.submitted.albumID,caption:action.payload.submitted.caption,cover:action.payload.submitted.cover,imageName:action.payload.json.data.filename,updatedAt:Date.now()};_stateCopy2.currentID=action.payload.submitted.albumID;action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE,newImage));return _stateCopy2;}case ACTIONS.UPDATE_CD_IMAGE_FAIL:{return state;}case ACTIONS.UPLOAD_CD_IMAGE:{// let stateCopy = _.cloneDeep(action.payload)\n//  let image = stateCopy.image\n//  console.log(action)\n//  uploadCDImage(image).then((json)=>{\n//   if(json.status!==404 || json.status!==500) {\n//     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n//   } else {\n//     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL,json.response.message))\n//   }\n// }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL,err)))\nreturn state;}case ACTIONS.UPLOAD_CD_IMAGE_SUCCESS:{console.log(action);var _stateCopy3=_.cloneDeep(state);var image='';if(action.payload.submitted.cover===\"frontCover\"){image={_id:action.payload.submitted._id,frontCover:action.payload.json.data.filename,frontCaption:action.payload.submitted.caption};}else{image={_id:action.payload.submitted._id,backCover:action.payload.json.data.filename,backCaption:action.payload.submitted.caption};}action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD,image));return _stateCopy3;}case ACTIONS.UPLOAD_CD_IMAGE_FAIL:{return state;}case ACTIONS.UPDATE_CD_IMAGE:{console.log(action);var _image='';if(action.submitted.cover===\"frontCover\"){_image={frontCover:action.json.data.filename,frontCaption:action.submitted.caption};}else{_image={backCover:action.json.data.filename,backCaption:action.submitted.caption};}action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD,_image));return state;}default:return _objectSpread({},state);}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cd.reducer.js"],"names":["ACTIONS","mainAction","db","_","createCd","updateCd","updateCdImage","uploadCDImage","initialState","cdReducer","state","action","type","CREATE_NEW_CD","payload","then","json","asyncDispatch","CREATE_NEW_CD_SUCCESS","catch","err","console","log","CREATE_NEW_CD_FAIL","LOAD_CD","stateCopy","cloneDeep","currentID","collection","where","get","querySnapshot","data","docs","map","doc","LOAD_CD_SUCCESS","length","LOAD_CD_FAIL","UPDATE_CD","UPDATE_CD_SUCCESS","UPDATE_CD_FAIL","ID","UPDATE_CD_IMAGE","UPDATE_CD_IMAGE_SUCCESS","newImage","_id","submitted","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_CD_IMAGE_FAIL","UPLOAD_CD_IMAGE","UPLOAD_CD_IMAGE_SUCCESS","image","frontCover","frontCaption","backCover","backCaption","UPLOAD_CD_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport  _ from \"lodash\"\nimport {createCd,updateCd,updateCdImage,uploadCDImage} from \"API/indexAPI\"\nconst initialState = {};\nexport default function cdReducer (state = initialState, action) {\n    switch (action.type) {\n  \n        case ACTIONS.CREATE_NEW_CD: {\n        createCd(action.payload).then(json =>{\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_SUCCESS,json))\n        }).catch(err => {\n            console.log(action,err)\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_FAIL,err))\n        })\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_CD_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_CD_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_CD: {\n        let stateCopy = _.cloneDeep(state)\n        stateCopy.currentID = action.payload\n\n            db.collection(\"cds\")\n            .where(\"id\",\"==\",action.payload)\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n              console.log(data)\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_SUCCESS,data))\n            });\n            return state\n        }\n        case  ACTIONS.LOAD_CD_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_CD_FAIL:{\n            return state\n        }\n        case ACTIONS.UPDATE_CD:{\n        updateCd(action.payload).then(json=>{\n            console.log(json)\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_SUCCESS,json.data.data))\n        }).catch(err=>{\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_FAIL,err))\n        })\n        return state\n        }\n        case ACTIONS.UPDATE_CD_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD,stateCopy.ID))\n        return {state,...action.payload}\n        }\n        case ACTIONS.UPDATE_CD_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE:{\n            // let stateCopy = _.cloneDeep(action.payload)\n            //  let image = stateCopy.image\n            //  updateCdImage(image).then((json)=>{\n    \n            //   if(json.status!==404 || json.status!==500) {\n            //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n            //   } else {\n            //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,json.response.message))\n            //   }\n            // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,err)))\n          \n            return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_CD_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE:{\n          // let stateCopy = _.cloneDeep(action.payload)\n          //  let image = stateCopy.image\n          //  console.log(action)\n          //  uploadCDImage(image).then((json)=>{\n  \n          //   if(json.status!==404 || json.status!==500) {\n          //     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          //   } else {\n          //     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL,json.response.message))\n          //   }\n          // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL,err)))\n        \n          return state\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE_SUCCESS:{\n          console.log(action)\n            let stateCopy = _.cloneDeep(state)\n            \n            let image = ''\n          if(action.payload.submitted.cover === \"frontCover\") {\n            image = {\n              _id:action.payload.submitted._id,\n              frontCover:action.payload.json.data.filename,\n              frontCaption:action.payload.submitted.caption \n            }\n          } else {\n            image = {\n              _id:action.payload.submitted._id,\n              backCover:action.payload.json.data.filename,\n              backCaption:action.payload.submitted.caption \n            }\n          }\n            action.asyncDispatch(mainAction( ACTIONS.UPDATE_CD,image))\n          return stateCopy\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE_FAIL:{\n          return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE:{\n          console.log(action)\n          let image = ''\n          if(action.submitted.cover === \"frontCover\") {\n            image = {\n              frontCover:action.json.data.filename,\n              frontCaption:action.submitted.caption \n            }\n          } else {\n            image = {\n              backCover:action.json.data.filename,\n              backCaption:action.submitted.caption \n            }\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_CD,image))\n          return state\n        }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}