{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nimport { createCd, updateCd, updateCdImage, uploadCDImage } from \"API/indexAPI\";\nconst initialState = {};\nexport default function cdReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_CD:\n      {\n        createCd(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_SUCCESS, json));\n        }).catch(err => {\n          console.log(action, err);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_FAIL, err));\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_CD_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_CD_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.currentID = action.payload;\n        db.collection(\"cds\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          console.log(data);\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_CD_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD:\n      {\n        updateCd(action.payload).then(json => {\n          console.log(json);\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_CD_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE:\n      {\n        // let stateCopy = _.cloneDeep(action.payload)\n        //  let image = stateCopy.image\n        //  updateCdImage(image).then((json)=>{\n        //   if(json.status!==404 || json.status!==500) {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n        //   } else {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,json.response.message))\n        //   }\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,err)))\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_CD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        console.log(action);\n        uploadCDImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_CD_IMAGE_SUCCESS:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(state);\n\n        let image = '';\n\n        if (action.payload.submitted.cover === \"frontCover\") {\n          image = {\n            _id: action.payload.submitted._id,\n            frontCover: action.payload.json.data.filename,\n            frontCaption: action.payload.submitted.caption\n          };\n        } else {\n          image = {\n            _id: action.payload.submitted._id,\n            backCover: action.payload.json.data.filename,\n            backCaption: action.payload.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD, image));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_CD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE:\n      {\n        console.log(action);\n        let image = '';\n\n        if (action.submitted.cover === \"frontCover\") {\n          image = {\n            frontCover: action.json.data.filename,\n            frontCaption: action.submitted.caption\n          };\n        } else {\n          image = {\n            backCover: action.json.data.filename,\n            backCaption: action.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD, image));\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cd.reducer.js"],"names":["ACTIONS","mainAction","db","_","createCd","updateCd","updateCdImage","uploadCDImage","initialState","cdReducer","state","action","type","CREATE_NEW_CD","payload","then","json","asyncDispatch","CREATE_NEW_CD_SUCCESS","catch","err","console","log","CREATE_NEW_CD_FAIL","LOAD_CD","stateCopy","cloneDeep","currentID","collection","where","get","querySnapshot","data","docs","map","doc","LOAD_CD_SUCCESS","length","LOAD_CD_FAIL","UPDATE_CD","UPDATE_CD_SUCCESS","UPDATE_CD_FAIL","ID","UPDATE_CD_IMAGE","UPDATE_CD_IMAGE_SUCCESS","newImage","_id","submitted","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_CD_IMAGE_FAIL","UPLOAD_CD_IMAGE","image","status","UPLOAD_CD_IMAGE_SUCCESS","UPLOAD_CD_IMAGE_FAIL","response","message","frontCover","frontCaption","backCover","backCaption"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport  _ from \"lodash\"\nimport {createCd,updateCd,updateCdImage,uploadCDImage} from \"API/indexAPI\"\nconst initialState = {};\nexport default function cdReducer (state = initialState, action) {\n    switch (action.type) {\n  \n        case ACTIONS.CREATE_NEW_CD: {\n        createCd(action.payload).then(json =>{\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_SUCCESS,json))\n        }).catch(err => {\n            console.log(action,err)\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_FAIL,err))\n        })\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_CD_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_CD_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_CD: {\n        let stateCopy = _.cloneDeep(state)\n        stateCopy.currentID = action.payload\n\n            db.collection(\"cds\")\n            .where(\"id\",\"==\",action.payload)\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n              console.log(data)\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_SUCCESS,data))\n            });\n            return state\n        }\n        case  ACTIONS.LOAD_CD_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_CD_FAIL:{\n            return state\n        }\n        case ACTIONS.UPDATE_CD:{\n        updateCd(action.payload).then(json=>{\n            console.log(json)\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_SUCCESS,json.data.data))\n        }).catch(err=>{\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_FAIL,err))\n        })\n        return state\n        }\n        case ACTIONS.UPDATE_CD_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD,stateCopy.ID))\n        return {state,...action.payload}\n        }\n        case ACTIONS.UPDATE_CD_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE:{\n            // let stateCopy = _.cloneDeep(action.payload)\n            //  let image = stateCopy.image\n            //  updateCdImage(image).then((json)=>{\n    \n            //   if(json.status!==404 || json.status!==500) {\n            //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n            //   } else {\n            //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,json.response.message))\n            //   }\n            // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,err)))\n          \n            return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_CD_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE:{\n          let stateCopy = _.cloneDeep(action.payload)\n           let image = stateCopy.image\n           console.log(action)\n           uploadCDImage(image).then((json)=>{\n  \n            if(json.status!==404 || json.status!==500) {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n            } else {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL,json.response.message))\n            }\n          }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL,err)))\n        \n          return state\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE_SUCCESS:{\n          console.log(action)\n            let stateCopy = _.cloneDeep(state)\n            \n            let image = ''\n          if(action.payload.submitted.cover === \"frontCover\") {\n            image = {\n              _id:action.payload.submitted._id,\n              frontCover:action.payload.json.data.filename,\n              frontCaption:action.payload.submitted.caption \n            }\n          } else {\n            image = {\n              _id:action.payload.submitted._id,\n              backCover:action.payload.json.data.filename,\n              backCaption:action.payload.submitted.caption \n            }\n          }\n            action.asyncDispatch(mainAction( ACTIONS.UPDATE_CD,image))\n          return stateCopy\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE_FAIL:{\n          return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE:{\n          console.log(action)\n          let image = ''\n          if(action.submitted.cover === \"frontCover\") {\n            image = {\n              frontCover:action.json.data.filename,\n              frontCaption:action.submitted.caption \n            }\n          } else {\n            image = {\n              backCover:action.json.data.filename,\n              backCaption:action.submitted.caption \n            }\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_CD,image))\n          return state\n        }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}