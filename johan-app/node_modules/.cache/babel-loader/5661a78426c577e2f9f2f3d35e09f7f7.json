{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload); // db.collection(\"agendas\")\n        //   .add(stateCopy)\n        //   .then(function(docRef){\n        //     stateCopy._id = docRef.id\n        //     db.collection(\"agendas\")\n        //     .doc(docRef.id)\n        //     .update({_id:docRef.id}).then(()=>{\n        //       action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n        //     });\n        //   });\n\n\n        console.log(action);\n        db.collection(\"agendas\").add(stateCopy).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        console.log(action);\n        let stateCopy = [];\n        db.collection(\"agendas\").where(\"year\", \"==\", action.payload.year).orderBy('month', 'desc').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          data.map((newData, i) => {\n            if (i < action.payload.limit && i > action.payload.skip) stateCopy.push(newData);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, stateCopy));\n        }); // db.collection(\"agendas\")\n        // .get()\n        // .then(querySnapshot => {\n        //   const data = querySnapshot.docs.map(doc => doc.data());\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,data))\n        // });\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              post.title = title[0];\n              post.date = `${post.year}-${post.month}-${post.day}`;\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n\n          if (data.length > 0) {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, data));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL, {\n              error: \"Failed to retrieve agenda\"\n            }));\n          }\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return { ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        console.log(action);\n        db.collection(\"agendas\").doc(action.payload.id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.AGENDA, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","console","log","collection","add","then","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","LOAD_CD_AGENDA","where","year","orderBy","get","querySnapshot","data","docs","map","doc","newData","i","limit","skip","push","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","agendas","d","Date","day","getDay","month","getMonth","toString","getFullYear","post","title","filter","presentation","id","cd","cdName","date","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","error","UPDATE_AGENDA","update","UPDATE_AGENDA_SUCCESS","AGENDA"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_AGENDA:{\n        let stateCopy = _.cloneDeep(action.payload)\n      \n        // db.collection(\"agendas\")\n        //   .add(stateCopy)\n        //   .then(function(docRef){\n        //     stateCopy._id = docRef.id\n        //     db.collection(\"agendas\")\n        //     .doc(docRef.id)\n        //     .update({_id:docRef.id}).then(()=>{\n        //       action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n        //     });\n           \n        //   });\n        console.log(action)\n        db.collection(\"agendas\")\n        .add(stateCopy).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n        })\n      return stateCopy\n      }\n      case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA: {\n        console.log(action)\n      let stateCopy = []\n      db.collection(\"agendas\")\n      .where(\"year\",\"==\",action.payload.year)\n      .orderBy('month','desc')\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n\n        data.map((newData,i)=>{\n          if(i < action.payload.limit && i > action.payload.skip)\n          stateCopy.push(newData)\n        })\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n      });\n      \n\n      // db.collection(\"agendas\")\n      // .get()\n      // .then(querySnapshot => {\n      //   const data = querySnapshot.docs.map(doc => doc.data());\n      //   action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,data))\n      // });\n      \n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n              post.title = title[0]; \n              post.date=`${post.year}-${post.month}-${post.day}`\n              return post\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_AGENDA:{\n       \n        db.collection(\"agendas\")\n      .where(\"id\",\"==\",action.payload)\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        \n        if(data.length > 0){\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,data))\n      } else {\n         action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL,{error:\"Failed to retrieve agenda\"}))\n      }\n       \n      });\n      return state\n      }\n      case ACTIONS.LOAD_AGENDA_SUCCESS:{\n        return {...action.payload[0]}\n      }\n      case ACTIONS.LOAD_AGENDA_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_AGENDA:{\n        console.log(action)\n          db.collection(\"agendas\")\n          .doc(action.payload.id)\n          .update(action.payload).then(()=>{\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n          });\n          return state\n          }\n          case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          action.asyncDispatch(mainAction(ACTIONS.AGENDA,stateCopy.id))\n          return {state,...action.payload}\n          }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}