{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { uploadPostImage, updatePostImage } from \"API/indexAPI\";\nimport _ from \"lodash\";\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        fetch('http://localhost:3001/api/loadPostByID/' + action.payload).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL, err)));\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return action.payload[0];\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        console.log(action);\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","uploadPostImage","updatePostImage","_","NavDropdown","initialState","singlePostReducer","state","action","type","LOAD_ARTICLE","payload","LOAD_POST","fetch","then","data","json","res","asyncDispatch","LOAD_POST_SUCCESS","catch","err","LOAD_POST_FAIL","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","stateCopy","cloneDeep","image","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","_id","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","console","log"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {uploadPostImage,updatePostImage} from \"API/indexAPI\"\nimport _ from \"lodash\"\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n       \n        fetch ('http://localhost:3001/api/loadPostByID/'+ action.payload)\n        .then((data)=> data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,res.data))\n        \n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,err)))\n        return action.payload\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n\n        return action.payload[0]\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n        updatePost(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json.data.data))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        console.log(action)\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n\n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}