{"ast":null,"code":"import _objectSpread from\"/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import _ from\"lodash\";var initialState={};export default function agendaReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.LOAD_CD_AGENDA:{var stateCopy=_.cloneDeep(state);fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit).then(function(data){return data.json();}).then(function(res){action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data));stateCopy.agendaTotal=res.data.length;}).catch(function(err){return action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err));});return stateCopy;}case ACTIONS.LOAD_CD_AGENDA_SUCCESS:{return action.payload;}case ACTIONS.LOAD_CD_AGENDA_FAIL:{return state;}case ACTIONS.LOAD_AGENDAS:{var d=new Date();var day=d.getDay();var month=d.getMonth()+1;var year=d.getFullYear();fetch('http://127.0.0.1:5021/api/loadfilteredAgendas/'+action.payload.skip+\"/\"+action.payload.limit+\"/\"+year+\"/\"+month).then(function(data){return data.json();}).then(function(res){action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,res.data));}).catch(function(err){return action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_FAIL,err));});return state;}case ACTIONS.LOAD_AGENDAS_SUCCESS:{var _d=new Date();var _day=_d.getDate();var _stateCopy=[];action.payload.map(function(agenda){// if(agenda.day > day)\nreturn _stateCopy.push(agenda);});return _stateCopy;}case ACTIONS.LOAD_AGENDAS_FAIL:{return state;}default:return _objectSpread({},state);}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","cloneDeep","fetch","payload","skip","limit","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","agendaTotal","length","catch","err","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","d","Date","day","getDay","month","getMonth","year","getFullYear","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","getDate","map","agenda","push"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport _ from \"lodash\"\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n        let stateCopy = _.cloneDeep(state)\n       fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n          stateCopy.agendaTotal = res.data.length\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let d = new Date();\n        let day = d.getDay();\n        let month = d.getMonth() + 1\n        let year = d.getFullYear();\n        fetch ('http://127.0.0.1:5021/api/loadfilteredAgendas/'+action.payload.skip+\"/\"+action.payload.limit+\"/\"+year+\"/\" + month )\n        .then((data)=> data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,res.data))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_FAIL,err)))\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let d = new Date();\n        let day = d.getDate();\n        let stateCopy = []\n        action.payload.map(agenda=>{\n         // if(agenda.day > day)\n          return stateCopy.push(agenda)\n        })\n        return stateCopy\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}