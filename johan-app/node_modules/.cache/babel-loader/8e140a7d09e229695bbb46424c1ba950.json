{"ast":null,"code":"import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import{db,storageRef}from\"../../firebase\";var initialState={};export default function postsReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.LOAD_POSTS:{var stateCopy='';//=======================================================\ndb.collection(\"posts\").where(\"showPost\",'==','1').orderBy('postDate','desc').get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});stateCopy=data;//=======================================================\ndb.collection(\"postimages\").get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});stateCopy.map(function(post,i){return stateCopy[i].image=data.filter(function(image){return image.albumID===stateCopy[i].ID;});});action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,stateCopy));});//========================================================\n});return state;}case ACTIONS.LOAD_POSTS_SUCCESS:{return action.payload;}case ACTIONS.LOAD_POSTS_FAIL:{return state;}case ACTIONS.LOAD_DASHBOARD_POSTS:{var _stateCopy='';var _id='';db.collection(\"posts\").orderBy('postDate','desc').get().then(function(snapshotChanges){var data=snapshotChanges.docs.map(function(doc){_id=doc.id;return doc.data();});_stateCopy=data;//=======================================================\ndb.collection(\"postimages\").get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});_stateCopy.map(function(post,i){return _stateCopy[i].image=data.filter(function(image){return image.albumID===_stateCopy[i].ID;});});action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS,_stateCopy));});//========================================================\n});return state;}case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS:{var _stateCopy2=action.payload;return _stateCopy2;}case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL:{return state;}default:return state;}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/posts.reducer.js"],"names":["ACTIONS","mainAction","db","storageRef","initialState","postsReducer","state","action","type","LOAD_POSTS","stateCopy","collection","where","orderBy","get","then","querySnapshot","data","docs","map","doc","post","i","image","filter","albumID","ID","asyncDispatch","LOAD_POSTS_SUCCESS","payload","LOAD_POSTS_FAIL","LOAD_DASHBOARD_POSTS","_id","snapshotChanges","id","LOAD_DASHBOARD_POSTS_SUCCESS","LOAD_DASHBOARD_POSTS_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db,storageRef } from \"../../firebase\";\nconst initialState = {};\nexport default function postsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_POSTS: {\n      let stateCopy = ''\n       //=======================================================\n      db.collection(\"posts\")\n      .where(\"showPost\",'==','1')\n      .orderBy('postDate','desc')\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        stateCopy = data;\n\n        //=======================================================\n          db.collection(\"postimages\")\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post,i)=>{\n            return stateCopy[i].image = data.filter(image => image.albumID === stateCopy[i].ID)\n            })\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,stateCopy))\n          });\n        //========================================================\n      });\n        return state\n      }\n      case ACTIONS.LOAD_POSTS_SUCCESS: {\n\n        return action.payload\n      }\n      case ACTIONS.LOAD_POSTS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_DASHBOARD_POSTS: {\n\n        let stateCopy = ''\n        let _id = ''\n        db.collection(\"posts\")\n      .orderBy('postDate','desc')\n      .get()\n      .then(snapshotChanges => {\n        const data = snapshotChanges.docs.map(doc => {\n          _id=doc.id\n          return doc.data()});\n        stateCopy = data;\n\n        //=======================================================\n          db.collection(\"postimages\")\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post,i)=>{\n            return stateCopy[i].image = data.filter(image => image.albumID === stateCopy[i].ID)\n            })\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS,stateCopy))\n          });\n        //========================================================\n      });\n         return state\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS: {\n         let stateCopy = action.payload\n        \n    \n             \n         return stateCopy\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL: {\n \n         return state\n       }\n      default: \n        return state\n        \n    }\n  }"]},"metadata":{},"sourceType":"module"}