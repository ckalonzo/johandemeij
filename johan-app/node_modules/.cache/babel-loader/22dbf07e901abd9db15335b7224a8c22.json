{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        console.log(action);\n        const agendaRef = database.ref('agendas/' + action.payload.id);\n        agendaRef.set(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, action.payload));\n        }).catch(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_FAIL, {\n            error: \"could not creat agenda\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        console.log(action);\n        const agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload);\n        console.log(agendaRef); // agendaRef.remove()\n\n        action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, [])); // let d = new Date();\n        // let month = (d.getMonth() + 1).toString()\n        //  var agendaYearRef = database.ref('agendas').orderByChild('id').startAt('3174').endAt('3174')\n        //  agendaYearRef.on('value',(snap,i)=>{\n        // console.log(snap)\n        // let agendas = []\n        // const data = snap.val()\n        // Object.values(data).map(agenda=>{\n        //  console.log(agenda) \n        //  // if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n        //   return agendas.push(agenda)\n        // })\n        // })\n\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        let d = new Date();\n        let month = (d.getMonth() + 1).toString();\n        var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2020');\n        agendaYearRef.on('value', (snap, i) => {\n          let agendas = [];\n          const data = snap.val();\n          console.log(snap.key, snap.val().text);\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`; // if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n\n            return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, agendas));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['month', 'day'], ['asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let d = new Date();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload.year).endAt(action.payload.year);\n        agendaYearRef.on('value', (snap, i) => {\n          let agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            // if(agenda){\n            // agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n            // agenda.month = +agenda.month}\n            if (agenda.month >= month && agenda.cd != '') return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        let d = new Date();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload.year).endAt(action.payload.year);\n        agendaYearRef.on('value', (snap, i) => {\n          let agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        let stateCopy = [];\n        var agendaRef = database.ref('agendas/' + action.payload);\n        agendaRef.on('value', (snap, i) => {\n          const data = snap.val();\n          if (data) action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...data\n          }));\n        });\n        var agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload);\n        agendaRef.on('child_added', (snap, i) => {\n          const data = snap.val();\n          stateCopy = data;\n          if (stateCopy) action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...stateCopy\n          }));\n        });\n        return { ...stateCopy\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        const agendaRef = database.ref('agendas');\n        agendaRef.child(action.payload.id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        }).catch(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_FAIL, {\n            error: \"failed to update agenda\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","database","_","initialState","agendaReducer","state","action","type","CREATE_NEW_AGENDA","console","log","agendaRef","ref","payload","id","set","then","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","catch","CREATE_NEW_AGENDA_FAIL","error","DELETE_AGENDA","orderByChild","startAt","endAt","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","d","Date","month","getMonth","toString","agendaYearRef","on","snap","i","agendas","data","val","key","text","Object","values","map","agenda","date","day","year","push","LOAD_CD_AGENDA_SUCCESS","orderBy","LOAD_CD_AGENDA_FAIL","getFullYear","cd","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDAS_FILTERED","LOAD_AGENDA","stateCopy","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","UPDATE_AGENDA","child","update","UPDATE_AGENDA_SUCCESS","UPDATE_AGENDA_FAIL","cloneDeep"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n      console.log(action)\n     \n     const agendaRef = database.ref('agendas/'+action.payload.id)\n    agendaRef.set(action.payload).then(()=>{\n      action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,action.payload))\n    })\n    .catch(()=>{\n      action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_FAIL,{error:\"could not creat agenda\"}))\n    });\n   \n    return state\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.DELETE_AGENDA:{\n      console.log(action)\n      const agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload)\n     console.log(agendaRef)\n      // agendaRef.remove()\n      action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n\n\n      // let d = new Date();\n      // let month = (d.getMonth() + 1).toString()\n      //  var agendaYearRef = database.ref('agendas').orderByChild('id').startAt('3174').endAt('3174')\n      //  agendaYearRef.on('value',(snap,i)=>{\n      // console.log(snap)\n      // let agendas = []\n      // const data = snap.val()\n      // Object.values(data).map(agenda=>{\n      \n      //  console.log(agenda) \n      //  // if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n      //   return agendas.push(agenda)\n      // })\n      \n\n      // })\n    return state\n    }  \n    case ACTIONS.DELETE_AGENDA_SUCCESS:{\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n    return state\n    }  \n    case ACTIONS.LOAD_CD_AGENDA: {\n    let d = new Date();\n    let month = (d.getMonth() + 1).toString()\n     var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2020')\n     agendaYearRef.on('value',(snap,i)=>{\n    \n    let agendas = []\n    const data = snap.val()\n\n   console.log(snap.key,snap.val().text)\n    Object.values(data).map(agenda=>{\n      agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n     // if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n      return agendas.push(agenda)\n    })\n    \n     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,agendas))\n    })\n\n    return state\n    }\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n    return _.orderBy(action.payload,['month','day'],['asc','asc'])\n    }\n    case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS: {\n    let d = new Date();\n    let month = (d.getMonth() + 1).toString()\n    let year = d.getFullYear().toString();\n\n    const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload.year).endAt(action.payload.year)\n    agendaYearRef.on('value',(snap,i)=>{\n\n    let agendas = []\n    const data = snap.val()\n      Object.values(data).map(agenda=>{\n        // if(agenda){\n        // agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        // agenda.month = +agenda.month}\n        if(agenda.month >= month && agenda.cd !='')\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDAS_FAIL:{\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n      let d = new Date();\n    let month = (d.getMonth() + 1).toString()\n    let year = d.getFullYear().toString();\n\n    const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload.year).endAt(action.payload.year)\n    agendaYearRef.on('value',(snap,i)=>{\n\n    let agendas = []\n    const data = snap.val()\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n      return action.payload\n    }\n    case ACTIONS.LOAD_AGENDA:{\n    let stateCopy = []\n    var agendaRef = database.ref('agendas/'+action.payload)\n     agendaRef.on('value',(snap,i)=>{\n    const data = snap.val()\n    if(data) \n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...data}))\n      \n    })\n    var agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload)\n     agendaRef.on('child_added',(snap,i)=>{\n    const data = snap.val()\n    stateCopy = data\n    if(stateCopy)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...stateCopy}))\n      \n    })\n    return {...stateCopy}\n    }\n    case ACTIONS.LOAD_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDA_FAIL:{\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA:{\n      const agendaRef = database.ref('agendas')\n      agendaRef.child(action.payload.id).update(action.payload)\n      .then(()=>{\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n      }).catch(()=>{\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_FAIL,{error:\"failed to update agenda\"}))\n      })\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n    let stateCopy = _.cloneDeep(action.payload)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n    return stateCopy\n    }\n    case ACTIONS.UPDATE_AGENDA_FAIL:{\n   \n    return state\n    }\n    default: \n      return {\n        ...state\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}