{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport postsData from \"static/data/posts\";\nconst initialState = {};\nexport default function postsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_POSTS:\n      {\n        fetch('http://localhost/static/data/posts.js').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS, res.data));\n          console.log(res.data);\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_FAIL, err)));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS, postsData));\n        return state;\n      }\n\n    case ACTIONS.LOAD_POSTS_SUCCESS:\n      {\n        let stateCopy = action.payload;\n        let imageName = [];\n        fetch('http://localhost:5021/api/loadPostImages').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS, res.data));\n          imageName = stateCopy.map(post => {\n            post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage => {\n              return postImage;\n            });\n          });\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_POSTS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS:\n      {\n        fetch('http://localhost:5021/api/loadAllPosts').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS:\n      {\n        let stateCopy = action.payload;\n        let imageName = [];\n        fetch('http://localhost:5021/api/loadPostImages').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS, res.data));\n          imageName = stateCopy.map(post => {\n            post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage => {\n              return postImage;\n            });\n          });\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/posts.reducer.js"],"names":["ACTIONS","mainAction","postsData","initialState","postsReducer","state","action","type","LOAD_POSTS","fetch","then","data","json","res","asyncDispatch","LOAD_POSTS_SUCCESS","console","log","catch","err","LOAD_POSTS_FAIL","stateCopy","payload","imageName","LOAD_POST_IMAGES_SUCCESS","map","post","image","Object","values","filter","albumID","ID","postImage","LOAD_POST_IMAGES_FAIL","LOAD_DASHBOARD_POSTS","LOAD_DASHBOARD_POSTS_SUCCESS","LOAD_DASHBOARD_POSTS_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport postsData from \"static/data/posts\"\n\nconst initialState = {};\nexport default function postsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_POSTS: {\n        \n       fetch('http://localhost/static/data/posts.js')\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,res.data))\n          console.log(res.data)\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_FAIL,err)))\n       action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,postsData))\n        return state\n      }\n      case ACTIONS.LOAD_POSTS_SUCCESS: {\n        let stateCopy = action.payload\n        let imageName = []\n        fetch('http://localhost:5021/api/loadPostImages')\n            .then((data) => data.json())\n            .then((res) => {\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n              imageName = stateCopy.map(post => {\n                post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage =>{\n                  return postImage\n                })\n  \n              })\n            }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\n            \n        return stateCopy\n      }\n      case ACTIONS.LOAD_POSTS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_DASHBOARD_POSTS: {\n        \n        fetch('http://localhost:5021/api/loadAllPosts')\n         .then((data) => data.json())\n         .then((res) => {\n           action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS,res.data))\n         }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_FAIL,err)))\n        \n         return state\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS: {\n         let stateCopy = action.payload\n         let imageName = []\n         fetch('http://localhost:5021/api/loadPostImages')\n             .then((data) => data.json())\n             .then((res) => {\n               action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n               imageName = stateCopy.map(post => {\n                 post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage =>{\n                   return postImage\n                 })\n   \n               })\n             }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\n             \n         return stateCopy\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL: {\n \n         return state\n       }\n      default: \n        return state\n        \n    }\n  }"]},"metadata":{},"sourceType":"module"}