{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { updatePostImage, createPost, uploadPostImage, createPostImage, deletePostImage, deletePost } from \"API/indexAPI\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {\n  currentID: ''\n};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_POST_IMAGE:\n      {\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"posts\").add(stateCopy).then(function (docRef) {\n          console.log(docRef);\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS, stateCopy));\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST:\n      {\n        // let stateCopy = _.cloneDeep(state)\n        // deletePost(action.payload.image)\n        // .then((json)=>{\n        //   action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS,json))\n        // })\n        // .catch(err=>{\n        //   action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_FAIL,err))\n        // })\n        // stateCopy.currentID = action.payload.post\n        //////====>\n        db.collection(\"posts\") //.where(\"ID\",'==',action.payload)\n        .remove(\"ID\", '==', action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            return doc.data();\n          });\n        }); //////====>\n\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        deletePostImage(action.payload.image).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_FAIL, err));\n        });\n        stateCopy.currentID = action.payload.post;\n        return stateCopy;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        let post_id = '';\n        db.collection(\"posts\").get().then(snapshot => {\n          snapshot.forEach(doc => {\n            if (doc.data().ID === parseInt(action.payload)) console.log(doc.id, '=>', doc.data().ID);\n          });\n        }).catch(err => {\n          console.log('Error getting documents', err);\n        }); //////====>\n\n        db.collection(\"posts\") //.where(\"ID\",'==',action.payload)\n        .where(\"ID\", '==', action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            post_id = doc.id;\n            return doc.data();\n          });\n\n          let stateCopy = _.cloneDeep(data);\n\n          if (stateCopy[0]) stateCopy[0]._id = post_id;\n          console.log(stateCopy);\n          let _id = ''; //=======================================================\n\n          db.collection(\"postimages\").where(\"albumID\", '==', action.payload).get().then(snapshotChanges => {\n            const data = snapshotChanges.docs.map(doc => {\n              _id = doc.id;\n              return doc.data();\n            });\n            stateCopy.map((post, i) => {\n              //    data[0]._id =  _id\n              return stateCopy[i].image = data;\n            });\n\n            if (snapshotChanges.size > 0) {\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, stateCopy));\n            } else {\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL, {\n                error: \"could not find this record\"\n              }));\n            }\n          }); //========================================================\n        }); //////====>\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        db.collection(\"posts\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE:\n      {\n        db.collection(\"postimages\").doc().set(action.payload).then(() => {\n          console.log(action.payload);\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE, newImage));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","updatePostImage","createPost","uploadPostImage","createPostImage","deletePostImage","deletePost","db","_","NavDropdown","initialState","currentID","singlePostReducer","state","action","type","CREATE_NEW_POST_IMAGE","payload","then","json","asyncDispatch","CREATE_NEW_POST_IMAGE_SUCCESS","catch","err","CREATE_NEW_POST_IMAGE_FAIL","stateCopy","cloneDeep","LOAD_POST","ID","CREATE_NEW_POST","collection","add","docRef","console","log","_id","id","CREATE_NEW_POST_SUCCESS","CREATE_NEW_POST_FAIL","DELETE_POST","remove","get","querySnapshot","data","docs","map","doc","DELETE_POST_SUCCESS","LOAD_DASHBOARD_POSTS","DELETE_POST_FAIL","DELETE_POST_IMAGE","image","DELETE_POST_IMAGE_SUCCESS","DELETE_POST_IMAGE_FAIL","post","LOAD_ARTICLE","post_id","snapshot","forEach","parseInt","where","snapshotChanges","i","size","LOAD_POST_SUCCESS","LOAD_POST_FAIL","error","UPDATE_POST","update","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","UPLOAD_POST_IMAGE","set","UPLOAD_POST_IMAGE_SUCCESS","UPLOAD_POST_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updatePostImage,createPost,uploadPostImage,createPostImage,deletePostImage,deletePost} from \"API/indexAPI\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {\n  currentID:''\n};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_POST_IMAGE:{\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST: {\n        let stateCopy = _.cloneDeep(action.payload)\n      \n        db.collection(\"posts\")\n          .add(stateCopy)\n          .then(function(docRef){\n            console.log(docRef)\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,stateCopy))\n          });\n        return stateCopy\n      }\n      case ACTIONS.CREATE_NEW_POST_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_FAIL: {\n        return state\n      }\n      case ACTIONS.DELETE_POST:{\n        \n        // let stateCopy = _.cloneDeep(state)\n        // deletePost(action.payload.image)\n        // .then((json)=>{\n        //   action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS,json))\n        // })\n        // .catch(err=>{\n        //   action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_FAIL,err))\n        // })\n        // stateCopy.currentID = action.payload.post\n         //////====>\n         db.collection(\"posts\")\n         //.where(\"ID\",'==',action.payload)\n         .remove(\"ID\",'==',action.payload)\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => {\n             return doc.data()}); \n \n          \n          });\n           //////====>\n        return state\n      }  \n      case ACTIONS.DELETE_POST_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS,[]))\n        return state\n      }  \n      case ACTIONS.DELETE_POST_FAIL:{\n        return action.payload\n      }  \n      case ACTIONS.DELETE_POST_IMAGE:{\n\n        let stateCopy = _.cloneDeep(state)\n        deletePostImage(action.payload.image)\n        .then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS,json))\n        })\n        .catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_FAIL,err))\n        })\n        stateCopy.currentID = action.payload.post\n        return stateCopy\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_SUCCESS:{\n\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n\n        return state\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n        let post_id = ''\n        db.collection(\"posts\").get().then(snapshot => {\n          snapshot.forEach(doc => {\n            if(doc.data().ID===parseInt(action.payload))\n            console.log(doc.id, '=>', doc.data().ID);\n          });\n        })\n        .catch(err => {\n          console.log('Error getting documents', err);\n        });\n\n        //////====>\n        db.collection(\"posts\")\n        //.where(\"ID\",'==',action.payload)\n        .where(\"ID\",'==',action.payload)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => {\n            post_id=doc.id\n            return doc.data()}); \n\n            let stateCopy = _.cloneDeep(data)\n            if(stateCopy[0])\n            stateCopy[0]._id = post_id\n            console.log(stateCopy)\n            let _id = ''\n\n             //=======================================================\n\n                  db.collection(\"postimages\")\n                  .where(\"albumID\",'==',action.payload)\n                  .get()\n                  .then(snapshotChanges => {\n                    \n                      const data = snapshotChanges.docs.map(doc => {\n                        _id=doc.id\n                        return doc.data()});\n                      \n                      stateCopy.map((post,i)=>{\n                    //    data[0]._id =  _id\n                      return stateCopy[i].image = data\n                    })\n                    if (snapshotChanges.size > 0) {\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy))} else {\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,{error:\"could not find this record\"}))}\n                  });\n\n              //========================================================\n\n         });\n          //////====>\n        return state\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n        \n        return {state,...action.payload[0]}\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n\n        db.collection(\"posts\").doc(action.payload._id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,action.payload))\n        });\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          \n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          stateCopy.currentID = action.payload.submitted.albumID\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE:{\n       db.collection(\"postimages\")\n       .doc()\n       .set(action.payload)\n       .then(() => {\n         console.log(action.payload)\n         action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS,action.payload))\n       });\n       return state\n     }\n      case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n         \n         let newImage = {\n           albumID:action.payload.submitted.albumID,\n           caption:action.payload.submitted.caption,\n           cover:action.payload.submitted.cover,\n           imageName:action.payload.json.data.filename\n         }\n         stateCopy.currentID = action.payload.submitted.albumID\n         action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE,newImage))\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE_FAIL:{\n        return state\n      }\n      \n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}