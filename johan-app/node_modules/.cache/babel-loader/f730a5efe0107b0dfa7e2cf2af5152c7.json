{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        fetch('http://127.0.0.1:5021/api/loadAgendasByPage/' + action.payload.skip + \"/\" + action.payload.limit).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, res.data));\n          stateCopy.agendaTotal = res.data.length;\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        db.collection(\"agendas\").where(\"year\", '==', year).where(\"month\", '>=', month).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          agendas = data;\n          data.map((agenda, i) => {\n            db.collection(\"presentations\").where(\"id\", \"==\", agenda.cd.toString()).get().then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n              agenda.title = data[0].cdName;\n              agendas[i].title = data[0].cdName;\n              console.log(agendas[i]); // action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,data))\n            });\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, agendas));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let d = new Date();\n        let day = d.getDate();\n        let stateCopy = [];\n        action.payload.map(agenda => {\n          // if(agenda.day > day)\n          return stateCopy.push(agenda);\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","cloneDeep","fetch","payload","skip","limit","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","agendaTotal","length","catch","err","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","agendas","d","Date","day","getDay","month","getMonth","toString","year","getFullYear","collection","where","get","querySnapshot","docs","map","doc","agenda","i","cd","title","cdName","console","log","LOAD_AGENDAS_SUCCESS","getDate","push","LOAD_AGENDAS_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n        let stateCopy = _.cloneDeep(state)\n       fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n          stateCopy.agendaTotal = res.data.length\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n        db.collection(\"agendas\")\n       .where(\"year\",'==',year)\n       .where(\"month\",'>=',month)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => doc.data());\n           agendas = data\n            \n            data.map((agenda,i)=>{\n          \n            db.collection(\"presentations\")\n            .where(\"id\",\"==\",agenda.cd.toString())\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n             agenda.title=data[0].cdName\n             agendas[i].title=data[0].cdName\n             console.log(agendas[i])\n             // action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,data))\n            });\n          })\n\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,agendas))\n          \n         });\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let d = new Date();\n        let day = d.getDate();\n        let stateCopy = []\n        action.payload.map(agenda=>{\n         // if(agenda.day > day)\n          return stateCopy.push(agenda)\n        })\n        return stateCopy\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}