{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, storageRef } from \"../../firebase\";\nconst initialState = {};\nexport default function postsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_POSTS:\n      {\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"posts\").where(\"showPost\", '==', '1').orderBy('postDate', 'desc').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"postimages\").get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              return stateCopy[i].image = data.filter(image => image.albumID === stateCopy[i].ID);\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_POSTS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POSTS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS:\n      {\n        let stateCopy = '';\n        let _id = '';\n        db.collection(\"posts\").orderBy('postDate', 'desc').get().then(snapshotChanges => {\n          const data = snapshotChanges.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          stateCopy = data; //=======================================================\n\n          db.collection(\"postimages\").get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              return stateCopy[i].image = data.filter(image => image.albumID === stateCopy[i].ID);\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS:\n      {\n        let stateCopy = action.payload;\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Websites/johandemeij/johan-app/src/redux/reducers/posts.reducer.js"],"names":["ACTIONS","mainAction","db","storageRef","initialState","postsReducer","state","action","type","LOAD_POSTS","stateCopy","collection","where","orderBy","get","then","querySnapshot","data","docs","map","doc","post","i","image","filter","albumID","ID","asyncDispatch","LOAD_POSTS_SUCCESS","payload","LOAD_POSTS_FAIL","LOAD_DASHBOARD_POSTS","_id","snapshotChanges","id","LOAD_DASHBOARD_POSTS_SUCCESS","LOAD_DASHBOARD_POSTS_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db,storageRef } from \"../../firebase\";\nconst initialState = {};\nexport default function postsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_POSTS: {\n      let stateCopy = ''\n       //=======================================================\n      db.collection(\"posts\")\n      .where(\"showPost\",'==','1')\n      .orderBy('postDate','desc')\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        stateCopy = data;\n\n        //=======================================================\n          db.collection(\"postimages\")\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post,i)=>{\n            return stateCopy[i].image = data.filter(image => image.albumID === stateCopy[i].ID)\n            })\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,stateCopy))\n          });\n        //========================================================\n      });\n        return state\n      }\n      case ACTIONS.LOAD_POSTS_SUCCESS: {\n\n        return action.payload\n      }\n      case ACTIONS.LOAD_POSTS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_DASHBOARD_POSTS: {\n\n        let stateCopy = ''\n        let _id = ''\n        db.collection(\"posts\")\n      .orderBy('postDate','desc')\n      .get()\n      .then(snapshotChanges => {\n        const data = snapshotChanges.docs.map(doc => {\n          _id=doc.id\n          return doc.data()});\n        stateCopy = data;\n\n        //=======================================================\n          db.collection(\"postimages\")\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post,i)=>{\n            return stateCopy[i].image = data.filter(image => image.albumID === stateCopy[i].ID)\n            })\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS,stateCopy))\n          });\n        //========================================================\n      });\n         return state\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS: {\n         let stateCopy = action.payload\n        \n    \n             \n         return stateCopy\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL: {\n \n         return state\n       }\n      default: \n        return state\n        \n    }\n  }"]},"metadata":{},"sourceType":"module"}