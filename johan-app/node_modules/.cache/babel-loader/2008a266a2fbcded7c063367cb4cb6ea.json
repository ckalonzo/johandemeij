{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, storage } from \"../../firebase\";\nimport _ from \"lodash\";\nimport { updatePresentationImage } from \"API/indexAPI\";\nconst initialState = {};\nexport default function presentationReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.DELETE_PRESENTATION_IMAGE:\n      {\n        let presentation = {};\n\n        if (action.payload.imageType === \"frontCover\") {\n          presentation = {\n            frontCover: \"\",\n            frontCaption: \"\"\n          };\n        } else {\n          presentation = {\n            backCover: \"\",\n            backCaption: \"\"\n          };\n        }\n\n        db.collection(\"presentations\").doc(action.payload.docId).update(presentation).then(() => {\n          db.collection(\"postimages\").where('albumID', '==', action.payload.ID).where('cover', '==', action.payload.imageType).get().then(querySnapshot => {\n            console.log(querySnapshot.docs);\n            querySnapshot.forEach(doc => {\n              console.log(doc.ref.id, doc.ref.parent, doc.ref.path);\n              doc.ref.delete();\n            });\n            action.asyncDispatch(mainAction(ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('posts/' + action.payload.name);\n        postImageRef.delete().then(() => console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, action.payload.ID));\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION_IMAGE_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"presentations\").add(stateCopy).then(function (docRef) {\n          stateCopy._id = docRef.id;\n          db.collection(\"presentations\").doc(docRef.id).update({\n            _id: docRef.id\n          }).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS, stateCopy));\n          });\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let _id = '';\n        db.collection(\"presentations\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            //  _id=doc.id\n            return doc.data();\n          });\n          stateCopy = data; //  stateCopy[0]._id = _id\n\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION:\n      {\n        console.log(action.payload.id);\n        db.collection(\"presentations\").where(\"id\", \"==\", action.payload.id).get().then(querySnapshot => {\n          const _id = '';\n          const data = querySnapshot.docs.map(doc => {\n            return _id = doc.ref.id;\n          });\n          console.log(_id);\n          db.collection(\"presentations\").doc(_id).update(action.payload).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS, action.payload));\n          });\n        }).catch(() => {});\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        updatePresentationImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE:\n      {\n        console.log(action);\n        let image = {\n          albumID: action.payload.albumID,\n          caption: action.payload.caption ? action.payload.caption : \"\",\n          cover: action.payload.cover ? action.payload.cover : \"\",\n          imageName: action.payload.image.name\n        };\n        let presentation = {};\n\n        if (action.payload.cover === \"frontCover\") {\n          presentation = {\n            frontCover: action.payload.image.name,\n            frontCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        } else {\n          presentation = {\n            backCover: action.payload.image.name,\n            backCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        }\n\n        db.collection(\"presentations\").doc(action.payload.docId).update(presentation).then(() => {\n          db.collection(\"postimages\").doc().set(image).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('posts/' + action.payload.image.name).put(action.payload.image);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('/posts').child(action.payload.image.name).getDownloadURL().then(url => {\n            console.log(url);\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, action.payload.albumID));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        console.log(action);\n        let image = '';\n\n        if (action.submitted.cover === \"frontCover\") {\n          image = {\n            frontCover: action.json.data.filename,\n            frontCaption: action.submitted.caption\n          };\n        } else {\n          image = {\n            backCover: action.json.data.filename,\n            backCaption: action.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION, image));\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/presentation.reducer.js"],"names":["ACTIONS","mainAction","db","storage","_","updatePresentationImage","initialState","presentationReducer","state","action","type","DELETE_PRESENTATION_IMAGE","presentation","payload","imageType","frontCover","frontCaption","backCover","backCaption","collection","doc","docId","update","then","where","ID","get","querySnapshot","console","log","docs","forEach","ref","id","parent","path","delete","asyncDispatch","DELETE_PRESENTATION_IMAGE_SUCCESS","postImageRef","name","LOAD_PRESENTATION","DELETE_PRESENTATION_IMAGE_FAIL","CREATE_NEW_PUBLICATION","stateCopy","cloneDeep","add","docRef","_id","CREATE_NEW_PUBLICATION_SUCCESS","CREATE_NEW_PUBLICATION_FAIL","data","map","LOAD_PRESENTATION_SUCCESS","length","LOAD_PRESENTATION_FAIL","UPDATE_PUBLICATION","UPDATE_PUBLICATION_SUCCESS","catch","UPDATE_PUBLICATION_FAIL","UPDATE_PRESENTATION_IMAGE","image","json","status","UPDATE_PRESENTATION_IMAGE_SUCCESS","submitted","UPDATE_PRESENTATION_IMAGE_FAIL","response","message","err","newImage","albumID","caption","cover","imageName","filename","updatedAt","Date","now","currentID","UPDATE_POST_IMAGE","UPLOAD_PRESENTATION_IMAGE","set","UPLOAD_PRESENTATION_IMAGE_SUCCESS","put","on","snapshot","error","child","getDownloadURL","url","UPLOAD_PRESENTATION_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db,storage} from \"../../firebase\";\nimport  _ from \"lodash\"\nimport {updatePresentationImage} from \"API/indexAPI\"\nconst initialState = {};\nexport default function presentationReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.DELETE_PRESENTATION_IMAGE:{\n        let presentation= {}\n        if(action.payload.imageType === \"frontCover\"){\n         presentation = {\n           frontCover : \"\",\n           frontCaption:\"\",\n         }\n        } else {\n          presentation = {\n            backCover : \"\",\n            backCaption:\"\",\n          }\n        }\n\n       db.collection(\"presentations\").doc(action.payload.docId)\n       .update(presentation).then(()=>{   \n\n          db.collection(\"postimages\")\n          .where('albumID','==',action.payload.ID)\n          .where('cover','==',action.payload.imageType)\n           .get()\n           .then((querySnapshot) => {\n            console.log(querySnapshot.docs)\n            querySnapshot.forEach((doc)=>{\n               console.log(doc.ref.id,doc.ref.parent,doc.ref.path)\n               doc.ref.delete()\n              })\n            action.asyncDispatch(mainAction(ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS,action.payload))\n           });\n       });\n\n        \n        return state\n      }  \n      case ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS:{\n        let postImageRef = storage.ref('posts/'+action.payload.name)\n        postImageRef.delete().then(()=>console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,action.payload.ID))\n        return state\n      }  \n      case ACTIONS.DELETE_PRESENTATION_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n        case ACTIONS.CREATE_NEW_PUBLICATION: {\n          let stateCopy = _.cloneDeep(action.payload)\n      \n          db.collection(\"presentations\")\n            .add(stateCopy)\n            .then(function(docRef){\n              stateCopy._id = docRef.id\n              db.collection(\"presentations\")\n              .doc(docRef.id)\n              .update({_id:docRef.id}).then(()=>{\n                action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS,stateCopy))\n              });\n             \n            });\n        return stateCopy\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_PRESENTATION: {\n        let stateCopy = _.cloneDeep(state)\n        let _id = ''\n            db.collection(\"presentations\")\n            .where(\"id\",\"==\",action.payload)\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => {\n              //  _id=doc.id\n                return doc.data()});\n              stateCopy = data\n            //  stateCopy[0]._id = _id\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS,data))\n            });\n            return state\n        }\n        case  ACTIONS.LOAD_PRESENTATION_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_PRESENTATION_FAIL:{\n            return state\n        }\n        \n        case ACTIONS.UPDATE_PUBLICATION:{\n          console.log(action.payload.id)\n     \n      db.collection(\"presentations\").where(\"id\",\"==\",action.payload.id).get()\n      .then((querySnapshot)=>{\n        const _id=''\n        const data = querySnapshot.docs.map(doc =>{\n         return  _id = doc.ref.id\n        })\n        console.log(_id)\n        db.collection(\"presentations\")\n        .doc(_id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS,action.payload))\n        });\n       })\n      .catch(()=>{\n\n      })\n       \n        return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,stateCopy.id))\n        return {state,...action.payload}\n        }\n        case ACTIONS.UPDATE_PUBLICATION_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n            let stateCopy = _.cloneDeep(action.payload)\n             let image = stateCopy.image\n             updatePresentationImage(image).then((json)=>{\n    \n              if(json.status!==404 || json.status!==500) {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n              } else {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,json.response.message))\n              }\n            }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,err)))\n          \n            return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE:{\n         console.log(action)\n          let image = {\n            albumID: action.payload.albumID,\n            caption: action.payload.caption ? action.payload.caption :\"\",\n            cover: action.payload.cover ? action.payload.cover:\"\",\n            imageName:action.payload.image.name\n          }\n          let presentation= {}\n          if(action.payload.cover === \"frontCover\"){\n           presentation = {\n             frontCover : action.payload.image.name,\n             frontCaption:action.payload.caption ? action.payload.caption :\"\",\n           }\n          } else {\n            presentation = {\n              backCover : action.payload.image.name,\n              backCaption:action.payload.caption ? action.payload.caption :\"\",\n            }\n          }\n\n        db.collection(\"presentations\").doc(action.payload.docId)\n        .update(presentation).then(()=>{   \n            db.collection(\"postimages\")\n            .doc()\n            .set(image)\n            .then(() => {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS,action.payload))\n            });\n\n\n        });\n\n        \n         \n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:{\n          let postImageRef = storage.ref('posts/'+action.payload.image.name).put(action.payload.image);\n          postImageRef.on('state_changed',(snapshot)=>{\n            //progress function\n          },(error)=>{\n            //error\n            console.log(error)\n          },()=>{\n            //complete\n            storage.ref('/posts').child(action.payload.image.name).getDownloadURL().then(url=>{\n              console.log(url)\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,action.payload.albumID))\n            })\n          })\n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:{\n          return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n          console.log(action)\n          let image = ''\n          if(action.submitted.cover === \"frontCover\") {\n            image = {\n              frontCover:action.json.data.filename,\n              frontCaption:action.submitted.caption \n            }\n          } else {\n            image = {\n              backCover:action.json.data.filename,\n              backCaption:action.submitted.caption \n            }\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_PUBLICATION,image))\n          return state\n        }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}