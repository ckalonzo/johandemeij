{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function musicProfileReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_MUSIC_PROFILE:\n      {\n        db.collection(\"presentations\").where(\"id\", '==', action.payload).get().then(querySnapshot => {\n          let mainData = [];\n          const data = querySnapshot.docs.map(doc => doc.data());\n          mainData = { ...data\n          };\n          console.log(mainData); //  db.collection(\"presentationmuic\")\n          //  .where(\"pres_id\",'==',profileData.id)\n          //    .get()\n          //    .then(querySnapshot => {\n          //      const data = querySnapshot.docs.map(doc => doc.data());\n          //      profileData.music = {...data}\n          //      console.log(profileData)\n          //     // action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS,profileData))\n          //    }); \n\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS, { ...data\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_PROFILE_BY_ID:\n      {\n        db.collection(\"presentations\").where(\"id\", '==', action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS, ...data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS:\n      {\n        // let profileData = action.payload[0]\n        // if(profileData)\n        // db.collection(\"presentationmuic\")\n        // .where(\"pres_id\",'==',profileData.id)\n        //   .get()\n        //   .then(querySnapshot => {\n        //     const data = querySnapshot.docs.map(doc => doc.data());\n        //     profileData.music = {...data}\n        //     console.log(profileData)\n        //    // action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS,profileData))\n        //   }); \n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_MUSIC_PROFILE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Users/carlkalonzo/Documents/DEV/johandemeij/johan-app/src/redux/reducers/musicProfile.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","musicProfileReducer","state","action","type","LOAD_MUSIC_PROFILE","collection","where","payload","get","then","querySnapshot","mainData","data","docs","map","doc","console","log","asyncDispatch","LOAD_MUSIC_PROFILE_SUCCESS","LOAD_MUSIC_PROFILE_BY_ID","LOAD_MUSIC_PROFILE_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AAGA,eAAe,SAASC,mBAAT,CAA8BC,KAAK,GAAGF,YAAtC,EAAoDG,MAApD,EAA4D;AACvE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKR,OAAO,CAACS,kBAAb;AAAiC;AAEjCP,QAAAA,EAAE,CAACQ,UAAH,CAAc,eAAd,EACEC,KADF,CACQ,IADR,EACa,IADb,EACkBJ,MAAM,CAACK,OADzB,EAEIC,GAFJ,GAGIC,IAHJ,CAGSC,aAAa,IAAI;AACrB,cAAIC,QAAQ,GAAG,EAAf;AACA,gBAAMC,IAAI,GAAGF,aAAa,CAACG,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAD,UAAAA,QAAQ,GAAG,EAAC,GAAGC;AAAJ,WAAX;AACDI,UAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAJsB,CAMtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAICT,UAAAA,MAAM,CAACgB,aAAP,CAAqBtB,UAAU,CAACD,OAAO,CAACwB,0BAAT,EAAoC,EAAC,GAAGP;AAAJ,WAApC,CAA/B;AACD,SAtBJ;AAwBE,eAAOX,KAAP;AACD;;AACD,SAAKN,OAAO,CAACyB,wBAAb;AAAsC;AACpCvB,QAAAA,EAAE,CAACQ,UAAH,CAAc,eAAd,EACAC,KADA,CACM,IADN,EACW,IADX,EACgBJ,MAAM,CAACK,OADvB,EAEEC,GAFF,GAGEC,IAHF,CAGOC,aAAa,IAAI;AACrB,gBAAME,IAAI,GAAGF,aAAa,CAACG,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAV,UAAAA,MAAM,CAACgB,aAAP,CAAqBtB,UAAU,CAACD,OAAO,CAACwB,0BAAT,EAAoC,GAAGP,IAAvC,CAA/B;AACD,SANF;AAOA,eAAOX,KAAP;AACD;;AAED,SAAKN,OAAO,CAACwB,0BAAb;AAAyC;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAOjB,MAAM,CAACK,OAAd;AACD;;AACD,SAAKZ,OAAO,CAAC0B,uBAAb;AAAsC;AAEpC,eAAOpB,KAAP;AACD;;AAGD;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA/DJ;AAmED","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\"\nconst initialState = {\n   \n};\nexport default function musicProfileReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_MUSIC_PROFILE: {\n      \n      db.collection(\"presentations\")\n       .where(\"id\",'==',action.payload)\n         .get()\n         .then(querySnapshot => {\n           let mainData = [];\n           const data = querySnapshot.docs.map(doc => doc.data());\n           mainData = {...data}\n          console.log(mainData)\n\n          //  db.collection(\"presentationmuic\")\n          //  .where(\"pres_id\",'==',profileData.id)\n          //    .get()\n          //    .then(querySnapshot => {\n          //      const data = querySnapshot.docs.map(doc => doc.data());\n          //      profileData.music = {...data}\n          //      console.log(profileData)\n          //     // action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS,profileData))\n          //    }); \n\n\n\n           action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS,{...data}))\n         });\n     \n        return state\n      }\n      case ACTIONS.LOAD_MUSIC_PROFILE_BY_ID:{\n        db.collection(\"presentations\")\n       .where(\"id\",'==',action.payload)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => doc.data());\n           action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS,...data))\n         });\n        return state\n      }\n      \n      case ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS: {\n        \n        // let profileData = action.payload[0]\n        // if(profileData)\n        // db.collection(\"presentationmuic\")\n        // .where(\"pres_id\",'==',profileData.id)\n        //   .get()\n        //   .then(querySnapshot => {\n        //     const data = querySnapshot.docs.map(doc => doc.data());\n        //     profileData.music = {...data}\n        //     console.log(profileData)\n        //    // action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS,profileData))\n        //   }); \n        return action.payload\n      }\n      case ACTIONS.LOAD_MUSIC_PROFILE_FAIL: {\n\n        return state\n      }\n      \n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}