{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {\n  categories: [{\n    id: 1,\n    name: \"Compositions\"\n  }, {\n    id: 2,\n    name: \"Amstel Classics\"\n  }, {\n    id: 3,\n    name: \"Music for the Theatre\"\n  }, {\n    id: 4,\n    name: \"Symphony Orchestra\"\n  }, {\n    id: 5,\n    name: \"The Music of S&oslash;ren Hyldgaard\"\n  }, {\n    id: 6,\n    name: \"Solo Concertos\"\n  }, {\n    id: 9,\n    name: \"Cd's\"\n  }, {\n    id: 0,\n    name: \"All music\"\n  }],\n  allPresentations: []\n};\nexport default function musicReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_MUSIC:\n      {\n        //  fetch('http://127.0.0.1:5021/api/loadPresentations/0/0')\n        //   .then((data) => data.json())\n        //   .then((res) => {\n        //     action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,res.data))\n        //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_FAIL,err)))\n        db.collection(\"presentations\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.allPresentations = action.payload;\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_BY_CATEGORY:\n      {\n        // fetch('http://127.0.0.1:5021/api/filterPresentationCategory/'+action.payload)\n        // .then((data) => data.json())\n        // .then((res) => {\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS,res.data))\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_FAIL,err)))\n        let query = db.collection(\"presentations\");\n        if (action.payload) query = query.where(\"category\", \"==\", action.payload);\n        query.get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          console.log(data);\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.allPresentations = action.payload;\n        return stateCopy;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/music.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","categories","id","name","allPresentations","musicReducer","state","action","type","LOAD_MUSIC","collection","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_MUSIC_SUCCESS","stateCopy","cloneDeep","payload","LOAD_MUSIC_FAIL","LOAD_MUSIC_BY_CATEGORY","query","where","console","log","LOAD_MUSIC_BY_CATEGORY_SUCCESS"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\n\nconst initialState = {\n    categories:[\n        {id:1,name:\"Compositions\"},\n        {id:2,name:\"Amstel Classics\"},\n        {id:3,name:\"Music for the Theatre\"},\n        {id:4,name:\"Symphony Orchestra\"},\n        {id:5,name:\"The Music of S&oslash;ren Hyldgaard\"},\n        {id:6,name:\"Solo Concertos\"},\n        {id:9,name:\"Cd's\"},\n        {id:0,name:\"All music\"},\n    ],\n    allPresentations:[]\n};\nexport default function musicReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_MUSIC: {\n      //  fetch('http://127.0.0.1:5021/api/loadPresentations/0/0')\n      //   .then((data) => data.json())\n      //   .then((res) => {\n      //     action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,res.data))\n      //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_FAIL,err)))\n\n      db.collection(\"presentations\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,data))\n        });\n\n        return state\n      }\n      \n      case ACTIONS.LOAD_MUSIC_SUCCESS: {\n          let stateCopy = _.cloneDeep(state)\n          stateCopy.allPresentations = action.payload\n        return stateCopy\n      }\n      case ACTIONS.LOAD_MUSIC_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_MUSIC_BY_CATEGORY:{\n        // fetch('http://127.0.0.1:5021/api/filterPresentationCategory/'+action.payload)\n        // .then((data) => data.json())\n        // .then((res) => {\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS,res.data))\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_FAIL,err)))\n       \n\n        let query =  db.collection(\"presentations\")\n        if(action.payload)\n        query = query.where(\"category\",\"==\",action.payload)\n        query.get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          console.log(data)\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,data))\n        });\n         return state \n      }\n      case ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        stateCopy.allPresentations = action.payload\n         return stateCopy \n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}