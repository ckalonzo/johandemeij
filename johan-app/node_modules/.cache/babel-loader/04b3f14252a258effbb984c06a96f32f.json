{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database, db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function AllAgendasReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_ALL_AGENDAS:\n      {\n        const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload).endAt(action.payload);\n        agendaYearRef.on('value', (snap, i) => {\n          let agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            console.log(agenda.id, agenda.conductor);\n            if (agenda.month >= month || agenda.month >= +month && agenda.id > 0) return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS, agendas));\n        }); // db.collection(\"agendas\")\n        // .where(\"year\",\"==\",action.payload)\n        // .get()\n        // .then(querySnapshot => {\n        //   const data = querySnapshot.docs.map(doc => doc.data());\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,data))\n        // });\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_ALL_AGENDAS_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['month', 'day'], ['asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_ALL_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/allAgendas.reducer.js"],"names":["ACTIONS","mainAction","database","db","_","initialState","AllAgendasReducer","state","action","type","LOAD_ALL_AGENDAS","agendaYearRef","ref","orderByChild","startAt","payload","endAt","on","snap","i","agendas","data","val","Object","values","map","agenda","date","month","day","year","console","log","id","conductor","push","asyncDispatch","LOAD_ALL_AGENDAS_SUCCESS","orderBy","LOAD_ALL_AGENDAS_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,QAAT,EAAkBC,EAAlB,QAA4B,gBAA5B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA,eAAe,SAASC,iBAAT,CAA4BC,KAAK,GAAGF,YAApC,EAAkDG,MAAlD,EAA0D;AACrE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKT,OAAO,CAACU,gBAAb;AAA+B;AACjC,cAAMC,aAAa,GAAGT,QAAQ,CAACU,GAAT,CAAa,SAAb,EAAwBC,YAAxB,CAAqC,MAArC,EAA6CC,OAA7C,CAAqDN,MAAM,CAACO,OAA5D,EAAqEC,KAArE,CAA2ER,MAAM,CAACO,OAAlF,CAAtB;AACCJ,QAAAA,aAAa,CAACM,EAAd,CAAiB,OAAjB,EAAyB,CAACC,IAAD,EAAMC,CAAN,KAAU;AAElC,cAAIC,OAAO,GAAG,EAAd;AACA,gBAAMC,IAAI,GAAGH,IAAI,CAACI,GAAL,EAAb;AACAC,UAAAA,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoBI,GAApB,CAAwBC,MAAM,IAAE;AAC9BA,YAAAA,MAAM,CAACC,IAAP,GAAe,GAAED,MAAM,CAACE,KAAM,IAAGF,MAAM,CAACG,GAAI,IAAGH,MAAM,CAACI,IAAK,EAA3D;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACO,EAAnB,EAAsBP,MAAM,CAACQ,SAA7B;AACA,gBAAGR,MAAM,CAACE,KAAP,IAAgBA,KAAhB,IAAyBF,MAAM,CAACE,KAAP,IAAgB,CAACA,KAAjB,IAA2BF,MAAM,CAACO,EAAP,GAAY,CAAnE,EACA,OAAOb,OAAO,CAACe,IAAR,CAAaT,MAAb,CAAP;AACD,WALD;AAMClB,UAAAA,MAAM,CAAC4B,aAAP,CAAqBnC,UAAU,CAACD,OAAO,CAACqC,wBAAT,EAAkCjB,OAAlC,CAA/B;AACA,SAXF,EAFgC,CAe7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAOb,KAAP;AACD;;AACD,SAAKP,OAAO,CAACqC,wBAAb;AAAuC;AAErC,eAAOjC,CAAC,CAACkC,OAAF,CAAU9B,MAAM,CAACO,OAAjB,EAAyB,CAAC,OAAD,EAAS,KAAT,CAAzB,EAAyC,CAAC,KAAD,EAAO,KAAP,CAAzC,CAAP;AACD;;AACD,SAAKf,OAAO,CAACuC,qBAAb;AAAoC;AAElC,eAAOhC,KAAP;AACD;;AACD;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AApCJ;AAwCD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database,db } from \"../../firebase\";\nimport _ from \"lodash\"\nconst initialState = {\n};\nexport default function AllAgendasReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_ALL_AGENDAS: {\n    const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload).endAt(action.payload)\n     agendaYearRef.on('value',(snap,i)=>{\n    \n      let agendas = []\n      const data = snap.val()\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        console.log(agenda.id,agenda.conductor)\n        if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n        return agendas.push(agenda)\n      })\n       action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,agendas))\n      })\n        \n        // db.collection(\"agendas\")\n        // .where(\"year\",\"==\",action.payload)\n        // .get()\n        // .then(querySnapshot => {\n        //   const data = querySnapshot.docs.map(doc => doc.data());\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,data))\n        // });\n        \n        return state\n      }\n      case ACTIONS.LOAD_ALL_AGENDAS_SUCCESS: {\n      \n        return _.orderBy(action.payload,['month','day'],['asc','asc'])\n      }\n      case ACTIONS.LOAD_ALL_AGENDAS_FAIL: {\n\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}