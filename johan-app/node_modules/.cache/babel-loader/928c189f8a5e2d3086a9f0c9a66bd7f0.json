{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, storageRef, ref, storage } from \"../../firebase\";\nimport _ from \"lodash\";\nimport { createPresentation, updatePresentation, updatePresentationImage, uploadPresentationImage } from \"API/indexAPI\";\nconst initialState = {};\nexport default function presentationReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.DELETE_PRESENTATION_IMAGE:\n      {\n        console.log(action);\n        db.collection(\"postimages\").where('albumID', '==', action.payload.ID).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => {\n            console.log(doc.ref.id); // doc.ref.delete()\n          }); //  action.asyncDispatch(mainAction(ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS,action.payload))\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('posts/' + action.payload.name);\n        postImageRef.delete().then(() => console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, action.payload.ID));\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION_IMAGE_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"presentations\").add(stateCopy).then(function (docRef) {\n          stateCopy._id = docRef.id;\n          db.collection(\"presentations\").doc(docRef.id).update({\n            _id: docRef.id\n          }).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS, stateCopy));\n          });\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let _id = '';\n        db.collection(\"presentations\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            //  _id=doc.id\n            return doc.data();\n          });\n          stateCopy = data; //  stateCopy[0]._id = _id\n\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION:\n      {\n        console.log(action);\n        db.collection(\"presentations\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        updatePresentationImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE:\n      {\n        console.log(action);\n        let image = {\n          albumID: action.payload.albumID,\n          caption: action.payload.caption ? action.payload.caption : \"\",\n          cover: action.payload.cover ? action.payload.cover : \"\",\n          imageName: action.payload.image.name\n        };\n        let presentation = {};\n\n        if (action.payload.cover === \"frontCover\") {\n          presentation = {\n            frontCover: action.payload.image.name,\n            frontCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        } else {\n          presentation = {\n            backCover: action.payload.image.name,\n            backCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        }\n\n        db.collection(\"presentations\").doc(action.payload.docId).update(presentation).then(() => {\n          db.collection(\"postimages\").doc().set(image).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('posts/' + action.payload.image.name).put(action.payload.image);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('/posts').child(action.payload.image.name).getDownloadURL().then(url => {\n            console.log(url);\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        console.log(action);\n        let image = '';\n\n        if (action.submitted.cover === \"frontCover\") {\n          image = {\n            frontCover: action.json.data.filename,\n            frontCaption: action.submitted.caption\n          };\n        } else {\n          image = {\n            backCover: action.json.data.filename,\n            backCaption: action.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION, image));\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/presentation.reducer.js"],"names":["ACTIONS","mainAction","db","storageRef","ref","storage","_","createPresentation","updatePresentation","updatePresentationImage","uploadPresentationImage","initialState","presentationReducer","state","action","type","DELETE_PRESENTATION_IMAGE","console","log","collection","where","payload","ID","get","then","querySnapshot","forEach","doc","id","DELETE_PRESENTATION_IMAGE_SUCCESS","postImageRef","name","delete","asyncDispatch","LOAD_POST","DELETE_PRESENTATION_IMAGE_FAIL","CREATE_NEW_PUBLICATION","stateCopy","cloneDeep","add","docRef","_id","update","CREATE_NEW_PUBLICATION_SUCCESS","CREATE_NEW_PUBLICATION_FAIL","LOAD_PRESENTATION","data","docs","map","LOAD_PRESENTATION_SUCCESS","length","LOAD_PRESENTATION_FAIL","UPDATE_PUBLICATION","UPDATE_PUBLICATION_SUCCESS","UPDATE_PUBLICATION_FAIL","UPDATE_PRESENTATION_IMAGE","image","json","status","UPDATE_PRESENTATION_IMAGE_SUCCESS","submitted","UPDATE_PRESENTATION_IMAGE_FAIL","response","message","catch","err","newImage","albumID","caption","cover","imageName","filename","updatedAt","Date","now","currentID","UPDATE_POST_IMAGE","UPLOAD_PRESENTATION_IMAGE","presentation","frontCover","frontCaption","backCover","backCaption","docId","set","UPLOAD_PRESENTATION_IMAGE_SUCCESS","put","on","snapshot","error","child","getDownloadURL","url","UPLOAD_PRESENTATION_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db, storageRef , ref,storage} from \"../../firebase\";\nimport  _ from \"lodash\"\nimport {createPresentation,updatePresentation,updatePresentationImage,uploadPresentationImage} from \"API/indexAPI\"\nconst initialState = {};\nexport default function presentationReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.DELETE_PRESENTATION_IMAGE:{\n        console.log(action)\n        db.collection(\"postimages\")\n        .where('albumID','==',action.payload.ID)\n         .get()\n         .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=> {\n            console.log(doc.ref.id)\n            // doc.ref.delete()\n            })\n         //  action.asyncDispatch(mainAction(ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS,action.payload))\n         });\n        return state\n      }  \n      case ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS:{\n\n        let postImageRef = storage.ref('posts/'+action.payload.name)\n        postImageRef.delete().then(()=>console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,action.payload.ID))\n        return state\n      }  \n      case ACTIONS.DELETE_PRESENTATION_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n        case ACTIONS.CREATE_NEW_PUBLICATION: {\n          let stateCopy = _.cloneDeep(action.payload)\n      \n          db.collection(\"presentations\")\n            .add(stateCopy)\n            .then(function(docRef){\n              stateCopy._id = docRef.id\n              db.collection(\"presentations\")\n              .doc(docRef.id)\n              .update({_id:docRef.id}).then(()=>{\n                action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS,stateCopy))\n              });\n             \n            });\n        return stateCopy\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_PRESENTATION: {\n        let stateCopy = _.cloneDeep(state)\n        let _id = ''\n            db.collection(\"presentations\")\n            .where(\"id\",\"==\",action.payload)\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => {\n              //  _id=doc.id\n                return doc.data()});\n              stateCopy = data\n            //  stateCopy[0]._id = _id\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS,data))\n            });\n            return state\n        }\n        case  ACTIONS.LOAD_PRESENTATION_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_PRESENTATION_FAIL:{\n            return state\n        }\n        \n        case ACTIONS.UPDATE_PUBLICATION:{\n      console.log(action)\n        db.collection(\"presentations\")\n        .doc(action.payload._id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS,action.payload))\n        });\n        return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,stateCopy.id))\n        return {state,...action.payload}\n        }\n        case ACTIONS.UPDATE_PUBLICATION_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n            let stateCopy = _.cloneDeep(action.payload)\n             let image = stateCopy.image\n             updatePresentationImage(image).then((json)=>{\n    \n              if(json.status!==404 || json.status!==500) {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n              } else {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,json.response.message))\n              }\n            }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,err)))\n          \n            return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE:{\n         console.log(action)\n          let image = {\n            albumID: action.payload.albumID,\n            caption: action.payload.caption ? action.payload.caption :\"\",\n            cover: action.payload.cover ? action.payload.cover:\"\",\n            imageName:action.payload.image.name\n          }\n          let presentation= {}\n          if(action.payload.cover === \"frontCover\"){\n           presentation = {\n             frontCover : action.payload.image.name,\n             frontCaption:action.payload.caption ? action.payload.caption :\"\",\n           }\n          } else {\n            presentation = {\n              backCover : action.payload.image.name,\n              backCaption:action.payload.caption ? action.payload.caption :\"\",\n            }\n          }\n\n        db.collection(\"presentations\").doc(action.payload.docId)\n        .update(presentation).then(()=>{   \n            db.collection(\"postimages\")\n            .doc()\n            .set(image)\n            .then(() => {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS,action.payload))\n            });\n\n\n        });\n\n        \n         \n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:{\n          let postImageRef = storage.ref('posts/'+action.payload.image.name).put(action.payload.image);\n          postImageRef.on('state_changed',(snapshot)=>{\n            //progress function\n          },(error)=>{\n            //error\n            console.log(error)\n          },()=>{\n            //complete\n            storage.ref('/posts').child(action.payload.image.name).getDownloadURL().then(url=>{\n              console.log(url)\n            })\n          })\n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:{\n          return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n          console.log(action)\n          let image = ''\n          if(action.submitted.cover === \"frontCover\") {\n            image = {\n              frontCover:action.json.data.filename,\n              frontCaption:action.submitted.caption \n            }\n          } else {\n            image = {\n              backCover:action.json.data.filename,\n              backCaption:action.submitted.caption \n            }\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_PUBLICATION,image))\n          return state\n        }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}