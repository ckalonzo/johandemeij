{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database, db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nlet d = new Date();\nlet day = d.getDate();\nlet month = d.getMonth() + 1;\nlet year = d.getFullYear();\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"agendas\").add(stateCopy).then(function (docRef) {\n          console.log(docRef);\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"year\", \">=\", year.toString()).orderBy(\"year\", \"asc\").orderBy(\"month\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_CD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"year\", \">=\", year.toString()).orderBy(\"year\", \"desc\").orderBy(\"month\", \"desc\").orderBy(\"day\", \"desc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['month', 'day'], ['asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        db.collection(\"agendas\").where(\"year\", \"==\", year.toString()).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          let agendas = [];\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month; // console.log(agenda.month ,\">=\", month ,\"&&\", +agenda.day.replace(/^0+/, '') ,\">\", day)\n\n            if (+agenda.month >= +month) return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, agendas));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        db.collection(\"agendas\").where(\"year\", \"==\", action.payload.year.toString()).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          let agendas = [];\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => doc.data());\n          if (data.length > 0) action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...data\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return action.payload ? action.payload[0] : state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        let _id = '';\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload.id).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          db.collection(\"agendas\").doc(_id).update(action.payload).then(() => {\n            console.log(\"success\");\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Users/carlkalonzo/Documents/DEV/johandemeij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","database","db","_","initialState","d","Date","day","getDate","month","getMonth","year","getFullYear","agendaReducer","state","action","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","collection","add","then","docRef","console","log","_id","id","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","DELETE_AGENDA","where","get","querySnapshot","forEach","doc","ref","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","toString","orderBy","snapshot","data","docs","map","LOAD_CD_AGENDA_SUCCESS","LOAD_DASHBOARD_CD_AGENDA","LOAD_CD_AGENDA_FAIL","agendas","Object","values","agenda","date","push","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDAS_FILTERED","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","UPDATE_AGENDA","update","UPDATE_AGENDA_SUCCESS","UPDATE_AGENDA_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database,db} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nlet d = new Date();\nlet day = d.getDate();\nlet month = d.getMonth()+1;\nlet year = d.getFullYear()\nexport default function agendaReducer (state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n\n    let stateCopy = _.cloneDeep(action.payload)\n        db.collection(\"agendas\")\n          .add(stateCopy)\n          .then(function(docRef){\n            console.log(docRef)\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n          });\n    return state\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.DELETE_AGENDA:{\n    db.collection(\"agendas\")\n    .where('id','==',action.payload)\n     .get()\n     .then((querySnapshot) => {\n       querySnapshot.forEach((doc)=> doc.ref.delete())\n       action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n     });\n\n    return state\n    }  \n    case ACTIONS.DELETE_AGENDA_SUCCESS:{\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n    return state\n    }  \n    case ACTIONS.LOAD_CD_AGENDA: {\n    db.collection(\"agendas\")\n    .where(\"year\",\">=\",year.toString())\n    .orderBy(\"year\",\"asc\")\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_DASHBOARD_CD_AGENDA: {\n      db.collection(\"agendas\")\n      .where(\"year\",\">=\",year.toString())\n      .orderBy(\"year\",\"desc\")\n      .orderBy(\"month\",\"desc\")\n      .orderBy(\"day\",\"desc\")\n      .get()\n      .then(snapshot => {\n        const data = snapshot.docs.map(doc => {return doc.data()});\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n      })\n    return state\n    }\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n    return _.orderBy(action.payload,['month','day'],['asc','asc'])\n    }\n    case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS: {\n\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",year.toString())\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      let agendas = []\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n       // console.log(agenda.month ,\">=\", month ,\"&&\", +agenda.day.replace(/^0+/, '') ,\">\", day)\n       if(+agenda.month >= +month )\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,agendas))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDAS_FAIL:{\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",action.payload.year.toString())\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      let agendas = []\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n      return action.payload\n    }\n    case ACTIONS.LOAD_AGENDA:{\n    db.collection(\"agendas\")\n    .where(\"id\",\"==\",action.payload)\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => doc.data());\n      if(data.length > 0)\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...data}))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA_SUCCESS:{\n\n     return action.payload ? action.payload[0] : state\n\n    }\n    case ACTIONS.LOAD_AGENDA_FAIL:{\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA:{\n      let _id =''\n      db.collection(\"agendas\")\n    .where(\"id\",\"==\",action.payload.id)\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {\n        _id = doc.id\n        return doc.data()});\n        db.collection(\"agendas\").doc(_id)\n        .update(action.payload).then(()=>{\n          console.log(\"success\")\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n     });\n    })\n     \n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n    let stateCopy = _.cloneDeep(action.payload)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n    return stateCopy\n    }\n    case ACTIONS.UPDATE_AGENDA_FAIL:{\n   \n    return state\n    }\n    default: \n      return {\n        ...state\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}