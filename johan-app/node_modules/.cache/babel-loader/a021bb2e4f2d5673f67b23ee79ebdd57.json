{"ast":null,"code":"import _objectSpread from\"/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import{db}from\"../../firebase\";import _ from'lodash';var initialState={categories:[{id:1,name:\"Compositions\"},{id:2,name:\"Amstel Classics\"},{id:3,name:\"Music for the Theatre\"},{id:4,name:\"Symphony Orchestra\"},{id:5,name:\"The Music of S&oslash;ren Hyldgaard\"},{id:6,name:\"Solo Concertos\"},{id:9,name:\"Cd's\"},{id:0,name:\"All music\"}],allPresentations:[]};export default function musicReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.LOAD_MUSIC:{db.collection(\"presentations\").orderBy('cdName','asc').get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,data));});return state;}case ACTIONS.LOAD_MUSIC_SUCCESS:{var stateCopy=_.cloneDeep(state);stateCopy.allPresentations=action.payload;return stateCopy;}case ACTIONS.LOAD_MUSIC_FAIL:{return state;}case ACTIONS.LOAD_MUSIC_BY_CATEGORY:{db.collection(\"presentations\").where(\"category\",\"==\",action.payload.toString()).orderBy('cdName','asc').get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,data));});return state;}case ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS:{var _stateCopy=_.cloneDeep(state);_stateCopy.allPresentations=action.payload;return _stateCopy;}default:return _objectSpread({},state);}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/music.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","categories","id","name","allPresentations","musicReducer","state","action","type","LOAD_MUSIC","collection","orderBy","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_MUSIC_SUCCESS","stateCopy","cloneDeep","payload","LOAD_MUSIC_FAIL","LOAD_MUSIC_BY_CATEGORY","where","toString","LOAD_MUSIC_BY_CATEGORY_SUCCESS"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\n\nconst initialState = {\n    categories:[\n        {id:1,name:\"Compositions\"},\n        {id:2,name:\"Amstel Classics\"},\n        {id:3,name:\"Music for the Theatre\"},\n        {id:4,name:\"Symphony Orchestra\"},\n        {id:5,name:\"The Music of S&oslash;ren Hyldgaard\"},\n        {id:6,name:\"Solo Concertos\"},\n        {id:9,name:\"Cd's\"},\n        {id:0,name:\"All music\"},\n    ],\n    allPresentations:[]\n};\nexport default function musicReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_MUSIC: {\n      db.collection(\"presentations\")\n      .orderBy('cdName', 'asc')\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,data))\n        });\n        return state\n      }\n      case ACTIONS.LOAD_MUSIC_SUCCESS: {\n          let stateCopy = _.cloneDeep(state)\n          stateCopy.allPresentations = action.payload\n        return stateCopy\n      }\n      case ACTIONS.LOAD_MUSIC_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_MUSIC_BY_CATEGORY:{\n\n        db.collection(\"presentations\")\n        .where(\"category\",\"==\", action.payload.toString())\n        .orderBy('cdName', 'asc')\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,data))\n        });\n         return state \n      }\n      case ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        stateCopy.allPresentations = action.payload\n         return stateCopy \n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}