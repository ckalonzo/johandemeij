{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function cdInfoReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_INFO:\n      {\n        let stateCopy = []; //=======================================================\n\n        db.collection(\"cd_info\").where(\"cdId\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n          stateCopy.map((cdinfo, i) => {\n            //=======================================================\n            db.collection(\"presentations\").where(\"id\", \"==\", cdinfo.track_title).get().then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n              stateCopy[i].presentationData = { ...data[0]\n              };\n            }); //========================================================\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS, stateCopy));\n        }); //=======================================================\n\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cdInfo.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","cdInfoReducer","state","action","type","LOAD_CD_INFO","stateCopy","collection","where","payload","get","then","querySnapshot","data","docs","map","doc","cdinfo","i","track_title","presentationData","asyncDispatch","LOAD_CD_INFO_SUCCESS","cloneDeep","LOAD_CD_INFO_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,OAAQC,CAAR,MAAe,QAAf;AACA,MAAMC,YAAY,GAAG,EAArB;AAGA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AAEjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKR,OAAO,CAACS,YAAb;AAA2B;AAEzB,YAAIC,SAAS,GAAG,EAAhB,CAFyB,CAGzB;;AACAR,QAAAA,EAAE,CAACS,UAAH,CAAc,SAAd,EACCC,KADD,CACO,MADP,EACc,IADd,EACmBL,MAAM,CAACM,OAD1B,EAEAC,GAFA,GAGAC,IAHA,CAGKC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,UAAAA,SAAS,GAACO,IAAV;AACAP,UAAAA,SAAS,CAACS,GAAV,CAAc,CAACE,MAAD,EAAQC,CAAR,KAAY;AACxB;AACApB,YAAAA,EAAE,CAACS,UAAH,CAAc,eAAd,EACCC,KADD,CACO,IADP,EACY,IADZ,EACiBS,MAAM,CAACE,WADxB,EAECT,GAFD,GAGCC,IAHD,CAGMC,aAAa,IAAI;AACrB,oBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,cAAAA,SAAS,CAACY,CAAD,CAAT,CAAaE,gBAAb,GAAgC,EAAC,GAAGP,IAAI,CAAC,CAAD;AAAR,eAAhC;AACD,aAND,EAFwB,CASzB;AACD,WAVA;AAWDV,UAAAA,MAAM,CAACkB,aAAP,CAAqBxB,UAAU,CAACD,OAAO,CAAC0B,oBAAT,EAA8BhB,SAA9B,CAA/B;AACA,SAlBA,EAJyB,CAuBzB;;AAEA,eAAOA,SAAP;AACD;;AACD,SAAKV,OAAO,CAAC0B,oBAAb;AAAmC;AACjC,YAAIhB,SAAS,GAAGP,CAAC,CAACwB,SAAF,CAAYpB,MAAM,CAACM,OAAnB,CAAhB;;AACA,eAAOH,SAAP;AACD;;AACD,SAAKV,OAAO,CAAC4B,iBAAb;AAAgC;AAE9B,eAAOtB,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AAvCJ;AA2CD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport  _ from \"lodash\"\nconst initialState = {\n\n}\nexport default function cdInfoReducer (state = initialState, action) {\n   \n    switch (action.type) {\n  \n      case ACTIONS.LOAD_CD_INFO: {\n\n        let stateCopy = []\n        //=======================================================\n        db.collection(\"cd_info\")\n        .where(\"cdId\",\"==\",action.payload)\n       .get()\n       .then(querySnapshot => {\n         const data = querySnapshot.docs.map(doc => doc.data());\n         stateCopy=data;\n         stateCopy.map((cdinfo,i)=>{\n           //=======================================================\n           db.collection(\"presentations\")\n           .where(\"id\",\"==\",cdinfo.track_title)\n           .get()\n           .then(querySnapshot => {\n             const data = querySnapshot.docs.map(doc => doc.data());\n             stateCopy[i].presentationData = {...data[0]}\n           });\n          //========================================================\n        })\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS,stateCopy))\n       });\n        //=======================================================\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_INFO_SUCCESS: {\n        let stateCopy = _.cloneDeep(action.payload)\n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_INFO_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}