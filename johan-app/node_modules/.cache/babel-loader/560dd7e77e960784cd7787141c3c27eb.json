{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        fetch('http://127.0.0.1:5021/api/loadAgendasByPage/' + action.payload.skip + \"/\" + action.payload.limit).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, res.data));\n          stateCopy.agendaTotal = res.data.length;\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\").where(\"year\", '==', year).where(\"month\", '>=', month).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              return post.title = title[0];\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        stateCopy.map((agenda, i) => {\n          db.collection(\"presentations\").where(\"id\", \"==\", agenda.cd.toString()).get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            agenda.title = data[0].cdName;\n          });\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","_","cloneDeep","fetch","payload","skip","limit","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","agendaTotal","length","catch","err","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","agendas","d","Date","day","getDay","month","getMonth","toString","year","getFullYear","collection","where","get","querySnapshot","docs","map","doc","post","i","title","filter","presentation","id","cd","cdName","LOAD_AGENDAS_SUCCESS","agenda","LOAD_AGENDAS_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n        let stateCopy = _.cloneDeep(state)\n       fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n          stateCopy.agendaTotal = res.data.length\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       .where(\"year\",'==',year)\n       .where(\"month\",'>=',month)\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n             \n              return post.title = title[0]\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        \n        stateCopy.map((agenda,i)=>{\n          \n          db.collection(\"presentations\")\n          .where(\"id\",\"==\",agenda.cd.toString())\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            agenda.title=data[0].cdName\n          });\n        })\n\n        return action.payload\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}