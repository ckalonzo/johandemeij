{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"agendas\").add({\n          stateCopy\n        }).then(data => {\n          console.log(data.id, data.parent, data.path);\n          db.collection(\"agendas\").doc(docRef.id).update({\n            _id: data.id\n          }).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n          });\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        //   console.log(action)\n        // let stateCopy = []\n        // db.collection(\"agendas\")\n        // .where(\"year\",\"==\",action.payload.year)\n        // .orderBy('month','desc')\n        // .get()\n        // .then(querySnapshot => {\n        //   const data = querySnapshot.docs.map(doc => doc.data());\n        //   data.map((newData,i)=>{\n        //     if(i < action.payload.limit && i > action.payload.skip)\n        //     stateCopy.push(newData)\n        //   })\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n        // });\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = [];\n        db.collection(\"agendas\").where(\"year\", '==', year) //.where(\"month\",'>=',month)\n        .orderBy(\"month\", \"desc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          data.map((newData, i) => {\n            if (i < action.payload.limit && i > action.payload.skip) stateCopy.push(newData);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, stateCopy));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              post.title = title[0];\n              post.date = `${post.year}-${post.month}-${post.day}`;\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n\n          if (data.length > 0) {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, data));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL, {\n              error: \"Failed to retrieve agenda\"\n            }));\n          }\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return { ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        console.log(action);\n        db.collection(\"agendas\").doc(action.payload.id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.AGENDA, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","collection","add","then","data","console","log","id","parent","path","doc","docRef","update","_id","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","DELETE_AGENDA","where","get","querySnapshot","forEach","ref","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","agendas","d","Date","day","getDay","month","getMonth","toString","year","getFullYear","orderBy","docs","map","newData","i","limit","skip","push","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","post","title","filter","presentation","cd","cdName","date","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","error","UPDATE_AGENDA","UPDATE_AGENDA_SUCCESS","AGENDA"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_AGENDA:{\n        let stateCopy = _.cloneDeep(action.payload)\n        db.collection(\"agendas\")\n        .add({stateCopy}).then((data)=>{\n          console.log(data.id,data.parent,data.path)\n          db.collection(\"agendas\")\n          .doc(docRef.id)\n          .update({_id:data.id}).then(()=>{\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n          });\n        })\n      return stateCopy\n      }\n      case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n        return action.payload\n      }\n      case ACTIONS.DELETE_AGENDA:{\n\n        db.collection(\"agendas\")\n        .where('id','==',action.payload)\n         .get()\n         .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=> doc.ref.delete())\n           action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n         });\n       return state\n     }  \n     case ACTIONS.DELETE_AGENDA_SUCCESS:{\n       action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n       return state\n     }  \n      case ACTIONS.LOAD_CD_AGENDA: {\n      //   console.log(action)\n      // let stateCopy = []\n      // db.collection(\"agendas\")\n      // .where(\"year\",\"==\",action.payload.year)\n      // .orderBy('month','desc')\n      // .get()\n      // .then(querySnapshot => {\n      //   const data = querySnapshot.docs.map(doc => doc.data());\n\n      //   data.map((newData,i)=>{\n      //     if(i < action.payload.limit && i > action.payload.skip)\n      //     stateCopy.push(newData)\n      //   })\n      //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n      // });\n      \n      let agendas = []\n      let d = new Date();\n      let day = d.getDay();\n      let month = (d.getMonth() + 1).toString()\n      let year = d.getFullYear().toString();\n\n       let stateCopy = []\n       db.collection(\"agendas\")\n     .where(\"year\",'==',year)\n    //.where(\"month\",'>=',month)\n   .orderBy(\"month\",\"desc\")\n    .orderBy(\"day\",\"asc\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        data.map((newData,i)=>{\n          if(i < action.payload.limit && i > action.payload.skip)\n          stateCopy.push(newData)\n        })\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n      });\n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n              post.title = title[0]; \n              post.date=`${post.year}-${post.month}-${post.day}`\n              return post\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_AGENDA:{\n       \n      db.collection(\"agendas\")\n      .where(\"id\",\"==\",action.payload)\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        if(data.length > 0){\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,data))\n        } else {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL,{error:\"Failed to retrieve agenda\"}))\n        }\n      });\n      return state\n      }\n      case ACTIONS.LOAD_AGENDA_SUCCESS:{\n        return {...action.payload[0]}\n      }\n      case ACTIONS.LOAD_AGENDA_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_AGENDA:{\n        console.log(action)\n          db.collection(\"agendas\")\n          .doc(action.payload.id)\n          .update(action.payload).then(()=>{\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n          });\n          return state\n          }\n          case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          action.asyncDispatch(mainAction(ACTIONS.AGENDA,stateCopy.id))\n          return {state,...action.payload}\n          }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}