{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, database } from \"../../firebase\";\nconst initialState = {};\nexport default function contactUsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.SUBMIT_CONTACT_INFO:\n      {\n        let stateCopy = action.payload;\n        const contactRef = database.ref('contact');\n        contactRef.child(stateCopy.id).set(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.SUBMIT_CONTACT_INFO_SUCCESS, action.payload));\n        }).catch(() => {\n          action.asyncDispatch(mainAction(ACTIONS.SUBMIT_CONTACT_INFO_FAIL, {\n            error: \"could not create contact\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.SUBMIT_CONTACT_INFO_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.SUBMIT_CONTACT_INFO_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_CONTACTS:\n      {\n        var contactsRef = database.ref('contact');\n        contactsRef.on('value', (snap, i) => {\n          const data = snap.val();\n          let contacts = [];\n          Object.values(data).map(contact => {\n            contacts.push(contact);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CONTACTS_SUCCESS, { ...contacts\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CONTACTS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CONTACTS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/contactUs.reducer.js"],"names":["ACTIONS","mainAction","db","database","initialState","contactUsReducer","state","action","type","SUBMIT_CONTACT_INFO","stateCopy","payload","contactRef","ref","child","id","set","then","asyncDispatch","SUBMIT_CONTACT_INFO_SUCCESS","catch","SUBMIT_CONTACT_INFO_FAIL","error","LOAD_CONTACTS","contactsRef","on","snap","i","data","val","contacts","Object","values","map","contact","push","LOAD_CONTACTS_SUCCESS","LOAD_CONTACTS_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,EAAYC,QAAZ,QAA4B,gBAA5B;AACA,MAAMC,YAAY,GAAG,EAArB;AAGA,eAAe,SAASC,gBAAT,CAA2BC,KAAK,GAAGF,YAAnC,EAAiDG,MAAjD,EAAyD;AACpE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKR,OAAO,CAACS,mBAAb;AAAkC;AAChC,YAAIC,SAAS,GAAGH,MAAM,CAACI,OAAvB;AACA,cAAMC,UAAU,GAAGT,QAAQ,CAACU,GAAT,CAAa,SAAb,CAAnB;AACAD,QAAAA,UAAU,CAACE,KAAX,CAAiBJ,SAAS,CAACK,EAA3B,EAA+BC,GAA/B,CAAmCT,MAAM,CAACI,OAA1C,EAAmDM,IAAnD,CAAwD,MAAI;AAC1DV,UAAAA,MAAM,CAACW,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACmB,2BAAT,EAAqCZ,MAAM,CAACI,OAA5C,CAA/B;AACD,SAFD,EAGCS,KAHD,CAGO,MAAI;AACTb,UAAAA,MAAM,CAACW,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACqB,wBAAT,EAAkC;AAACC,YAAAA,KAAK,EAAC;AAAP,WAAlC,CAA/B;AACD,SALD;AAMA,eAAOhB,KAAP;AACD;;AACD,SAAMN,OAAO,CAACmB,2BAAd;AAA2C;AACzC,eAAOZ,MAAM,CAACI,OAAd;AACD;;AACD,SAAMX,OAAO,CAACqB,wBAAd;AAAwC;AAEtC,eAAOf,KAAP;AACD;;AACD,SAAMN,OAAO,CAACuB,aAAd;AAA6B;AAC3B,YAAIC,WAAW,GAAGrB,QAAQ,CAACU,GAAT,CAAa,SAAb,CAAlB;AACHW,QAAAA,WAAW,CAACC,EAAZ,CAAe,OAAf,EAAuB,CAACC,IAAD,EAAMC,CAAN,KAAU;AAEhC,gBAAMC,IAAI,GAAGF,IAAI,CAACG,GAAL,EAAb;AACA,cAAIC,QAAQ,GAAE,EAAd;AACAC,UAAAA,MAAM,CAACC,MAAP,CAAcJ,IAAd,EAAoBK,GAApB,CAAwBC,OAAO,IAAE;AAC/BJ,YAAAA,QAAQ,CAACK,IAAT,CAAcD,OAAd;AACD,WAFD;AAGA3B,UAAAA,MAAM,CAACW,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACoC,qBAAT,EAA+B,EAAC,GAAGN;AAAJ,WAA/B,CAA/B;AACC,SARF;AASG,eAAOxB,KAAP;AACD;;AACD,SAAMN,OAAO,CAACoC,qBAAd;AAAqC;AAEnC,eAAO7B,MAAM,CAACI,OAAd;AACD;;AACD,SAAMX,OAAO,CAACqC,kBAAd;AAAkC;AAEhC,eAAO/B,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA3CJ;AA+CD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db,database } from \"../../firebase\";\nconst initialState = {\n   \n};\nexport default function contactUsReducer (state = initialState, action) {\n    switch (action.type) {\n \n      case ACTIONS.SUBMIT_CONTACT_INFO: {\n        let stateCopy = action.payload\n        const contactRef = database.ref('contact')\n        contactRef.child(stateCopy.id).set(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.SUBMIT_CONTACT_INFO_SUCCESS,action.payload))\n        })\n        .catch(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.SUBMIT_CONTACT_INFO_FAIL,{error:\"could not create contact\"}))\n        });\n        return state\n      }\n      case  ACTIONS.SUBMIT_CONTACT_INFO_SUCCESS: {\n        return action.payload\n      }\n      case  ACTIONS.SUBMIT_CONTACT_INFO_FAIL: {\n\n        return state\n      }\n      case  ACTIONS.LOAD_CONTACTS: {\n        var contactsRef = database.ref('contact')\n     contactsRef.on('value',(snap,i)=>{\n    \n      const data = snap.val()\n      let contacts =[]\n      Object.values(data).map(contact=>{\n        contacts.push(contact)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CONTACTS_SUCCESS,{...contacts}))\n      })\n        return state\n      }\n      case  ACTIONS.LOAD_CONTACTS_SUCCESS: {\n\n        return action.payload\n      }\n      case  ACTIONS.LOAD_CONTACTS_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}