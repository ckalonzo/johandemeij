{"ast":null,"code":"import _objectSpread from\"/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ACTIONS}from'redux/actions/types.js';import{updatePost}from'API/indexAPI';import{mainAction}from\"redux/actions/index.actions\";import{updatePostImage,createPost,uploadPostImage,createPostImage,deletePostImage,deletePost}from\"API/indexAPI\";import{db}from\"../../firebase\";import _ from'lodash';import{NavDropdown}from'react-bootstrap';var initialState={currentID:''};export default function singlePostReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.CREATE_NEW_POST_IMAGE:{createPostImage(action.payload).then(function(json){action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS,json));}).catch(function(err){action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_FAIL,err));});return state;}case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:{var stateCopy=_.cloneDeep(state);action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID));return state;}case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:{return state;}case ACTIONS.CREATE_NEW_POST:{var _stateCopy=_.cloneDeep(action.payload);db.collection(\"posts\").add(_stateCopy).then(function(docRef){console.log(docRef);_stateCopy._id=docRef.id;action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,_stateCopy));});return _stateCopy;}case ACTIONS.CREATE_NEW_POST_SUCCESS:{return action.payload;}case ACTIONS.CREATE_NEW_POST_FAIL:{return state;}case ACTIONS.DELETE_POST:{db.collection(\"posts\").remove(\"ID\",'==',parseInt(action.payload,10)).get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});});return state;}case ACTIONS.DELETE_POST_SUCCESS:{action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS,[]));return state;}case ACTIONS.DELETE_POST_FAIL:{return action.payload;}case ACTIONS.DELETE_POST_IMAGE:{var _stateCopy2=_.cloneDeep(state);deletePostImage(action.payload.image).then(function(json){action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS,json));}).catch(function(err){action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_FAIL,err));});_stateCopy2.currentID=action.payload.post;return _stateCopy2;}case ACTIONS.DELETE_POST_IMAGE_SUCCESS:{var _stateCopy3=_.cloneDeep(state);action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,_stateCopy3.ID));return state;}case ACTIONS.DELETE_POST_IMAGE_FAIL:{return action.payload;}case ACTIONS.LOAD_ARTICLE:{return action.payload;}case ACTIONS.LOAD_POST:{var post_id='';//////====>\ndb.collection(\"posts\")//.where(\"ID\",'==',action.payload)\n.where(\"ID\",'==',action.payload).get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){post_id=doc.id;return doc.data();});var stateCopy=_.cloneDeep(data);if(stateCopy[0])stateCopy[0]._id=post_id;var _id='';action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy));//=======================================================\ndb.collection(\"postimages\").where(\"albumID\",'==',action.payload).get().then(function(snapshotChanges){var data=snapshotChanges.docs.map(function(doc){_id=doc.id;return doc.data();});stateCopy.map(function(post,i){//    data[0]._id =  _id\nreturn stateCopy[i].image=data;});if(snapshotChanges.size>0){action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy));}else{action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,{error:\"could not find this record\"}));}});//========================================================\n});//////====>\nreturn state;}case ACTIONS.LOAD_POST_SUCCESS:{return _objectSpread({state:state},action.payload[0]);}case ACTIONS.LOAD_POST_FAIL:{return state;}case ACTIONS.UPDATE_POST:{db.collection(\"posts\").doc(action.payload._id).update(action.payload).then(function(){action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,action.payload));});return state;}case ACTIONS.UPDATE_POST_SUCCESS:{var _stateCopy4=_.cloneDeep(state);action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,_stateCopy4.ID));return _objectSpread({state:state},action.payload);}case ACTIONS.UPDATE_POST_FAIL:{return state;}case ACTIONS.UPLOAD_IMAGE:{var _stateCopy5=_.cloneDeep(action.payload);var image=_stateCopy5.image;uploadPostImage(image).then(function(json){if(json.status!==404||json.status!==500){action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:_stateCopy5,json:json}));}else{action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message));}}).catch(function(err){return action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err));});return state;}case ACTIONS.UPLOAD_IMAGE_SUCCESS:{var _stateCopy6=_.cloneDeep(state);var newImage={_id:action.payload.submitted._id,albumID:action.payload.submitted.albumID,caption:action.payload.submitted.caption,cover:action.payload.submitted.cover,imageName:action.payload.json.data.filename,updatedAt:Date.now()};_stateCopy6.currentID=action.payload.submitted.albumID;action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE,newImage));return _stateCopy6;}case ACTIONS.UPLOAD_IMAGE_FAIL:{return state;}case ACTIONS.UPDATE_POST_IMAGE:{updatePostImage(action.payload).then(function(json){action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json));}).catch(function(err){action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL,err));});return state;}case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{var _stateCopy7=_.cloneDeep(state);action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,_stateCopy7.ID));return state;}case ACTIONS.UPDATE_POST_IMAGE_FAIL:{return state;}case ACTIONS.UPLOAD_POST_IMAGE:{db.collection(\"postimages\").doc().set(action.payload).then(function(){console.log(action.payload);action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS,action.payload));});return state;}case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:{var _stateCopy8=_.cloneDeep(state);var _newImage={albumID:action.payload.submitted.albumID,caption:action.payload.submitted.caption,cover:action.payload.submitted.cover,imageName:action.payload.json.data.filename};_stateCopy8.currentID=action.payload.submitted.albumID;action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE,_newImage));return state;}case ACTIONS.UPLOAD_POST_IMAGE_FAIL:{return state;}default:return state;}}//No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","updatePostImage","createPost","uploadPostImage","createPostImage","deletePostImage","deletePost","db","_","NavDropdown","initialState","currentID","singlePostReducer","state","action","type","CREATE_NEW_POST_IMAGE","payload","then","json","asyncDispatch","CREATE_NEW_POST_IMAGE_SUCCESS","catch","err","CREATE_NEW_POST_IMAGE_FAIL","stateCopy","cloneDeep","LOAD_POST","ID","CREATE_NEW_POST","collection","add","docRef","console","log","_id","id","CREATE_NEW_POST_SUCCESS","CREATE_NEW_POST_FAIL","DELETE_POST","remove","parseInt","get","querySnapshot","data","docs","map","doc","DELETE_POST_SUCCESS","LOAD_DASHBOARD_POSTS","DELETE_POST_FAIL","DELETE_POST_IMAGE","image","DELETE_POST_IMAGE_SUCCESS","DELETE_POST_IMAGE_FAIL","post","LOAD_ARTICLE","post_id","where","LOAD_POST_SUCCESS","snapshotChanges","i","size","LOAD_POST_FAIL","error","UPDATE_POST","update","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","UPLOAD_POST_IMAGE","set","UPLOAD_POST_IMAGE_SUCCESS","UPLOAD_POST_IMAGE_FAIL"],"mappings":"gLAAA,OAASA,OAAT,KAAwB,wBAAxB,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,OAASC,UAAT,KAA2B,6BAA3B,CACA,OAAQC,eAAR,CAAwBC,UAAxB,CAAmCC,eAAnC,CAAmDC,eAAnD,CAAmEC,eAAnE,CAAmFC,UAAnF,KAAoG,cAApG,CACA,OAASC,EAAT,KAAmB,gBAAnB,CACA,MAAOC,CAAAA,CAAP,KAAc,QAAd,CACA,OAASC,WAAT,KAA4B,iBAA5B,CACA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,SAAS,CAAC,EADS,CAArB,CAGA,cAAe,SAASC,CAAAA,iBAAT,EAA0D,IAA9BC,CAAAA,KAA8B,2DAAtBH,YAAsB,IAARI,CAAAA,MAAQ,2CACrE,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKjB,CAAAA,OAAO,CAACkB,qBAAb,CAAmC,CACjCZ,eAAe,CAACU,MAAM,CAACG,OAAR,CAAf,CAAgCC,IAAhC,CAAqC,SAAAC,IAAI,CAAI,CAC3CL,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAAEF,OAAO,CAACuB,6BAAV,CAAwCF,IAAxC,CAA/B,EACD,CAFD,EAEGG,KAFH,CAES,SAAAC,GAAG,CAAG,CACbT,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAAEF,OAAO,CAAC0B,0BAAV,CAAqCD,GAArC,CAA/B,EACD,CAJD,EAKA,MAAOV,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACuB,6BAAb,CAA2C,CACzC,GAAII,CAAAA,SAAS,CAAGjB,CAAC,CAACkB,SAAF,CAAYb,KAAZ,CAAhB,CACAC,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAAC6B,SAAT,CAAmBF,SAAS,CAACG,EAA7B,CAA/B,EACA,MAAOf,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAAC0B,0BAAb,CAAwC,CACtC,MAAOX,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAAC+B,eAAb,CAA8B,CAC5B,GAAIJ,CAAAA,UAAS,CAAGjB,CAAC,CAACkB,SAAF,CAAYZ,MAAM,CAACG,OAAnB,CAAhB,CAEAV,EAAE,CAACuB,UAAH,CAAc,OAAd,EACGC,GADH,CACON,UADP,EAEGP,IAFH,CAEQ,SAASc,MAAT,CAAgB,CACpBC,OAAO,CAACC,GAAR,CAAYF,MAAZ,EACAP,UAAS,CAACU,GAAV,CAAgBH,MAAM,CAACI,EAAvB,CACAtB,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAACuC,uBAAT,CAAiCZ,UAAjC,CAA/B,EACD,CANH,EAOA,MAAOA,CAAAA,UAAP,CACD,CACD,IAAK3B,CAAAA,OAAO,CAACuC,uBAAb,CAAsC,CACpC,MAAOvB,CAAAA,MAAM,CAACG,OAAd,CACD,CACD,IAAKnB,CAAAA,OAAO,CAACwC,oBAAb,CAAmC,CACjC,MAAOzB,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACyC,WAAb,CAAyB,CAEtBhC,EAAE,CAACuB,UAAH,CAAc,OAAd,EACCU,MADD,CACQ,IADR,CACa,IADb,CACkBC,QAAQ,CAAC3B,MAAM,CAACG,OAAR,CAAgB,EAAhB,CAD1B,EAEEyB,GAFF,GAGExB,IAHF,CAGO,SAAAyB,aAAa,CAAI,CACrB,GAAMC,CAAAA,IAAI,CAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuB,SAAAC,GAAG,CAAI,CAE1C,MAAOA,CAAAA,GAAG,CAACH,IAAJ,EAAP,CAAkB,CAFN,CAAb,CAGD,CAPF,EASD,MAAO/B,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACkD,mBAAb,CAAiC,CAC/BlC,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAACmD,oBAAT,CAA8B,EAA9B,CAA/B,EACA,MAAOpC,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACoD,gBAAb,CAA8B,CAC5B,MAAOpC,CAAAA,MAAM,CAACG,OAAd,CACD,CACD,IAAKnB,CAAAA,OAAO,CAACqD,iBAAb,CAA+B,CAE7B,GAAI1B,CAAAA,WAAS,CAAGjB,CAAC,CAACkB,SAAF,CAAYb,KAAZ,CAAhB,CACAR,eAAe,CAACS,MAAM,CAACG,OAAP,CAAemC,KAAhB,CAAf,CACClC,IADD,CACM,SAACC,IAAD,CAAQ,CACZL,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAACuD,yBAAT,CAAmClC,IAAnC,CAA/B,EACD,CAHD,EAICG,KAJD,CAIO,SAAAC,GAAG,CAAE,CACVT,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAACwD,sBAAT,CAAgC/B,GAAhC,CAA/B,EACD,CAND,EAOAE,WAAS,CAACd,SAAV,CAAsBG,MAAM,CAACG,OAAP,CAAesC,IAArC,CACA,MAAO9B,CAAAA,WAAP,CACD,CACD,IAAK3B,CAAAA,OAAO,CAACuD,yBAAb,CAAuC,CAErC,GAAI5B,CAAAA,WAAS,CAAGjB,CAAC,CAACkB,SAAF,CAAYb,KAAZ,CAAhB,CACAC,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAAC6B,SAAT,CAAmBF,WAAS,CAACG,EAA7B,CAA/B,EAEA,MAAOf,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACwD,sBAAb,CAAoC,CAElC,MAAOxC,CAAAA,MAAM,CAACG,OAAd,CACD,CACD,IAAKnB,CAAAA,OAAO,CAAC0D,YAAb,CAA0B,CACxB,MAAO1C,CAAAA,MAAM,CAACG,OAAd,CACD,CACD,IAAKnB,CAAAA,OAAO,CAAC6B,SAAb,CAAwB,CACtB,GAAI8B,CAAAA,OAAO,CAAG,EAAd,CAEA;AACAlD,EAAE,CAACuB,UAAH,CAAc,OAAd,CACA;AADA,CAEC4B,KAFD,CAEO,IAFP,CAEY,IAFZ,CAEiB5C,MAAM,CAACG,OAFxB,EAGEyB,GAHF,GAIExB,IAJF,CAIO,SAAAyB,aAAa,CAAI,CACrB,GAAMC,CAAAA,IAAI,CAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuB,SAAAC,GAAG,CAAI,CAC1CU,OAAO,CAACV,GAAG,CAACX,EAAZ,CACA,MAAOW,CAAAA,GAAG,CAACH,IAAJ,EAAP,CAAkB,CAFN,CAAb,CAIC,GAAInB,CAAAA,SAAS,CAAGjB,CAAC,CAACkB,SAAF,CAAYkB,IAAZ,CAAhB,CACA,GAAGnB,SAAS,CAAC,CAAD,CAAZ,CACAA,SAAS,CAAC,CAAD,CAAT,CAAaU,GAAb,CAAmBsB,OAAnB,CACA,GAAItB,CAAAA,GAAG,CAAG,EAAV,CACArB,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAAC6D,iBAAT,CAA2BlC,SAA3B,CAA/B,EACC;AAEKlB,EAAE,CAACuB,UAAH,CAAc,YAAd,EACC4B,KADD,CACO,SADP,CACiB,IADjB,CACsB5C,MAAM,CAACG,OAD7B,EAECyB,GAFD,GAGCxB,IAHD,CAGM,SAAA0C,eAAe,CAAI,CAErB,GAAMhB,CAAAA,IAAI,CAAGgB,eAAe,CAACf,IAAhB,CAAqBC,GAArB,CAAyB,SAAAC,GAAG,CAAI,CAC3CZ,GAAG,CAACY,GAAG,CAACX,EAAR,CACA,MAAOW,CAAAA,GAAG,CAACH,IAAJ,EAAP,CAAkB,CAFP,CAAb,CAIAnB,SAAS,CAACqB,GAAV,CAAc,SAACS,IAAD,CAAMM,CAAN,CAAU,CAC1B;AACE,MAAOpC,CAAAA,SAAS,CAACoC,CAAD,CAAT,CAAaT,KAAb,CAAqBR,IAA5B,CACD,CAHC,EAIF,GAAIgB,eAAe,CAACE,IAAhB,CAAuB,CAA3B,CAA8B,CAC9BhD,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAAC6D,iBAAT,CAA2BlC,SAA3B,CAA/B,EAAsE,CADtE,IAC4E,CAC5EX,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAACiE,cAAT,CAAwB,CAACC,KAAK,CAAC,4BAAP,CAAxB,CAA/B,EAA8F,CAC/F,CAhBD,EAkBJ;AAEJ,CApCF,EAqCE;AACF,MAAOnD,CAAAA,KAAP,CACD,CACD,IAAMf,CAAAA,OAAO,CAAC6D,iBAAd,CAAgC,CAE9B,sBAAQ9C,KAAK,CAALA,KAAR,EAAiBC,MAAM,CAACG,OAAP,CAAe,CAAf,CAAjB,EACD,CACD,IAAMnB,CAAAA,OAAO,CAACiE,cAAd,CAA6B,CAC3B,MAAOlD,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACmE,WAAb,CAAyB,CAEvB1D,EAAE,CAACuB,UAAH,CAAc,OAAd,EAAuBiB,GAAvB,CAA2BjC,MAAM,CAACG,OAAP,CAAekB,GAA1C,EACC+B,MADD,CACQpD,MAAM,CAACG,OADf,EACwBC,IADxB,CAC6B,UAAI,CAC/BJ,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAACqE,mBAAT,CAA6BrD,MAAM,CAACG,OAApC,CAA/B,EACD,CAHD,EAIA,MAAOJ,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACqE,mBAAb,CAAiC,CAC/B,GAAI1C,CAAAA,WAAS,CAAGjB,CAAC,CAACkB,SAAF,CAAYb,KAAZ,CAAhB,CACAC,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAAC6B,SAAT,CAAmBF,WAAS,CAACG,EAA7B,CAA/B,EACA,sBAAQf,KAAK,CAALA,KAAR,EAAiBC,MAAM,CAACG,OAAxB,EACD,CACD,IAAKnB,CAAAA,OAAO,CAACsE,gBAAb,CAA8B,CAC5B,MAAOvD,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACuE,YAAb,CAA0B,CACxB,GAAI5C,CAAAA,WAAS,CAAGjB,CAAC,CAACkB,SAAF,CAAYZ,MAAM,CAACG,OAAnB,CAAhB,CACC,GAAImC,CAAAA,KAAK,CAAG3B,WAAS,CAAC2B,KAAtB,CACAjD,eAAe,CAACiD,KAAD,CAAf,CAAuBlC,IAAvB,CAA4B,SAACC,IAAD,CAAQ,CAEnC,GAAGA,IAAI,CAACmD,MAAL,GAAc,GAAd,EAAqBnD,IAAI,CAACmD,MAAL,GAAc,GAAtC,CAA2C,CACzCxD,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAACyE,oBAAT,CAA8B,CAACC,SAAS,CAAC/C,WAAX,CAAqBN,IAAI,CAAJA,IAArB,CAA9B,CAA/B,EACD,CAFD,IAEO,CACLL,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAAC2E,iBAAT,CAA2BtD,IAAI,CAACuD,QAAL,CAAcC,OAAzC,CAA/B,EACD,CACF,CAPA,EAOErD,KAPF,CAOQ,SAAAC,GAAG,QAAIT,CAAAA,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAAC2E,iBAAT,CAA2BlD,GAA3B,CAA/B,CAAJ,EAPX,EASD,MAAOV,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACyE,oBAAb,CAAkC,CAC9B,GAAI9C,CAAAA,WAAS,CAAGjB,CAAC,CAACkB,SAAF,CAAYb,KAAZ,CAAhB,CAEA,GAAI+D,CAAAA,QAAQ,CAAG,CACbzC,GAAG,CAACrB,MAAM,CAACG,OAAP,CAAeuD,SAAf,CAAyBrC,GADhB,CAEb0C,OAAO,CAAC/D,MAAM,CAACG,OAAP,CAAeuD,SAAf,CAAyBK,OAFpB,CAGbC,OAAO,CAAChE,MAAM,CAACG,OAAP,CAAeuD,SAAf,CAAyBM,OAHpB,CAIbC,KAAK,CAACjE,MAAM,CAACG,OAAP,CAAeuD,SAAf,CAAyBO,KAJlB,CAKbC,SAAS,CAAClE,MAAM,CAACG,OAAP,CAAeE,IAAf,CAAoByB,IAApB,CAAyBqC,QALtB,CAMbC,SAAS,CAACC,IAAI,CAACC,GAAL,EANG,CAAf,CAQA3D,WAAS,CAACd,SAAV,CAAsBG,MAAM,CAACG,OAAP,CAAeuD,SAAf,CAAyBK,OAA/C,CACA/D,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAAEF,OAAO,CAACuF,iBAAV,CAA4BT,QAA5B,CAA/B,EACF,MAAOnD,CAAAA,WAAP,CACD,CACD,IAAK3B,CAAAA,OAAO,CAAC2E,iBAAb,CAA+B,CAC7B,MAAO5D,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACuF,iBAAb,CAA+B,CAE7BpF,eAAe,CAACa,MAAM,CAACG,OAAR,CAAf,CAAgCC,IAAhC,CAAqC,SAAAC,IAAI,CAAI,CAC3CL,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAAEF,OAAO,CAACwF,yBAAV,CAAoCnE,IAApC,CAA/B,EACD,CAFD,EAEGG,KAFH,CAES,SAAAC,GAAG,CAAG,CACbT,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAAEF,OAAO,CAACyF,sBAAV,CAAiChE,GAAjC,CAA/B,EACD,CAJD,EAKA,MAAOV,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACwF,yBAAb,CAAuC,CACrC,GAAI7D,CAAAA,WAAS,CAAGjB,CAAC,CAACkB,SAAF,CAAYb,KAAZ,CAAhB,CACAC,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAAC6B,SAAT,CAAmBF,WAAS,CAACG,EAA7B,CAA/B,EACA,MAAOf,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAACyF,sBAAb,CAAoC,CAClC,MAAO1E,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAAC0F,iBAAb,CAA+B,CAC9BjF,EAAE,CAACuB,UAAH,CAAc,YAAd,EACCiB,GADD,GAEC0C,GAFD,CAEK3E,MAAM,CAACG,OAFZ,EAGCC,IAHD,CAGM,UAAM,CACVe,OAAO,CAACC,GAAR,CAAYpB,MAAM,CAACG,OAAnB,EACAH,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAACF,OAAO,CAAC4F,yBAAT,CAAmC5E,MAAM,CAACG,OAA1C,CAA/B,EACD,CAND,EAOA,MAAOJ,CAAAA,KAAP,CACD,CACA,IAAKf,CAAAA,OAAO,CAAC4F,yBAAb,CAAuC,CACrC,GAAIjE,CAAAA,WAAS,CAAGjB,CAAC,CAACkB,SAAF,CAAYb,KAAZ,CAAhB,CAEC,GAAI+D,CAAAA,SAAQ,CAAG,CACbC,OAAO,CAAC/D,MAAM,CAACG,OAAP,CAAeuD,SAAf,CAAyBK,OADpB,CAEbC,OAAO,CAAChE,MAAM,CAACG,OAAP,CAAeuD,SAAf,CAAyBM,OAFpB,CAGbC,KAAK,CAACjE,MAAM,CAACG,OAAP,CAAeuD,SAAf,CAAyBO,KAHlB,CAIbC,SAAS,CAAClE,MAAM,CAACG,OAAP,CAAeE,IAAf,CAAoByB,IAApB,CAAyBqC,QAJtB,CAAf,CAMAxD,WAAS,CAACd,SAAV,CAAsBG,MAAM,CAACG,OAAP,CAAeuD,SAAf,CAAyBK,OAA/C,CACA/D,MAAM,CAACM,aAAP,CAAqBpB,UAAU,CAAEF,OAAO,CAACkB,qBAAV,CAAgC4D,SAAhC,CAA/B,EACD,MAAO/D,CAAAA,KAAP,CACD,CACD,IAAKf,CAAAA,OAAO,CAAC6F,sBAAb,CAAoC,CAClC,MAAO9E,CAAAA,KAAP,CACD,CACD,QACE,MAAOA,CAAAA,KAAP,CAjOJ,CAoOD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updatePostImage,createPost,uploadPostImage,createPostImage,deletePostImage,deletePost} from \"API/indexAPI\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {\n  currentID:''\n};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_POST_IMAGE:{\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST: {\n        let stateCopy = _.cloneDeep(action.payload)\n      \n        db.collection(\"posts\")\n          .add(stateCopy)\n          .then(function(docRef){\n            console.log(docRef)\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,stateCopy))\n          });\n        return stateCopy\n      }\n      case ACTIONS.CREATE_NEW_POST_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_FAIL: {\n        return state\n      }\n      case ACTIONS.DELETE_POST:{\n\n         db.collection(\"posts\")\n         .remove(\"ID\",'==',parseInt(action.payload,10))\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => {\n\n             return doc.data()}); \n          });\n\n        return state\n      }  \n      case ACTIONS.DELETE_POST_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS,[]))\n        return state\n      }  \n      case ACTIONS.DELETE_POST_FAIL:{\n        return action.payload\n      }  \n      case ACTIONS.DELETE_POST_IMAGE:{\n\n        let stateCopy = _.cloneDeep(state)\n        deletePostImage(action.payload.image)\n        .then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS,json))\n        })\n        .catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_FAIL,err))\n        })\n        stateCopy.currentID = action.payload.post\n        return stateCopy\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_SUCCESS:{\n\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n\n        return state\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n        let post_id = ''\n\n        //////====>\n        db.collection(\"posts\")\n        //.where(\"ID\",'==',action.payload)\n        .where(\"ID\",'==',action.payload)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => {\n            post_id=doc.id\n            return doc.data()}); \n\n            let stateCopy = _.cloneDeep(data)\n            if(stateCopy[0])\n            stateCopy[0]._id = post_id\n            let _id = ''\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy))\n             //=======================================================\n\n                  db.collection(\"postimages\")\n                  .where(\"albumID\",'==',action.payload)\n                  .get()\n                  .then(snapshotChanges => {\n                    \n                      const data = snapshotChanges.docs.map(doc => {\n                        _id=doc.id\n                        return doc.data()});\n                      \n                      stateCopy.map((post,i)=>{\n                    //    data[0]._id =  _id\n                      return stateCopy[i].image = data\n                    })\n                    if (snapshotChanges.size > 0) {\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy))} else {\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,{error:\"could not find this record\"}))}\n                  });\n\n              //========================================================\n\n         });\n          //////====>\n        return state\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n        \n        return {state,...action.payload[0]}\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n\n        db.collection(\"posts\").doc(action.payload._id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,action.payload))\n        });\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          \n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          stateCopy.currentID = action.payload.submitted.albumID\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE:{\n       db.collection(\"postimages\")\n       .doc()\n       .set(action.payload)\n       .then(() => {\n         console.log(action.payload)\n         action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS,action.payload))\n       });\n       return state\n     }\n      case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n         \n         let newImage = {\n           albumID:action.payload.submitted.albumID,\n           caption:action.payload.submitted.caption,\n           cover:action.payload.submitted.cover,\n           imageName:action.payload.json.data.filename\n         }\n         stateCopy.currentID = action.payload.submitted.albumID\n         action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE,newImage))\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE_FAIL:{\n        return state\n      }\n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}