{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { updatePostImage, createPost, uploadPostImage, createPostImage, deletePostImage, deletePost } from \"API/indexAPI\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {\n  currentID: ''\n};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_POST_IMAGE:\n      {\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST:\n      {\n        createPost(action.payload).then(json => {\n          console.log(action, json);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS, json));\n        }).catch(err => {\n          console.log(action, err);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_FAIL, err));\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        deletePost(action.payload.image).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_FAIL, err));\n        });\n        stateCopy.currentID = action.payload.post;\n        return stateCopy;\n      }\n\n    case ACTIONS.DELETE_POST_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        deletePostImage(action.payload.image).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_FAIL, err));\n        });\n        stateCopy.currentID = action.payload.post;\n        return stateCopy;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        let post_id = '';\n        console.log(action); //////====>\n\n        db.collection(\"posts\").where(\"ID\", '==', action.payload).get().then(snapshotChanges => {\n          const data = snapshotChanges.docs.map(doc => {\n            post_id = doc.id;\n            return doc.data();\n          });\n\n          let stateCopy = _.cloneDeep(data);\n\n          stateCopy[0]._id = post_id;\n          console.log(stateCopy);\n          let _id = ''; //=======================================================\n\n          db.collection(\"postimages\").where(\"albumID\", '==', action.payload).get().then(snapshotChanges => {\n            const data = snapshotChanges.docs.map(doc => {\n              _id = doc.id;\n              return doc.data();\n            });\n            stateCopy.map((post, i) => {\n              data[0]._id = _id;\n              return stateCopy[i].image = data;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, stateCopy));\n          }); //========================================================\n        }); //////====>\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return action.payload[0];\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        db.collection(\"posts\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE, newImage));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","updatePostImage","createPost","uploadPostImage","createPostImage","deletePostImage","deletePost","db","_","NavDropdown","initialState","currentID","singlePostReducer","state","action","type","CREATE_NEW_POST_IMAGE","payload","then","json","asyncDispatch","CREATE_NEW_POST_IMAGE_SUCCESS","catch","err","CREATE_NEW_POST_IMAGE_FAIL","stateCopy","cloneDeep","LOAD_POST","ID","CREATE_NEW_POST","console","log","CREATE_NEW_POST_SUCCESS","CREATE_NEW_POST_FAIL","DELETE_POST","image","DELETE_POST_SUCCESS","DELETE_POST_FAIL","post","LOAD_DASHBOARD_POSTS","DELETE_POST_IMAGE","DELETE_POST_IMAGE_SUCCESS","DELETE_POST_IMAGE_FAIL","LOAD_ARTICLE","post_id","collection","where","get","snapshotChanges","data","docs","map","doc","id","_id","i","LOAD_POST_SUCCESS","LOAD_POST_FAIL","UPDATE_POST","update","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","UPLOAD_POST_IMAGE","UPLOAD_POST_IMAGE_SUCCESS","UPLOAD_POST_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updatePostImage,createPost,uploadPostImage,createPostImage,deletePostImage,deletePost} from \"API/indexAPI\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {\n  currentID:''\n};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_POST_IMAGE:{\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST: {\n        createPost(action.payload).then(json =>{\n          console.log(action,json)\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,json))\n        }).catch(err => {\n          console.log(action,err)\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_FAIL,err))\n        })\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_FAIL: {\n        return state\n      }\n      case ACTIONS.DELETE_POST:{\n        \n        let stateCopy = _.cloneDeep(state)\n        deletePost(action.payload.image)\n        .then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS,json))\n        })\n        .catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_FAIL,err))\n        })\n        stateCopy.currentID = action.payload.post\n        return stateCopy\n      }  \n      case ACTIONS.DELETE_POST_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS,[]))\n        return state\n      }  \n      case ACTIONS.DELETE_POST_FAIL:{\n        return action.payload\n      }  \n      case ACTIONS.DELETE_POST_IMAGE:{\n\n        let stateCopy = _.cloneDeep(state)\n        deletePostImage(action.payload.image)\n        .then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS,json))\n        })\n        .catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_FAIL,err))\n        })\n        stateCopy.currentID = action.payload.post\n        return stateCopy\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_SUCCESS:{\n\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n\n        return state\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n        let post_id = ''\n        console.log(action)\n\n        //////====>\n        db.collection(\"posts\")\n        .where(\"ID\",'==',action.payload)\n         .get()\n         .then(snapshotChanges => {\n           const data = snapshotChanges.docs.map(doc => {\n            post_id=doc.id\n            return doc.data()}); \n\n            let stateCopy = _.cloneDeep(data)\n            stateCopy[0]._id = post_id\n            console.log(stateCopy)\n            let _id = ''\n\n             //=======================================================\n\n                  db.collection(\"postimages\")\n                  .where(\"albumID\",'==',action.payload)\n                  .get()\n                  .then(snapshotChanges => {\n                    \n                    const data = snapshotChanges.docs.map(doc => {\n                      _id=doc.id\n                      return doc.data()});\n                    \n                    stateCopy.map((post,i)=>{\n                      data[0]._id =  _id\n                    return stateCopy[i].image = data\n                    })\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy))\n                  });\n\n              //========================================================\n\n         });\n          //////====>\n        return state\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n        \n        return action.payload[0]\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n\n        db.collection(\"posts\").doc(action.payload._id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,action.payload))\n        });\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          \n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          stateCopy.currentID = action.payload.submitted.albumID\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let image = stateCopy.image\n        uploadPostImage(image).then((json)=>{\n\n         if(json.status!==404 || json.status!==500) {\n           action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n         } else {\n           action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_FAIL,json.response.message))\n         }\n       }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n     \n       return state\n     }\n      case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n         \n         let newImage = {\n           albumID:action.payload.submitted.albumID,\n           caption:action.payload.submitted.caption,\n           cover:action.payload.submitted.cover,\n           imageName:action.payload.json.data.filename\n         }\n         stateCopy.currentID = action.payload.submitted.albumID\n         action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE,newImage))\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE_FAIL:{\n        return state\n      }\n      \n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}