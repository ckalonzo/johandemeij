{"ast":null,"code":"import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import{db}from\"../../firebase\";var initialState={};export default function postsReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.LOAD_POSTS:{//  fetch('http://127.0.0.1:5021/api/loadPosts')\n//   .then((data) => data.json())\n//   .then((res) => {\n//     action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,res.data))\n//   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_FAIL,err)))\ndb.collection(\"posts\").where(\"showPost\",'==','1').orderBy('postDate','desc').get()// .orderBy('postDate','desc')\n.then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,data));console.log(data);// this.setState({ posts: data });\n});return state;}case ACTIONS.LOAD_POSTS_SUCCESS:{var stateCopy=action.payload;//let imageName = []\n// fetch('http://127.0.0.1:5021/api/loadPostImages')\n//     .then((data) => data.json())\n//     .then((res) => {\n//       action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n//       imageName = stateCopy.map(post => {\n//         post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage =>{\n//           return postImage\n//         })\n//       })\n//     }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\ndb.collection(\"postimages\").get()// .orderBy('postDate','desc')\n.then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});//action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,data))\nconsole.log(data);// this.setState({ posts: data });\n});return stateCopy;}case ACTIONS.LOAD_POSTS_FAIL:{return state;}case ACTIONS.LOAD_DASHBOARD_POSTS:{fetch('http://127.0.0.1:5021/api/loadAllPosts').then(function(data){return data.json();}).then(function(res){action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS,res.data));}).catch(function(err){return action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_FAIL,err));});return state;}case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS:{var _stateCopy=action.payload;var imageName=[];fetch('http://127.0.0.1:5021/api/loadPostImages').then(function(data){return data.json();}).then(function(res){action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data));imageName=_stateCopy.map(function(post){post.image=Object.values(res.data).filter(function(image){return image.albumID===post.ID;}).map(function(postImage){return postImage;});});}).catch(function(err){return action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err));});return _stateCopy;}case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL:{return state;}default:return state;}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/posts.reducer.js"],"names":["ACTIONS","mainAction","db","initialState","postsReducer","state","action","type","LOAD_POSTS","collection","where","orderBy","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_POSTS_SUCCESS","console","log","stateCopy","payload","LOAD_POSTS_FAIL","LOAD_DASHBOARD_POSTS","fetch","json","res","LOAD_DASHBOARD_POSTS_SUCCESS","catch","err","LOAD_DASHBOARD_POSTS_FAIL","imageName","LOAD_POST_IMAGES_SUCCESS","post","image","Object","values","filter","albumID","ID","postImage","LOAD_POST_IMAGES_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nconst initialState = {};\nexport default function postsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_POSTS: {\n        \n      //  fetch('http://127.0.0.1:5021/api/loadPosts')\n      //   .then((data) => data.json())\n      //   .then((res) => {\n      //     action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,res.data))\n      //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_FAIL,err)))\n      db.collection(\"posts\")\n      .where(\"showPost\",'==','1')\n      .orderBy('postDate','desc')\n      .get()\n    // .orderBy('postDate','desc')\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,data))\n        console.log(data);\n       // this.setState({ posts: data });\n      });\n        return state\n      }\n      case ACTIONS.LOAD_POSTS_SUCCESS: {\n        let stateCopy = action.payload\n        //let imageName = []\n        // fetch('http://127.0.0.1:5021/api/loadPostImages')\n        //     .then((data) => data.json())\n        //     .then((res) => {\n        //       action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n        //       imageName = stateCopy.map(post => {\n        //         post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage =>{\n        //           return postImage\n        //         })\n  \n        //       })\n        //     }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\n\n        db.collection(\"postimages\")\n      .get()\n    // .orderBy('postDate','desc')\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        //action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,data))\n        console.log(data);\n       // this.setState({ posts: data });\n      });\n            \n        return stateCopy\n      }\n      case ACTIONS.LOAD_POSTS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_DASHBOARD_POSTS: {\n        \n        fetch('http://127.0.0.1:5021/api/loadAllPosts')\n         .then((data) => data.json())\n         .then((res) => {\n           action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS,res.data))\n         }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_FAIL,err)))\n        \n         return state\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS: {\n         let stateCopy = action.payload\n         let imageName = []\n         fetch('http://127.0.0.1:5021/api/loadPostImages')\n             .then((data) => data.json())\n             .then((res) => {\n               action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n               imageName = stateCopy.map(post => {\n                 post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage =>{\n                   return postImage\n                 })\n   \n               })\n             }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\n             \n         return stateCopy\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL: {\n \n         return state\n       }\n      default: \n        return state\n        \n    }\n  }"]},"metadata":{},"sourceType":"module"}