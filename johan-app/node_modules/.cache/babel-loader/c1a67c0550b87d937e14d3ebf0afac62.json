{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, storage } from \"../../firebase\";\nimport _ from \"lodash\";\nimport { updatePresentationImage } from \"API/indexAPI\";\nconst initialState = {};\nexport default function presentationReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.DELETE_PRESENTATION_IMAGE:\n      {\n        let presentation = {};\n\n        if (action.payload.imageType === \"frontCover\") {\n          presentation = {\n            frontCover: \"\",\n            frontCaption: \"\"\n          };\n        } else {\n          presentation = {\n            backCover: \"\",\n            backCaption: \"\"\n          };\n        }\n\n        db.collection(\"presentations\").doc(action.payload.docId).update(presentation).then(() => {\n          db.collection(\"postimages\").where('albumID', '==', action.payload.ID).where('cover', '==', action.payload.imageType).get().then(querySnapshot => {\n            console.log(querySnapshot.docs);\n            querySnapshot.forEach(doc => {\n              console.log(doc.ref.id, doc.ref.parent, doc.ref.path);\n              doc.ref.delete();\n            });\n            action.asyncDispatch(mainAction(ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('posts/' + action.payload.name);\n        postImageRef.delete().then(() => console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, action.payload.ID));\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION_IMAGE_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"presentations\").add(stateCopy).then(function (docRef) {\n          stateCopy._id = docRef.id;\n          db.collection(\"presentations\").doc(docRef.id).update({\n            _id: docRef.id\n          }).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS, stateCopy));\n          });\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION:\n      {\n        db.collection(\"presentations\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => {\n            console.log(doc.ref.id, doc.ref.parent, doc.ref.path);\n            doc.ref.delete();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_PRESENTATION_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATIONS, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let _id = '';\n        db.collection(\"presentations\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            //  _id=doc.id\n            return doc.data();\n          });\n          stateCopy = data; //  stateCopy[0]._id = _id\n\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"presentations\").where(\"id\", \"==\", stateCopy.id).get().then(querySnapshot => {\n          let _id = '';\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.ref.id;\n            return doc.data();\n          });\n          stateCopy._id = _id;\n          console.log(stateCopy);\n          db.collection(\"presentations\").doc(_id).update(stateCopy).then(snapshot => {\n            console.log(snapshot);\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS, stateCopy));\n          });\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, stateCopy.id));\n        window.location.reload(true);\n        return {\n          state,\n          ...stateCopy.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = {\n          albumID: action.payload.albumID,\n          caption: action.payload.caption ? action.payload.caption : \"\",\n          cover: action.payload.cover ? action.payload.cover : \"\",\n          imageName: action.payload.image.name\n        };\n        let presentation = {};\n\n        if (action.payload.cover === \"frontCover\") {\n          presentation = {\n            frontCover: action.payload.image.name,\n            frontCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        } else {\n          presentation = {\n            backCover: action.payload.image.name,\n            backCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        }\n\n        db.collection(\"presentations\").where(\"id\", \"==\", stateCopy.albumID).get().then(querySnapshot => {\n          let _id = '';\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.ref.id;\n            return doc.data();\n          });\n          stateCopy._id = _id;\n          db.collection(\"presentations\").doc(_id).update(presentation).then(() => {\n            db.collection(\"postimages\").doc().set(image).then(() => {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS, action.payload));\n            });\n          });\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('posts/' + action.payload.image.name).put(action.payload.image);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('/posts').child(action.payload.image.name).getDownloadURL().then(url => {\n            console.log(url);\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, action.payload.albumID));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        console.log(action);\n        let image = '';\n\n        if (action.submitted.cover === \"frontCover\") {\n          image = {\n            frontCover: action.json.data.filename,\n            frontCaption: action.submitted.caption\n          };\n        } else {\n          image = {\n            backCover: action.json.data.filename,\n            backCaption: action.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION, image));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CAPTION:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = {\n          albumID: action.payload.albumID,\n          caption: action.payload.caption ? action.payload.caption : \"\",\n          cover: action.payload.cover ? action.payload.cover : \"\"\n        };\n        let presentation = {};\n\n        if (action.payload.cover === \"frontCover\") {\n          presentation = {\n            frontCover: action.payload.image.name,\n            frontCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        } else {\n          presentation = {\n            backCover: action.payload.image.name,\n            backCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        }\n\n        db.collection(\"presentations\").where(\"id\", \"==\", stateCopy.albumID).get().then(querySnapshot => {\n          let _id = '';\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.ref.id;\n            return doc.data();\n          });\n          stateCopy._id = _id;\n          db.collection(\"presentations\").doc(_id).update(presentation).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_CAPTION_SUCCESS, action.payload));\n          });\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_CAPTION_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CAPTION_SUCCESS:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/WEB/johandemeij/johan-app/src/redux/reducers/presentation.reducer.js"],"names":["ACTIONS","mainAction","db","storage","_","updatePresentationImage","initialState","presentationReducer","state","action","type","DELETE_PRESENTATION_IMAGE","presentation","payload","imageType","frontCover","frontCaption","backCover","backCaption","collection","doc","docId","update","then","where","ID","get","querySnapshot","console","log","docs","forEach","ref","id","parent","path","delete","asyncDispatch","DELETE_PRESENTATION_IMAGE_SUCCESS","postImageRef","name","LOAD_PRESENTATION","DELETE_PRESENTATION_IMAGE_FAIL","CREATE_NEW_PUBLICATION","stateCopy","cloneDeep","add","docRef","_id","CREATE_NEW_PUBLICATION_SUCCESS","CREATE_NEW_PUBLICATION_FAIL","DELETE_PRESENTATION","DELETE_PRESENTATION_SUCCESS","LOAD_PRESENTATIONS","DELETE_PRESENTATION_FAIL","data","map","LOAD_PRESENTATION_SUCCESS","length","LOAD_PRESENTATION_FAIL","UPDATE_PUBLICATION","snapshot","UPDATE_PUBLICATION_SUCCESS","catch","err","UPDATE_PUBLICATION_FAIL","window","location","reload","UPDATE_PRESENTATION_IMAGE_SUCCESS","newImage","submitted","albumID","caption","cover","imageName","json","filename","updatedAt","Date","now","currentID","UPDATE_POST_IMAGE","UPDATE_PRESENTATION_IMAGE_FAIL","UPLOAD_PRESENTATION_IMAGE","image","set","UPLOAD_PRESENTATION_IMAGE_SUCCESS","put","on","error","child","getDownloadURL","url","UPLOAD_PRESENTATION_IMAGE_FAIL","UPDATE_PRESENTATION_IMAGE","UPDATE_CAPTION","UPDATE_CAPTION_SUCCESS","UPDATE_CAPTION_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db,storage} from \"../../firebase\";\nimport  _ from \"lodash\"\nimport {updatePresentationImage} from \"API/indexAPI\"\nconst initialState = {};\nexport default function presentationReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.DELETE_PRESENTATION_IMAGE:{\n        let presentation= {}\n        if(action.payload.imageType === \"frontCover\"){\n         presentation = {\n           frontCover : \"\",\n           frontCaption:\"\",\n         }\n        } else {\n          presentation = {\n            backCover : \"\",\n            backCaption:\"\",\n          }\n        }\n\n       db.collection(\"presentations\").doc(action.payload.docId)\n       .update(presentation).then(()=>{   \n\n          db.collection(\"postimages\")\n          .where('albumID','==',action.payload.ID)\n          .where('cover','==',action.payload.imageType)\n           .get()\n           .then((querySnapshot) => {\n            console.log(querySnapshot.docs)\n            querySnapshot.forEach((doc)=>{\n               console.log(doc.ref.id,doc.ref.parent,doc.ref.path)\n               doc.ref.delete()\n              })\n            action.asyncDispatch(mainAction(ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS,action.payload))\n           });\n       });\n\n        \n        return state\n      }  \n      case ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS:{\n        let postImageRef = storage.ref('posts/'+action.payload.name)\n        postImageRef.delete().then(()=>console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,action.payload.ID))\n        return state\n      }  \n      case ACTIONS.DELETE_PRESENTATION_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n        case ACTIONS.CREATE_NEW_PUBLICATION: {\n          let stateCopy = _.cloneDeep(action.payload)\n      \n          db.collection(\"presentations\")\n            .add(stateCopy)\n            .then(function(docRef){\n              stateCopy._id = docRef.id\n              db.collection(\"presentations\")\n              .doc(docRef.id)\n              .update({_id:docRef.id}).then(()=>{\n                action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS,stateCopy))\n              });\n             \n            });\n        return stateCopy\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_FAIL: {\n        return state\n        }\n        case  ACTIONS.DELETE_PRESENTATION:{\n          db.collection(\"presentations\")\n          .where(\"id\",\"==\",action.payload)\n          .get()\n          .then((querySnapshot) => {\n            querySnapshot.forEach((doc)=>{\n               console.log(doc.ref.id,doc.ref.parent,doc.ref.path)\n              doc.ref.delete()\n              })\n            action.asyncDispatch(mainAction(ACTIONS.DELETE_PRESENTATION_SUCCESS,action.payload))\n           });\n          return state\n        }\n        case  ACTIONS.DELETE_PRESENTATION_SUCCESS:{\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATIONS,[]))\n          return state\n        }\n        case  ACTIONS.DELETE_PRESENTATION_FAIL:{\n          return state\n        }\n        case ACTIONS.LOAD_PRESENTATION: {\n        let stateCopy = _.cloneDeep(state)\n        let _id = ''\n            db.collection(\"presentations\")\n            .where(\"id\",\"==\",action.payload)\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => {\n              //  _id=doc.id\n                return doc.data()});\n              stateCopy = data\n            //  stateCopy[0]._id = _id\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS,data))\n            });\n            return state\n        }\n        case  ACTIONS.LOAD_PRESENTATION_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_PRESENTATION_FAIL:{\n            return state\n        }\n        \n        case ACTIONS.UPDATE_PUBLICATION:{  \n       console.log(action)\n      let stateCopy = _.cloneDeep(action.payload)\n      db.collection(\"presentations\")\n      .where(\"id\", \"==\", stateCopy.id).get()\n      .then((querySnapshot)=>{\n        let _id=''\n        const data = querySnapshot.docs.map(doc =>{\n         _id = doc.ref.id\n          return  doc.data()\n        })\n        stateCopy._id = _id\n        console.log(stateCopy)\n        db.collection(\"presentations\")\n        .doc(_id)\n        .update(stateCopy).then((snapshot)=>{\n          console.log(snapshot)\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS,stateCopy))\n        });\n       })\n      .catch((err)=>{\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_FAIL,err))\n      })\n       \n        return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,stateCopy.id))\n        window.location.reload(true);\n        return {state,...stateCopy.payload}\n        }\n        case ACTIONS.UPDATE_PUBLICATION_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE:{\n         let stateCopy = _.cloneDeep(action.payload)\n          let image = {\n            albumID: action.payload.albumID,\n            caption: action.payload.caption ? action.payload.caption :\"\",\n            cover: action.payload.cover ? action.payload.cover:\"\",\n            imageName:action.payload.image.name\n          }\n          let presentation= {}\n          if(action.payload.cover === \"frontCover\"){\n           presentation = {\n             frontCover : action.payload.image.name,\n             frontCaption:action.payload.caption ? action.payload.caption :\"\",\n           }\n          } else {\n            presentation = {\n              backCover : action.payload.image.name,\n              backCaption:action.payload.caption ? action.payload.caption :\"\",\n            }\n          }\n          db.collection(\"presentations\")\n      .where(\"id\", \"==\", stateCopy.albumID).get()\n      .then((querySnapshot)=>{\n        let _id=''\n        const data = querySnapshot.docs.map(doc =>{\n         _id = doc.ref.id\n          return  doc.data()\n        })\n        stateCopy._id = _id\n\n        db.collection(\"presentations\").doc(_id)\n        .update(presentation).then(()=>{   \n            db.collection(\"postimages\")\n            .doc()\n            .set(image)\n            .then(() => {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS,action.payload))\n            });\n\n\n        });\n       })\n      .catch((err)=>{\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_FAIL,err))\n      })\n        \n\n        \n         \n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:{\n          let postImageRef = storage.ref('posts/'+action.payload.image.name).put(action.payload.image);\n          postImageRef.on('state_changed',(snapshot)=>{\n            //progress function\n          },(error)=>{\n            //error\n            console.log(error)\n          },()=>{\n            //complete\n            storage.ref('/posts').child(action.payload.image.name).getDownloadURL().then(url=>{\n              console.log(url)\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,action.payload.albumID))\n            })\n          })\n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:{\n          return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n          console.log(action)\n          let image = ''\n          if(action.submitted.cover === \"frontCover\") {\n            image = {\n              frontCover:action.json.data.filename,\n              frontCaption:action.submitted.caption \n            }\n          } else {\n            image = {\n              backCover:action.json.data.filename,\n              backCaption:action.submitted.caption \n            }\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_PUBLICATION,image))\n          return state\n        }\n      case ACTIONS.UPDATE_CAPTION:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let image = {\n          albumID: action.payload.albumID,\n          caption: action.payload.caption ? action.payload.caption :\"\",\n          cover: action.payload.cover ? action.payload.cover:\"\",\n        }\n        let presentation= {}\n        if(action.payload.cover === \"frontCover\"){\n         presentation = {\n           frontCover : action.payload.image.name,\n           frontCaption:action.payload.caption ? action.payload.caption :\"\",\n         }\n        } else {\n          presentation = {\n            backCover : action.payload.image.name,\n            backCaption:action.payload.caption ? action.payload.caption :\"\",\n          }\n        }\n        db.collection(\"presentations\")\n    .where(\"id\", \"==\", stateCopy.albumID).get()\n    .then((querySnapshot)=>{\n      let _id=''\n      const data = querySnapshot.docs.map(doc =>{\n       _id = doc.ref.id\n        return  doc.data()\n      })\n      stateCopy._id = _id\n\n      db.collection(\"presentations\").doc(_id)\n      .update(presentation).then(()=>{   \n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_CAPTION_SUCCESS,action.payload))\n      });\n     })\n    .catch((err)=>{\n      action.asyncDispatch(mainAction(ACTIONS.UPDATE_CAPTION_FAIL,err))\n    })\n        return state\n      }\n      case ACTIONS.UPDATE_CAPTION_SUCCESS:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}