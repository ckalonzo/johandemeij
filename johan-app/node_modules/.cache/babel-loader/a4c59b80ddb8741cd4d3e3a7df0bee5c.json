{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n\nconst gapicConfig = require(\"./firestore_admin_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\n *  service `google.longrunning.Operations`.\n * @class\n * @memberof v1\n */\n\n\nclass FirestoreAdminClient {\n  /**\n   * Construct an instance of FirestoreAdminClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    this._descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    };\n    this._terminated = false; // Ensure that options include the service address and port.\n\n    const staticMembers = this.constructor;\n    const servicePath = opts && opts.servicePath ? opts.servicePath : opts && opts.apiEndpoint ? opts.apiEndpoint : staticMembers.servicePath;\n    const port = opts && opts.port ? opts.port : staticMembers.port;\n\n    if (!opts) {\n      opts = {\n        servicePath,\n        port\n      };\n    }\n\n    opts.servicePath = opts.servicePath || servicePath;\n    opts.port = opts.port || port;\n    opts.clientConfig = opts.clientConfig || {};\n    const isBrowser = typeof window !== 'undefined';\n\n    if (isBrowser) {\n      opts.fallback = true;\n    } // If we are in browser, we are already using fallback because of the\n    // \"browser\" field in package.json.\n    // But if we were explicitly requested to use fallback, let's do it now.\n\n\n    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this._pathTemplates = {\n      collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\n      databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\n      fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\n      indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this._descriptors.page = {\n      listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n      listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields')\n    }; // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n    const protoFilesRoot = opts.fallback ? this._gaxModule.protobuf.Root.fromJSON(require('../../protos/protos.json')) : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    const createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\n    const createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\n    const updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\n    const updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\n    const exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\n    const exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\n    const importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n    const importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\n    this._descriptors.longrunning = {\n      createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\n      updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\n      exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\n      importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this._innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.firestoreAdminStub) {\n      return this.firestoreAdminStub;\n    } // Put together the \"service stub\" for\n    // google.firestore.admin.v1.FirestoreAdmin.\n\n\n    this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin') : // tslint:disable-next-line no-any\n    this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const firestoreAdminStubMethods = ['createIndex', 'listIndexes', 'getIndex', 'deleteIndex', 'getField', 'updateField', 'listFields', 'exportDocuments', 'importDocuments'];\n\n    for (const methodName of firestoreAdminStubMethods) {\n      const innerCallPromise = this.firestoreAdminStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n\n      const apiCall = this._gaxModule.createApiCall(innerCallPromise, this._defaults[methodName], this._descriptors.page[methodName] || this._descriptors.stream[methodName] || this._descriptors.longrunning[methodName]);\n\n      this._innerApiCalls[methodName] = (argument, callOptions, callback) => {\n        return apiCall(argument, callOptions, callback);\n      };\n    }\n\n    return this.firestoreAdminStub;\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Gets a composite index.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. A name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Index]{@link google.firestore.admin.v1.Index}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  getIndex(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.getIndex(request, options, callback);\n  }\n  /**\n   * Deletes a composite index.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. A name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  deleteIndex(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.deleteIndex(request, options, callback);\n  }\n  /**\n   * Gets the metadata and configuration for a Field.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. A name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Field]{@link google.firestore.admin.v1.Field}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  getField(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.getField(request, options, callback);\n  }\n  /**\n   * Creates a composite index. This returns a {@link google.longrunning.Operation|google.longrunning.Operation}\n   * which may be used to track the status of the creation. The metadata for\n   * the operation will be the type {@link google.firestore.admin.v1.IndexOperationMetadata|IndexOperationMetadata}.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {google.firestore.admin.v1.Index} request.index\n   *   Required. The composite index to create.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  createIndex(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.createIndex(request, options, callback);\n  }\n  /**\n   * Updates a field configuration. Currently, field updates apply only to\n   * single field index configuration. However, calls to\n   * {@link google.firestore.admin.v1.FirestoreAdmin.UpdateField|FirestoreAdmin.UpdateField} should provide a field mask to avoid\n   * changing any configuration that the caller isn't aware of. The field mask\n   * should be specified as: `{ paths: \"index_config\" }`.\n   *\n   * This call returns a {@link google.longrunning.Operation|google.longrunning.Operation} which may be used to\n   * track the status of the field update. The metadata for\n   * the operation will be the type {@link google.firestore.admin.v1.FieldOperationMetadata|FieldOperationMetadata}.\n   *\n   * To configure the default field settings for the database, use\n   * the special `Field` with resource name:\n   * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.firestore.admin.v1.Field} request.field\n   *   Required. The field to be updated.\n   * @param {google.protobuf.FieldMask} request.updateMask\n   *   A mask, relative to the field. If specified, only configuration specified\n   *   by this field_mask will be updated in the field.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  updateField(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'field.name': request.field.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.updateField(request, options, callback);\n  }\n  /**\n   * Exports a copy of all or a subset of documents from Google Cloud Firestore\n   * to another storage system, such as Google Cloud Storage. Recent updates to\n   * documents may not be reflected in the export. The export occurs in the\n   * background and its progress can be monitored and managed via the\n   * Operation resource that is created. The output of an export may only be\n   * used once the associated operation is done. If an export operation is\n   * cancelled before completion it may leave partial data behind in Google\n   * Cloud Storage.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. Database to export. Should be of the form:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {string[]} request.collectionIds\n   *   Which collection ids to export. Unspecified means all collections.\n   * @param {string} request.outputUriPrefix\n   *   The output URI. Currently only supports Google Cloud Storage URIs of the\n   *   form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name\n   *   of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional\n   *   Google Cloud Storage namespace path. When\n   *   choosing a name, be sure to consider Google Cloud Storage naming\n   *   guidelines: https://cloud.google.com/storage/docs/naming.\n   *   If the URI is a bucket (without a namespace path), a prefix will be\n   *   generated based on the start time.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  exportDocuments(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.exportDocuments(request, options, callback);\n  }\n  /**\n   * Imports documents into Google Cloud Firestore. Existing documents with the\n   * same name are overwritten. The import occurs in the background and its\n   * progress can be monitored and managed via the Operation resource that is\n   * created. If an ImportDocuments operation is cancelled, it is possible\n   * that a subset of the data has already been imported to Cloud Firestore.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. Database to import into. Should be of the form:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {string[]} request.collectionIds\n   *   Which collection ids to import. Unspecified means all collections included\n   *   in the import.\n   * @param {string} request.inputUriPrefix\n   *   Location of the exported files.\n   *   This must match the output_uri_prefix of an ExportDocumentsResponse from\n   *   an export that has completed successfully.\n   *   See:\n   *   {@link google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix|google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix}.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  importDocuments(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.importDocuments(request, options, callback);\n  }\n  /**\n   * Lists composite indexes.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} request.filter\n   *   The filter to apply to list results.\n   * @param {number} request.pageSize\n   *   The number of results to return.\n   * @param {string} request.pageToken\n   *   A page token, returned from a previous call to\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n   *   page of results.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Index]{@link google.firestore.admin.v1.Index}.\n   *   The client library support auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Index]{@link google.firestore.admin.v1.Index} that corresponds to\n   *   the one page received from the API server.\n   *   If the second element is not null it contains the request object of type [ListIndexesRequest]{@link google.firestore.admin.v1.ListIndexesRequest}\n   *   that can be used to obtain the next page of the results.\n   *   If it is null, the next page does not exist.\n   *   The third element contains the raw response received from the API server. Its type is\n   *   [ListIndexesResponse]{@link google.firestore.admin.v1.ListIndexesResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  listIndexes(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.listIndexes(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listIndexes}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listIndexes} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} request.filter\n   *   The filter to apply to list results.\n   * @param {number} request.pageSize\n   *   The number of results to return.\n   * @param {string} request.pageToken\n   *   A page token, returned from a previous call to\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n   *   page of results.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Index]{@link google.firestore.admin.v1.Index} on 'data' event.\n   */\n\n\n  listIndexesStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this._descriptors.page.listIndexes.createStream(this._innerApiCalls.listIndexes, request, callSettings);\n  }\n  /**\n   * Lists the field configuration and metadata for this database.\n   *\n   * Currently, {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n   * that have been explicitly overridden. To issue this query, call\n   * {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n   * `indexConfig.usesAncestorConfig:false`.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} request.filter\n   *   The filter to apply to list results. Currently,\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n   *   that have been explicitly overridden. To issue this query, call\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n   *   `indexConfig.usesAncestorConfig:false`.\n   * @param {number} request.pageSize\n   *   The number of results to return.\n   * @param {string} request.pageToken\n   *   A page token, returned from a previous call to\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n   *   page of results.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Field]{@link google.firestore.admin.v1.Field}.\n   *   The client library support auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Field]{@link google.firestore.admin.v1.Field} that corresponds to\n   *   the one page received from the API server.\n   *   If the second element is not null it contains the request object of type [ListFieldsRequest]{@link google.firestore.admin.v1.ListFieldsRequest}\n   *   that can be used to obtain the next page of the results.\n   *   If it is null, the next page does not exist.\n   *   The third element contains the raw response received from the API server. Its type is\n   *   [ListFieldsResponse]{@link google.firestore.admin.v1.ListFieldsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  listFields(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.listFields(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listFields}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listFields} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} request.filter\n   *   The filter to apply to list results. Currently,\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n   *   that have been explicitly overridden. To issue this query, call\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n   *   `indexConfig.usesAncestorConfig:false`.\n   * @param {number} request.pageSize\n   *   The number of results to return.\n   * @param {string} request.pageToken\n   *   A page token, returned from a previous call to\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n   *   page of results.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Field]{@link google.firestore.admin.v1.Field} on 'data' event.\n   */\n\n\n  listFieldsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this._descriptors.page.listFields.createStream(this._innerApiCalls.listFields, request, callSettings);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified collectionGroup resource name string.\n   *\n   * @param {string} project\n   * @param {string} database\n   * @param {string} collection\n   * @returns {string} Resource name string.\n   */\n\n\n  collectionGroupPath(project, database, collection) {\n    return this._pathTemplates.collectionGroupPathTemplate.render({\n      project,\n      database,\n      collection\n    });\n  }\n  /**\n   * Parse the project from CollectionGroup resource.\n   *\n   * @param {string} collectionGroupName\n   *   A fully-qualified path representing CollectionGroup resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromCollectionGroupName(collectionGroupName) {\n    return this._pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\n  }\n  /**\n   * Parse the database from CollectionGroup resource.\n   *\n   * @param {string} collectionGroupName\n   *   A fully-qualified path representing CollectionGroup resource.\n   * @returns {string} A string representing the database.\n   */\n\n\n  matchDatabaseFromCollectionGroupName(collectionGroupName) {\n    return this._pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\n  }\n  /**\n   * Parse the collection from CollectionGroup resource.\n   *\n   * @param {string} collectionGroupName\n   *   A fully-qualified path representing CollectionGroup resource.\n   * @returns {string} A string representing the collection.\n   */\n\n\n  matchCollectionFromCollectionGroupName(collectionGroupName) {\n    return this._pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\n  }\n  /**\n   * Return a fully-qualified database resource name string.\n   *\n   * @param {string} project\n   * @param {string} database\n   * @returns {string} Resource name string.\n   */\n\n\n  databasePath(project, database) {\n    return this._pathTemplates.databasePathTemplate.render({\n      project,\n      database\n    });\n  }\n  /**\n   * Parse the project from Database resource.\n   *\n   * @param {string} databaseName\n   *   A fully-qualified path representing Database resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromDatabaseName(databaseName) {\n    return this._pathTemplates.databasePathTemplate.match(databaseName).project;\n  }\n  /**\n   * Parse the database from Database resource.\n   *\n   * @param {string} databaseName\n   *   A fully-qualified path representing Database resource.\n   * @returns {string} A string representing the database.\n   */\n\n\n  matchDatabaseFromDatabaseName(databaseName) {\n    return this._pathTemplates.databasePathTemplate.match(databaseName).database;\n  }\n  /**\n   * Return a fully-qualified field resource name string.\n   *\n   * @param {string} project\n   * @param {string} database\n   * @param {string} collection\n   * @param {string} field\n   * @returns {string} Resource name string.\n   */\n\n\n  fieldPath(project, database, collection, field) {\n    return this._pathTemplates.fieldPathTemplate.render({\n      project,\n      database,\n      collection,\n      field\n    });\n  }\n  /**\n   * Parse the project from Field resource.\n   *\n   * @param {string} fieldName\n   *   A fully-qualified path representing Field resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromFieldName(fieldName) {\n    return this._pathTemplates.fieldPathTemplate.match(fieldName).project;\n  }\n  /**\n   * Parse the database from Field resource.\n   *\n   * @param {string} fieldName\n   *   A fully-qualified path representing Field resource.\n   * @returns {string} A string representing the database.\n   */\n\n\n  matchDatabaseFromFieldName(fieldName) {\n    return this._pathTemplates.fieldPathTemplate.match(fieldName).database;\n  }\n  /**\n   * Parse the collection from Field resource.\n   *\n   * @param {string} fieldName\n   *   A fully-qualified path representing Field resource.\n   * @returns {string} A string representing the collection.\n   */\n\n\n  matchCollectionFromFieldName(fieldName) {\n    return this._pathTemplates.fieldPathTemplate.match(fieldName).collection;\n  }\n  /**\n   * Parse the field from Field resource.\n   *\n   * @param {string} fieldName\n   *   A fully-qualified path representing Field resource.\n   * @returns {string} A string representing the field.\n   */\n\n\n  matchFieldFromFieldName(fieldName) {\n    return this._pathTemplates.fieldPathTemplate.match(fieldName).field;\n  }\n  /**\n   * Return a fully-qualified index resource name string.\n   *\n   * @param {string} project\n   * @param {string} database\n   * @param {string} collection\n   * @param {string} index\n   * @returns {string} Resource name string.\n   */\n\n\n  indexPath(project, database, collection, index) {\n    return this._pathTemplates.indexPathTemplate.render({\n      project,\n      database,\n      collection,\n      index\n    });\n  }\n  /**\n   * Parse the project from Index resource.\n   *\n   * @param {string} indexName\n   *   A fully-qualified path representing Index resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromIndexName(indexName) {\n    return this._pathTemplates.indexPathTemplate.match(indexName).project;\n  }\n  /**\n   * Parse the database from Index resource.\n   *\n   * @param {string} indexName\n   *   A fully-qualified path representing Index resource.\n   * @returns {string} A string representing the database.\n   */\n\n\n  matchDatabaseFromIndexName(indexName) {\n    return this._pathTemplates.indexPathTemplate.match(indexName).database;\n  }\n  /**\n   * Parse the collection from Index resource.\n   *\n   * @param {string} indexName\n   *   A fully-qualified path representing Index resource.\n   * @returns {string} A string representing the collection.\n   */\n\n\n  matchCollectionFromIndexName(indexName) {\n    return this._pathTemplates.indexPathTemplate.match(indexName).collection;\n  }\n  /**\n   * Parse the index from Index resource.\n   *\n   * @param {string} indexName\n   *   A fully-qualified path representing Index resource.\n   * @returns {string} A string representing the index.\n   */\n\n\n  matchIndexFromIndexName(indexName) {\n    return this._pathTemplates.indexPathTemplate.match(indexName).index;\n  }\n  /**\n   * Terminate the GRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.firestoreAdminStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.FirestoreAdminClient = FirestoreAdminClient;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js"],"names":["Object","defineProperty","exports","value","gax","require","path","gapicConfig","version","FirestoreAdminClient","constructor","opts","_descriptors","page","stream","longrunning","batching","_terminated","staticMembers","servicePath","apiEndpoint","port","clientConfig","isBrowser","window","fallback","_gaxModule","scopes","_gaxGrpc","GrpcClient","_opts","auth","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","_protos","loadProto","_pathTemplates","collectionGroupPathTemplate","PathTemplate","databasePathTemplate","fieldPathTemplate","indexPathTemplate","listIndexes","PageDescriptor","listFields","protoFilesRoot","protobuf","Root","fromJSON","loadSync","operationsClient","lro","grpc","undefined","createIndexResponse","lookup","createIndexMetadata","updateFieldResponse","updateFieldMetadata","exportDocumentsResponse","exportDocumentsMetadata","importDocumentsResponse","importDocumentsMetadata","createIndex","LongrunningDescriptor","decode","bind","updateField","exportDocuments","importDocuments","_defaults","constructSettings","_innerApiCalls","initialize","firestoreAdminStub","createStub","lookupService","google","firestore","admin","v1","FirestoreAdmin","firestoreAdminStubMethods","methodName","innerCallPromise","then","stub","args","Promise","reject","func","apply","err","apiCall","createApiCall","argument","callOptions","callback","getProjectId","getIndex","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","name","deleteIndex","getField","parent","field","listIndexesStream","callSettings","CallSettings","createStream","listFieldsStream","collectionGroupPath","project","database","collection","render","matchProjectFromCollectionGroupName","collectionGroupName","match","matchDatabaseFromCollectionGroupName","matchCollectionFromCollectionGroupName","databasePath","matchProjectFromDatabaseName","databaseName","matchDatabaseFromDatabaseName","fieldPath","matchProjectFromFieldName","fieldName","matchDatabaseFromFieldName","matchCollectionFromFieldName","matchFieldFromFieldName","indexPath","index","matchProjectFromIndexName","indexName","matchDatabaseFromIndexName","matchCollectionFromIndexName","matchIndexFromIndexName","close","resolve"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\nconst gapicConfig = require(\"./firestore_admin_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\n *  service `google.longrunning.Operations`.\n * @class\n * @memberof v1\n */\nclass FirestoreAdminClient {\n    /**\n     * Construct an instance of FirestoreAdminClient.\n     *\n     * @param {object} [options] - The configuration object. See the subsequent\n     *   parameters for more details.\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     */\n    constructor(opts) {\n        this._descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        this._terminated = false;\n        // Ensure that options include the service address and port.\n        const staticMembers = this.constructor;\n        const servicePath = opts && opts.servicePath\n            ? opts.servicePath\n            : opts && opts.apiEndpoint\n                ? opts.apiEndpoint\n                : staticMembers.servicePath;\n        const port = opts && opts.port ? opts.port : staticMembers.port;\n        if (!opts) {\n            opts = { servicePath, port };\n        }\n        opts.servicePath = opts.servicePath || servicePath;\n        opts.port = opts.port || port;\n        opts.clientConfig = opts.clientConfig || {};\n        const isBrowser = typeof window !== 'undefined';\n        if (isBrowser) {\n            opts.fallback = true;\n        }\n        // If we are in browser, we are already using fallback because of the\n        // \"browser\" field in package.json.\n        // But if we were explicitly requested to use fallback, let's do it now.\n        this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options\n        // sent to the client.\n        opts.scopes = this.constructor.scopes;\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this._pathTemplates = {\n            collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\n            databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\n            fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\n            indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this._descriptors.page = {\n            listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n            listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields'),\n        };\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const protoFilesRoot = opts.fallback\n            ? this._gaxModule.protobuf.Root.fromJSON(require('../../protos/protos.json'))\n            : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n        this.operationsClient = this._gaxModule\n            .lro({\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        })\n            .operationsClient(opts);\n        const createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\n        const createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\n        const updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\n        const updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\n        const exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\n        const exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\n        const importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n        const importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\n        this._descriptors.longrunning = {\n            createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\n            updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\n            exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\n            importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this._innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreAdminStub) {\n            return this.firestoreAdminStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.admin.v1.FirestoreAdmin.\n        this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin')\n            : // tslint:disable-next-line no-any\n                this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreAdminStubMethods = [\n            'createIndex',\n            'listIndexes',\n            'getIndex',\n            'deleteIndex',\n            'getField',\n            'updateField',\n            'listFields',\n            'exportDocuments',\n            'importDocuments',\n        ];\n        for (const methodName of firestoreAdminStubMethods) {\n            const innerCallPromise = this.firestoreAdminStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const apiCall = this._gaxModule.createApiCall(innerCallPromise, this._defaults[methodName], this._descriptors.page[methodName] ||\n                this._descriptors.stream[methodName] ||\n                this._descriptors.longrunning[methodName]);\n            this._innerApiCalls[methodName] = (argument, callOptions, callback) => {\n                return apiCall(argument, callOptions, callback);\n            };\n        }\n        return this.firestoreAdminStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @param {function(Error, string)} callback - the callback to\n     *   be called with the current project Id.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets a composite index.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Index]{@link google.firestore.admin.v1.Index}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getIndex(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.getIndex(request, options, callback);\n    }\n    /**\n     * Deletes a composite index.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    deleteIndex(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.deleteIndex(request, options, callback);\n    }\n    /**\n     * Gets the metadata and configuration for a Field.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Field]{@link google.firestore.admin.v1.Field}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getField(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.getField(request, options, callback);\n    }\n    /**\n     * Creates a composite index. This returns a {@link google.longrunning.Operation|google.longrunning.Operation}\n     * which may be used to track the status of the creation. The metadata for\n     * the operation will be the type {@link google.firestore.admin.v1.IndexOperationMetadata|IndexOperationMetadata}.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {google.firestore.admin.v1.Index} request.index\n     *   Required. The composite index to create.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    createIndex(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.createIndex(request, options, callback);\n    }\n    /**\n     * Updates a field configuration. Currently, field updates apply only to\n     * single field index configuration. However, calls to\n     * {@link google.firestore.admin.v1.FirestoreAdmin.UpdateField|FirestoreAdmin.UpdateField} should provide a field mask to avoid\n     * changing any configuration that the caller isn't aware of. The field mask\n     * should be specified as: `{ paths: \"index_config\" }`.\n     *\n     * This call returns a {@link google.longrunning.Operation|google.longrunning.Operation} which may be used to\n     * track the status of the field update. The metadata for\n     * the operation will be the type {@link google.firestore.admin.v1.FieldOperationMetadata|FieldOperationMetadata}.\n     *\n     * To configure the default field settings for the database, use\n     * the special `Field` with resource name:\n     * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.firestore.admin.v1.Field} request.field\n     *   Required. The field to be updated.\n     * @param {google.protobuf.FieldMask} request.updateMask\n     *   A mask, relative to the field. If specified, only configuration specified\n     *   by this field_mask will be updated in the field.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    updateField(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            'field.name': request.field.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.updateField(request, options, callback);\n    }\n    /**\n     * Exports a copy of all or a subset of documents from Google Cloud Firestore\n     * to another storage system, such as Google Cloud Storage. Recent updates to\n     * documents may not be reflected in the export. The export occurs in the\n     * background and its progress can be monitored and managed via the\n     * Operation resource that is created. The output of an export may only be\n     * used once the associated operation is done. If an export operation is\n     * cancelled before completion it may leave partial data behind in Google\n     * Cloud Storage.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Database to export. Should be of the form:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.collectionIds\n     *   Which collection ids to export. Unspecified means all collections.\n     * @param {string} request.outputUriPrefix\n     *   The output URI. Currently only supports Google Cloud Storage URIs of the\n     *   form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name\n     *   of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional\n     *   Google Cloud Storage namespace path. When\n     *   choosing a name, be sure to consider Google Cloud Storage naming\n     *   guidelines: https://cloud.google.com/storage/docs/naming.\n     *   If the URI is a bucket (without a namespace path), a prefix will be\n     *   generated based on the start time.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    exportDocuments(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.exportDocuments(request, options, callback);\n    }\n    /**\n     * Imports documents into Google Cloud Firestore. Existing documents with the\n     * same name are overwritten. The import occurs in the background and its\n     * progress can be monitored and managed via the Operation resource that is\n     * created. If an ImportDocuments operation is cancelled, it is possible\n     * that a subset of the data has already been imported to Cloud Firestore.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Database to import into. Should be of the form:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.collectionIds\n     *   Which collection ids to import. Unspecified means all collections included\n     *   in the import.\n     * @param {string} request.inputUriPrefix\n     *   Location of the exported files.\n     *   This must match the output_uri_prefix of an ExportDocumentsResponse from\n     *   an export that has completed successfully.\n     *   See:\n     *   {@link google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix|google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    importDocuments(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.importDocuments(request, options, callback);\n    }\n    /**\n     * Lists composite indexes.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Index]{@link google.firestore.admin.v1.Index}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Index]{@link google.firestore.admin.v1.Index} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListIndexesRequest]{@link google.firestore.admin.v1.ListIndexesRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListIndexesResponse]{@link google.firestore.admin.v1.ListIndexesResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listIndexes(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.listIndexes(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listIndexes}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listIndexes} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Index]{@link google.firestore.admin.v1.Index} on 'data' event.\n     */\n    listIndexesStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this._descriptors.page.listIndexes.createStream(this._innerApiCalls.listIndexes, request, callSettings);\n    }\n    /**\n     * Lists the field configuration and metadata for this database.\n     *\n     * Currently, {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     * that have been explicitly overridden. To issue this query, call\n     * {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     * `indexConfig.usesAncestorConfig:false`.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Field]{@link google.firestore.admin.v1.Field}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Field]{@link google.firestore.admin.v1.Field} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListFieldsRequest]{@link google.firestore.admin.v1.ListFieldsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListFieldsResponse]{@link google.firestore.admin.v1.ListFieldsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listFields(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.listFields(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listFields}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listFields} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Field]{@link google.firestore.admin.v1.Field} on 'data' event.\n     */\n    listFieldsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this._descriptors.page.listFields.createStream(this._innerApiCalls.listFields, request, callSettings);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified collectionGroup resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @returns {string} Resource name string.\n     */\n    collectionGroupPath(project, database, collection) {\n        return this._pathTemplates.collectionGroupPathTemplate.render({\n            project,\n            database,\n            collection,\n        });\n    }\n    /**\n     * Parse the project from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromCollectionGroupName(collectionGroupName) {\n        return this._pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\n    }\n    /**\n     * Parse the database from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromCollectionGroupName(collectionGroupName) {\n        return this._pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\n    }\n    /**\n     * Parse the collection from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromCollectionGroupName(collectionGroupName) {\n        return this._pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\n    }\n    /**\n     * Return a fully-qualified database resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @returns {string} Resource name string.\n     */\n    databasePath(project, database) {\n        return this._pathTemplates.databasePathTemplate.render({\n            project,\n            database,\n        });\n    }\n    /**\n     * Parse the project from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromDatabaseName(databaseName) {\n        return this._pathTemplates.databasePathTemplate.match(databaseName).project;\n    }\n    /**\n     * Parse the database from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromDatabaseName(databaseName) {\n        return this._pathTemplates.databasePathTemplate.match(databaseName)\n            .database;\n    }\n    /**\n     * Return a fully-qualified field resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} field\n     * @returns {string} Resource name string.\n     */\n    fieldPath(project, database, collection, field) {\n        return this._pathTemplates.fieldPathTemplate.render({\n            project,\n            database,\n            collection,\n            field,\n        });\n    }\n    /**\n     * Parse the project from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromFieldName(fieldName) {\n        return this._pathTemplates.fieldPathTemplate.match(fieldName).project;\n    }\n    /**\n     * Parse the database from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromFieldName(fieldName) {\n        return this._pathTemplates.fieldPathTemplate.match(fieldName).database;\n    }\n    /**\n     * Parse the collection from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromFieldName(fieldName) {\n        return this._pathTemplates.fieldPathTemplate.match(fieldName).collection;\n    }\n    /**\n     * Parse the field from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the field.\n     */\n    matchFieldFromFieldName(fieldName) {\n        return this._pathTemplates.fieldPathTemplate.match(fieldName).field;\n    }\n    /**\n     * Return a fully-qualified index resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} index\n     * @returns {string} Resource name string.\n     */\n    indexPath(project, database, collection, index) {\n        return this._pathTemplates.indexPathTemplate.render({\n            project,\n            database,\n            collection,\n            index,\n        });\n    }\n    /**\n     * Parse the project from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromIndexName(indexName) {\n        return this._pathTemplates.indexPathTemplate.match(indexName).project;\n    }\n    /**\n     * Parse the database from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromIndexName(indexName) {\n        return this._pathTemplates.indexPathTemplate.match(indexName).database;\n    }\n    /**\n     * Parse the collection from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromIndexName(indexName) {\n        return this._pathTemplates.indexPathTemplate.match(indexName).collection;\n    }\n    /**\n     * Parse the index from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the index.\n     */\n    matchIndexFromIndexName(indexName) {\n        return this._pathTemplates.indexPathTemplate.match(indexName).index;\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.firestoreAdminStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreAdminClient = FirestoreAdminClient;\n//# sourceMappingURL=firestore_admin_client.js.map"]},"metadata":{},"sourceType":"script"}