{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nlet d = new Date(); //let day = d.getDate();\n\nlet month = d.getMonth() + 1;\nlet year = d.getFullYear();\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"agendas\").add(stateCopy).then(function (docRef) {\n          console.log(docRef);\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        window.location.reload(true);\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"year\", \">=\", year.toString()).orderBy(\"year\", \"asc\").orderBy(\"month\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_CD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"year\", \">=\", year.toString()).orderBy(\"year\", \"asc\").orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_CD_AGENDA_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['year', 'month', 'day'], ['asc', 'asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_CD_AGENDA_SUCCESS:\n      {\n        let successData = _.orderBy(action.payload, ['month', 'day', 'year'], ['asc', 'asc', 'asc']);\n\n        let dataArray = [];\n        let extendedArray = [];\n        successData.map(newData => {\n          if (newData.month < 9) dataArray.push(newData);\n          extendedArray.push(newData);\n        });\n        console.log(dataArray.length);\n        extendedArray.map(newData => {\n          dataArray.push(newData);\n        });\n        console.log(dataArray.length);\n        return dataArray;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        console.log(action);\n        db.collection(\"agendas\").where(\"year\", \">=\", year.toString()).orderBy(\"year\", \"asc\").orderBy(\"month\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          let agendas = [];\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            if (+agenda.month >= +month || +agenda.year > +year) return agendas.push(agenda); // if(+agenda.year > +year )\n            // return agendas.push(agenda)\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, agendas));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        db.collection(\"agendas\").where(\"year\", \"==\", action.payload.year.toString()).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          let agendas = [];\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => doc.data());\n          if (data.length > 0) action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...data\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return action.payload ? action.payload[0] : state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        let _id = '';\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload.id).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          db.collection(\"agendas\").doc(_id).update(action.payload).then(() => {\n            console.log(\"success\");\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Users/carlkalonzo/Documents/DEV/johandemeij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","d","Date","month","getMonth","year","getFullYear","agendaReducer","state","action","type","CREATE_NEW_AGENDA","console","log","stateCopy","cloneDeep","payload","collection","add","then","docRef","_id","id","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","window","location","reload","DELETE_AGENDA","where","get","querySnapshot","forEach","doc","ref","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","toString","orderBy","snapshot","data","docs","map","LOAD_CD_AGENDA_SUCCESS","LOAD_DASHBOARD_CD_AGENDA","LOAD_DASHBOARD_CD_AGENDA_SUCCESS","successData","dataArray","extendedArray","newData","push","length","LOAD_CD_AGENDA_FAIL","agendas","Object","values","agenda","date","day","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDAS_FILTERED","LOAD_AGENDA","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","UPDATE_AGENDA","update","UPDATE_AGENDA_SUCCESS","UPDATE_AGENDA_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nlet d = new Date();\n//let day = d.getDate();\nlet month = d.getMonth()+1;\nlet year = d.getFullYear()\nexport default function agendaReducer (state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\nconsole.log(action)\n    let stateCopy = _.cloneDeep(action.payload)\n        db.collection(\"agendas\")\n          .add(stateCopy)\n          .then(function(docRef){\n            console.log(docRef)\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n          });\n    return state\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n    window.location.reload(true)\n    return action.payload\n    }\n    case ACTIONS.DELETE_AGENDA:{\n    db.collection(\"agendas\")\n    .where('id','==',action.payload)\n     .get()\n     .then((querySnapshot) => {\n       querySnapshot.forEach((doc)=> doc.ref.delete())\n       action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n     });\n\n    return state\n    }  \n    case ACTIONS.DELETE_AGENDA_SUCCESS:{\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n    return state\n    }  \n    case ACTIONS.LOAD_CD_AGENDA: {\n    db.collection(\"agendas\")\n    .where(\"year\",\">=\",year.toString())\n    .orderBy(\"year\",\"asc\")\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_DASHBOARD_CD_AGENDA: {\n      db.collection(\"agendas\")\n      .where(\"year\",\">=\",year.toString())\n      .orderBy(\"year\",\"asc\")\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n      .get()\n      .then(snapshot => {\n        const data = snapshot.docs.map(doc => {return doc.data()});\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_CD_AGENDA_SUCCESS,data))\n      })\n    return state\n    }\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n    return _.orderBy(action.payload,['year','month','day'],['asc','asc','asc'])\n    }\n    case ACTIONS.LOAD_DASHBOARD_CD_AGENDA_SUCCESS: {\n      let successData = _.orderBy(action.payload,['month','day','year'],['asc','asc','asc'])\n      let dataArray = []\n      let extendedArray = []\n      successData.map(newData=>{\n        if(newData.month < 9)\n        dataArray.push(newData)\n        extendedArray.push(newData)\n      })\n      console.log(dataArray.length)\n      extendedArray.map(newData=>{\n        dataArray.push(newData)\n      })\n      console.log(dataArray.length)\n      return dataArray\n      }\n    case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS: {\nconsole.log(action)\n    db.collection(\"agendas\")\n    .where(\"year\",\">=\",year.toString())\n    .orderBy(\"year\",\"asc\")\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      let agendas = []\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n      if(+agenda.month >= +month || +agenda.year > +year)\n        return agendas.push(agenda)\n        // if(+agenda.year > +year )\n        // return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,agendas))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDAS_FAIL:{\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",action.payload.year.toString())\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      let agendas = []\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA:{\n    db.collection(\"agendas\")\n    .where(\"id\",\"==\",action.payload)\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => doc.data());\n      if(data.length > 0)\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...data}))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA_SUCCESS:{\n\n     return action.payload ? action.payload[0] : state\n\n    }\n    case ACTIONS.LOAD_AGENDA_FAIL:{\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA:{\n      let _id =''\n      db.collection(\"agendas\")\n    .where(\"id\",\"==\",action.payload.id)\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {\n        _id = doc.id\n        return doc.data()});\n        db.collection(\"agendas\").doc(_id)\n        .update(action.payload).then(()=>{\n          console.log(\"success\")\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n     });\n    })\n     \n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n    let stateCopy = _.cloneDeep(action.payload)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n    return stateCopy\n    }\n    case ACTIONS.UPDATE_AGENDA_FAIL:{\n   \n    return state\n    }\n    default: \n      return {\n        ...state\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}