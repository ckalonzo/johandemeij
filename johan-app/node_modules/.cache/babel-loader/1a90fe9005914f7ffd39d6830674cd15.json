{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { updatePostImage, createPost, uploadPostImage } from \"API/indexAPI\";\nimport _ from \"lodash\";\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {\n  currentID: ''\n};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_POST:\n      {\n        createPost(action.payload).then(json => {\n          console.log(action, json);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS, json));\n        }).catch(err => {\n          console.log(action, err);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_FAIL, err));\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.INSERT_POST_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.INSERT_POST_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.INSERT_POST_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.INSERT_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return state;\n      }\n\n    case ACTIONS.INSERT_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.currentID = action.payload;\n        fetch('http://localhost:3001/api/loadPostByID/' + action.payload).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return action.payload[0];\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        console.log(\"STATECOPY==> \", stateCopy);\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","updatePostImage","createPost","uploadPostImage","_","NavDropdown","initialState","currentID","singlePostReducer","state","action","type","CREATE_NEW_POST","payload","then","json","console","log","asyncDispatch","CREATE_NEW_POST_SUCCESS","catch","err","CREATE_NEW_POST_FAIL","INSERT_POST_IMAGE","stateCopy","cloneDeep","image","status","INSERT_POST_IMAGE_SUCCESS","submitted","INSERT_POST_IMAGE_FAIL","response","message","UPLOAD_IMAGE_FAIL","newImage","albumID","caption","cover","imageName","data","filename","UPDATE_POST_IMAGE","LOAD_ARTICLE","LOAD_POST","fetch","res","LOAD_POST_SUCCESS","LOAD_POST_FAIL","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","UPLOAD_IMAGE_SUCCESS","_id","updatedAt","Date","now","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","ID"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updatePostImage,createPost,uploadPostImage} from \"API/indexAPI\"\nimport _ from \"lodash\"\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {\n  currentID:''\n};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n\n      case ACTIONS.CREATE_NEW_POST: {\n        createPost(action.payload).then(json =>{\n          console.log(action,json)\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,json))\n        }).catch(err => {\n          console.log(action,err)\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_FAIL,err))\n        })\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_FAIL: {\n        return state\n      }\n      \n      case ACTIONS.INSERT_POST_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let image = stateCopy.image\n        uploadPostImage(image).then((json)=>{\n\n         if(json.status!==404 || json.status!==500) {\n           action.asyncDispatch(mainAction(ACTIONS.INSERT_POST_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n         } else {\n           action.asyncDispatch(mainAction(ACTIONS.INSERT_POST_IMAGE_FAIL,json.response.message))\n         }\n       }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n     \n       return state\n     }\n      case ACTIONS.INSERT_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n         \n         let newImage = {\n           albumID:action.payload.submitted.albumID,\n           caption:action.payload.submitted.caption,\n           cover:action.payload.submitted.cover,\n           imageName:action.payload.json.data.filename\n         }\n         stateCopy.currentID = action.payload.submitted.albumID\n         action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return state\n      }\n      case ACTIONS.INSERT_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n       let stateCopy = _.cloneDeep(state)\n       stateCopy.currentID = action.payload\n        fetch ('http://localhost:3001/api/loadPostByID/'+ action.payload)\n        .then((data)=> data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,res.data))\n        \n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,err)))\n        return stateCopy\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n        return action.payload[0]\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n        updatePost(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          \n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          stateCopy.currentID = action.payload.submitted.albumID\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        console.log(\"STATECOPY==> \",stateCopy)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n\n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}