{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        // db.collection(\"agendas\")\n        // .where(\"year\",\"==\",\"2020\")\n        // .orderBy('month','asc')\n        // .get()\n        // .then(querySnapshot => {\n        //   const data = querySnapshot.docs.map(doc => doc.data());\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n        // });\n        db.collection(\"agendas\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              post.title = title[0];\n              post.date = `${post.year}-${post.month}-${post.day}`;\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n\n          if (data.length > 0) {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, data));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL, {\n              error: \"Failed to retrieve agenda\"\n            }));\n          }\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return { ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","collection","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_AGENDAS_SUCCESS","LOAD_CD_AGENDA_SUCCESS","payload","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","agendas","d","Date","day","getDay","month","getMonth","toString","year","getFullYear","stateCopy","where","orderBy","post","i","title","filter","presentation","id","cd","cdName","date","cloneDeep","LOAD_AGENDAS_FAIL","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","error"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n\n      // db.collection(\"agendas\")\n      // .where(\"year\",\"==\",\"2020\")\n      // .orderBy('month','asc')\n      // .get()\n      // .then(querySnapshot => {\n      //   const data = querySnapshot.docs.map(doc => doc.data());\n      //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n      // });\n      \n\n      db.collection(\"agendas\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,data))\n      });\n      \n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n              post.title = title[0]; \n              post.date=`${post.year}-${post.month}-${post.day}`\n              return post\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_AGENDA:{\n       \n        db.collection(\"agendas\")\n      .where(\"id\",\"==\",action.payload)\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        \n        if(data.length > 0){\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,data))\n      } else {\n         action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL,{error:\"Failed to retrieve agenda\"}))\n      }\n       \n      });\n      return state\n      }\n      case ACTIONS.LOAD_AGENDA_SUCCESS:{\n        return {...action.payload[0]}\n      }\n      case ACTIONS.LOAD_AGENDA_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}