{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { updatePostImage, createPost, uploadPostImage, createPostImage, deletePostImage, deletePost } from \"API/indexAPI\";\nimport { db, storageRef, ref, storage } from \"../../firebase\";\nimport _ from 'lodash';\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {\n  currentID: ''\n};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_POST_IMAGE:\n      {\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"posts\").add(stateCopy).then(function (docRef) {\n          console.log(docRef);\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS, stateCopy));\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST:\n      {\n        db.collection(\"posts\").where('ID', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE:\n      {\n        console.log(action);\n        db.collection(\"posts\").where('ID', '==', action.payload.albumID).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('images/posts/' + action.payload.image.name).delete(action.payload.image);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('images/posts').child(action.payload.image.name).getDownloadURL().then(url => {\n            console.log(url);\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        let post_id = ''; //////====>\n\n        db.collection(\"posts\") //.where(\"ID\",'==',action.payload)\n        .where(\"ID\", '==', action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            post_id = doc.id;\n            return doc.data();\n          });\n\n          let stateCopy = _.cloneDeep(data);\n\n          if (stateCopy[0]) stateCopy[0]._id = post_id;\n          let _id = '';\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, stateCopy)); //=======================================================\n\n          db.collection(\"postimages\").where(\"albumID\", '==', action.payload).get().then(snapshotChanges => {\n            const data = snapshotChanges.docs.map(doc => {\n              _id = doc.id;\n              return doc.data();\n            });\n            stateCopy.map((post, i) => {\n              //    data[0]._id =  _id\n              return stateCopy[i].image = data;\n            });\n\n            if (snapshotChanges.size > 0) {\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, stateCopy));\n            } else {\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL, {\n                error: \"could not find this record\"\n              }));\n            }\n          }); //========================================================\n        }); //////====>\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        db.collection(\"posts\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE:\n      {\n        console.log(action.payload);\n        let image = {\n          albumID: action.payload.albumID,\n          caption: action.payload.caption,\n          cover: action.payload.cover,\n          imageName: action.payload.image.name\n        };\n        db.collection(\"postimages\").doc().set(image).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('images/posts/' + action.payload.image.name).put(action.payload.image);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('images/posts').child(action.payload.image.name).getDownloadURL().then(url => {\n            console.log(url);\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","updatePostImage","createPost","uploadPostImage","createPostImage","deletePostImage","deletePost","db","storageRef","ref","storage","_","NavDropdown","initialState","currentID","singlePostReducer","state","action","type","CREATE_NEW_POST_IMAGE","payload","then","json","asyncDispatch","CREATE_NEW_POST_IMAGE_SUCCESS","catch","err","CREATE_NEW_POST_IMAGE_FAIL","stateCopy","cloneDeep","LOAD_POST","ID","CREATE_NEW_POST","collection","add","docRef","console","log","_id","id","CREATE_NEW_POST_SUCCESS","CREATE_NEW_POST_FAIL","DELETE_POST","where","get","querySnapshot","forEach","doc","delete","DELETE_POST_SUCCESS","LOAD_DASHBOARD_POSTS","DELETE_POST_FAIL","DELETE_POST_IMAGE","albumID","DELETE_POST_IMAGE_SUCCESS","postImageRef","image","name","on","snapshot","error","child","getDownloadURL","url","DELETE_POST_IMAGE_FAIL","LOAD_ARTICLE","post_id","data","docs","map","LOAD_POST_SUCCESS","snapshotChanges","post","i","size","LOAD_POST_FAIL","UPDATE_POST","update","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","UPLOAD_POST_IMAGE","set","UPLOAD_POST_IMAGE_SUCCESS","put","UPLOAD_POST_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updatePostImage,createPost,uploadPostImage,createPostImage,deletePostImage,deletePost} from \"API/indexAPI\"\nimport { db, storageRef , ref,storage} from \"../../firebase\";\nimport _ from 'lodash'\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {\n  currentID:''\n};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_POST_IMAGE:{\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST: {\n        let stateCopy = _.cloneDeep(action.payload)\n      \n        db.collection(\"posts\")\n          .add(stateCopy)\n          .then(function(docRef){\n            console.log(docRef)\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,stateCopy))\n          });\n        return stateCopy\n      }\n      case ACTIONS.CREATE_NEW_POST_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_FAIL: {\n        return state\n      }\n      case ACTIONS.DELETE_POST:{\n\n         db.collection(\"posts\")\n         .where('ID','==',action.payload)\n          .get()\n          .then((querySnapshot) => {\n            querySnapshot.forEach((doc)=> doc.ref.delete())\n            action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS,[]))\n          });\n        return state\n      }  \n      case ACTIONS.DELETE_POST_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS,[]))\n        return state\n      }  \n      case ACTIONS.DELETE_POST_FAIL:{\n        return action.payload\n      }  \n      case ACTIONS.DELETE_POST_IMAGE:{\n        console.log(action)\n        db.collection(\"posts\")\n        .where('ID','==',action.payload.albumID)\n         .get()\n         .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=> doc.ref.delete())\n           action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS,action.payload))\n         });\n        return state\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_SUCCESS:{\n\n        let postImageRef = storage.ref('images/posts/'+action.payload.image.name).delete(action.payload.image);\n        postImageRef.on('state_changed',(snapshot)=>{\n          //progress function\n        },(error)=>{\n          //error\n          console.log(error)\n        },()=>{\n          //complete\n          storage.ref('images/posts').child(action.payload.image.name).getDownloadURL().then(url=>{\n            console.log(url)\n          })\n        })\n\n        return state\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n        let post_id = ''\n\n        //////====>\n        db.collection(\"posts\")\n        //.where(\"ID\",'==',action.payload)\n        .where(\"ID\",'==',action.payload)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => {\n            post_id=doc.id\n            return doc.data()}); \n\n            let stateCopy = _.cloneDeep(data)\n            if(stateCopy[0])\n            stateCopy[0]._id = post_id\n            let _id = ''\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy))\n             //=======================================================\n\n                  db.collection(\"postimages\")\n                  .where(\"albumID\",'==',action.payload)\n                  .get()\n                  .then(snapshotChanges => {\n                    \n                      const data = snapshotChanges.docs.map(doc => {\n                        _id=doc.id\n                        return doc.data()});\n                      \n                      stateCopy.map((post,i)=>{\n                    //    data[0]._id =  _id\n                      return stateCopy[i].image = data\n                    })\n                    if (snapshotChanges.size > 0) {\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy))} else {\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,{error:\"could not find this record\"}))}\n                  });\n\n              //========================================================\n\n         });\n          //////====>\n        return state\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n        \n        return {state,...action.payload[0]}\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n\n        db.collection(\"posts\").doc(action.payload._id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,action.payload))\n        });\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          \n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          stateCopy.currentID = action.payload.submitted.albumID\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE:{\n        console.log(action.payload)\n        let image = {\n          albumID: action.payload.albumID,\ncaption: action.payload.caption,\ncover: action.payload.cover,\nimageName:action.payload.image.name\n        }\n      \n      db.collection(\"postimages\")\n       .doc()\n       .set(image)\n       .then(() => {\n       \n         action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS,action.payload))\n       });\n       \n       return state\n     }\n      case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:{\n        let postImageRef = storage.ref('images/posts/'+action.payload.image.name).put(action.payload.image);\n        postImageRef.on('state_changed',(snapshot)=>{\n          //progress function\n        },(error)=>{\n          //error\n          console.log(error)\n        },()=>{\n          //complete\n          storage.ref('images/posts').child(action.payload.image.name).getDownloadURL().then(url=>{\n            console.log(url)\n          })\n        })\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE_FAIL:{\n        return state\n      }\n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}