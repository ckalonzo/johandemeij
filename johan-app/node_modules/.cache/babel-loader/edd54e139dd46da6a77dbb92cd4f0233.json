{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database, db, dbRef, agendaRef } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"agendas\").add(stateCopy).then(docRef => {\n          db.collection(\"agendas\").doc(docRef.id).update(stateCopy).then(() => {\n            stateCopy._id = docRef.id;\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n          });\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2020');\n        agendaYearRef.on('value', (snap, i) => {\n          let agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            if (agenda.month >= 6) return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, _.orderBy(agendas, 'day', 'asc')));\n        }); // let query = agendaRef.child(\"year\").equalTo(\"2020\")\n        // query.on('child_added',DataSnapshot =>{\n        //    let data = DataSnapshot\n        //    console.log(data);\n        // })\n        // let _id = ''\n        // let stateCopy = ''\n        // db.collection(\"agendas\")\n        // .where(\"year\",\"==\",\"2020\")\n        // // .orderBy(\"month\",\"desc\")\n        // // .orderBy(\"day\",\"desc\")\n        // .get()\n        // .then(querySnapshot => {\n        // const data = querySnapshot.docs.map(doc => {\n        //   _id = doc.id\n        //   return doc.data()});\n        //   stateCopy = data\n        //   let newData = []\n        //   stateCopy.map((agenda,i)=>{\n        //     agenda._id = _id\n        //     agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        //     if(i >= action.payload.skip && i <= action.payload.limit)\n        //     newData.push(agenda)\n        //   })\n        // });\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString(); // let stateCopy = ''\n        // //=======================================================\n        // db.collection(\"agendas\")\n        // //.where(\"year\",'==',year)\n        // .where(\"month\",'>=',month)\n        // .orderBy(\"month\",\"asc\")\n        // .orderBy(\"day\",\"asc\")\n        // .get()\n        // .then(querySnapshot => {\n        // const data = querySnapshot.docs.map(doc => doc.data());\n        // stateCopy = data;\n        // //=======================================================\n        //   db.collection(\"presentations\")\n        //   // .where(\"id\",\"==\",stateCopy.cd.toString())\n        //   .get()\n        //   .then(querySnapshot => {\n        //     const data = querySnapshot.docs.map(doc => doc.data());\n        //     stateCopy.map((post,i)=>{\n        //     let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n        //     post.title = title[0]; \n        //     post.date=`${post.year}-${post.month}-${post.day}`\n        //     return post\n        //     })\n        //     action.asyncDispatch(mainAction(ACTIONS.action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy)),stateCopy))\n        //   });\n        // //========================================================\n        // });\n\n        var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2020');\n        agendaYearRef.on('value', (snap, i) => {\n          const agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = parseInt(agenda.month);\n\n            if (parseInt(agenda.month) >= month) {\n              db.collection(\"presentations\").get().then(querySnapshot => {\n                const data = querySnapshot.docs.map(doc => doc.data());\n                let title = { ...data.filter(presentation => presentation.id === agenda.cd).map(presentation => {\n                    return presentation.cdName;\n                  })\n                };\n                agenda.title = title[0];\n              });\n              return agendas.push(agenda);\n            }\n          });\n\n          let filteredAgendas = _.orderBy(agendas, ['month', 'day'], ['asc', 'asc']);\n\n          console.log(filteredAgendas);\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, filteredAgendas));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        let _id, stateCopy;\n\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          stateCopy = data;\n          if (stateCopy[0]) stateCopy[0]._id = _id;\n\n          if (data.length > 0) {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, stateCopy));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL, {\n              error: \"Failed to retrieve agenda\"\n            }));\n          }\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return { ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        console.log(action);\n        db.collection(\"agendas\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","database","db","dbRef","agendaRef","_","initialState","agendaReducer","state","action","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","collection","add","then","docRef","doc","id","update","_id","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","DELETE_AGENDA","where","get","querySnapshot","forEach","ref","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","agendaYearRef","orderByChild","startAt","endAt","on","snap","i","agendas","data","val","Object","values","map","agenda","date","month","day","year","push","LOAD_CD_AGENDA_SUCCESS","orderBy","LOAD_CD_AGENDA_FAIL","d","Date","getDay","getMonth","toString","getFullYear","parseInt","docs","title","filter","presentation","cd","cdName","filteredAgendas","console","log","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","error","UPDATE_AGENDA","UPDATE_AGENDA_SUCCESS"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database,db , dbRef,agendaRef} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n    let stateCopy = _.cloneDeep(action.payload)\n    db.collection(\"agendas\")\n    .add(stateCopy).then((docRef)=>{\n    db.collection(\"agendas\")\n    .doc(docRef.id)\n    .update(stateCopy).then(()=>{\n      stateCopy._id = docRef.id\n      action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n    });\n    })\n    return stateCopy\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.DELETE_AGENDA:{\n\n    db.collection(\"agendas\")\n    .where('id','==',action.payload)\n    .get()\n    .then((querySnapshot) => {\n      querySnapshot.forEach((doc)=> doc.ref.delete())\n      action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n    });\n    return state\n    }  \n    case ACTIONS.DELETE_AGENDA_SUCCESS:{\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n    return state\n    }  \n    case ACTIONS.LOAD_CD_AGENDA: {\n     var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2020')\n     agendaYearRef.on('value',(snap,i)=>{\n    \n    let agendas = []\n    const data = snap.val()\n    Object.values(data).map(agenda=>{\n      agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n      if(agenda.month >= 6 )\n      return agendas.push(agenda)\n    })\n     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,_.orderBy(agendas,'day','asc')))\n    })\n   \n      // let query = agendaRef.child(\"year\").equalTo(\"2020\")\n      // query.on('child_added',DataSnapshot =>{\n      //    let data = DataSnapshot\n      //    console.log(data);\n      // })\n     \n\n    // let _id = ''\n    // let stateCopy = ''\n    // db.collection(\"agendas\")\n    // .where(\"year\",\"==\",\"2020\")\n    // // .orderBy(\"month\",\"desc\")\n    // // .orderBy(\"day\",\"desc\")\n    // .get()\n    // .then(querySnapshot => {\n    // const data = querySnapshot.docs.map(doc => {\n    //   _id = doc.id\n    //   return doc.data()});\n    //   stateCopy = data\n    //   let newData = []\n    //   stateCopy.map((agenda,i)=>{\n    //     agenda._id = _id\n    //     agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n    //     if(i >= action.payload.skip && i <= action.payload.limit)\n    //     newData.push(agenda)\n    //   })\n   \n    // });\n\n    return state\n    }\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n    return action.payload\n    }\n    case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS: {\n    let d = new Date();\n    let day = d.getDay();\n    let month = (d.getMonth() + 1).toString()\n    let year = d.getFullYear().toString();\n\n    // let stateCopy = ''\n    // //=======================================================\n    // db.collection(\"agendas\")\n    // //.where(\"year\",'==',year)\n    // .where(\"month\",'>=',month)\n    // .orderBy(\"month\",\"asc\")\n    // .orderBy(\"day\",\"asc\")\n    // .get()\n    // .then(querySnapshot => {\n    // const data = querySnapshot.docs.map(doc => doc.data());\n    // stateCopy = data;\n\n    // //=======================================================\n    //   db.collection(\"presentations\")\n    //   // .where(\"id\",\"==\",stateCopy.cd.toString())\n    //   .get()\n    //   .then(querySnapshot => {\n    //     const data = querySnapshot.docs.map(doc => doc.data());\n\n    //     stateCopy.map((post,i)=>{\n\n    //     let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n    //     post.title = title[0]; \n    //     post.date=`${post.year}-${post.month}-${post.day}`\n    //     return post\n    //     })\n\n    //     action.asyncDispatch(mainAction(ACTIONS.action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy)),stateCopy))\n    //   });\n    // //========================================================\n    // });\n    var agendaYearRef = database.ref('agendas').orderByChild('year').startAt('2020').endAt('2020')\n    agendaYearRef.on('value',(snap,i)=>{\n   \nconst agendas = []\n\n   const data = snap.val()\n      \n\n   Object.values(data).map(agenda=>{\n     agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n     agenda.month = parseInt(agenda.month)\n     if(parseInt(agenda.month) >= month ){\n\n      db.collection(\"presentations\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        let title = {...data.filter(presentation=>presentation.id===agenda.cd).map(presentation=>{return presentation.cdName})}\n        agenda.title =  title[0]\n        \n      });\n     return agendas.push(agenda)}\n   })\n   let filteredAgendas = _.orderBy(agendas,['month','day'],['asc','asc'])\n   console.log(filteredAgendas)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,filteredAgendas))\n   })\n\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n   \n\n\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDAS_FAIL:{\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA:{\n    let _id,stateCopy \n    db.collection(\"agendas\")\n    .where(\"id\",\"==\",action.payload)\n    .get()\n    .then(querySnapshot => {\n    const data = querySnapshot.docs.map(doc => {\n    _id = doc.id\n    return doc.data()});\n    stateCopy= data\n    if(stateCopy[0])\n    stateCopy[0]._id = _id\n      \n\n    if(data.length > 0){\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,stateCopy))\n    } else {\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL,{error:\"Failed to retrieve agenda\"}))\n    }\n    });\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA_SUCCESS:{\n    return {...action.payload[0]}\n    }\n    case ACTIONS.LOAD_AGENDA_FAIL:{\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA:{\n    console.log(action)\n    db.collection(\"agendas\")\n    .doc(action.payload._id)\n    .update(action.payload).then(()=>{\n      action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n    });\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n    let stateCopy = _.cloneDeep(state)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n    return {state,...action.payload}\n    }\n    default: \n      return {\n        ...state\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}