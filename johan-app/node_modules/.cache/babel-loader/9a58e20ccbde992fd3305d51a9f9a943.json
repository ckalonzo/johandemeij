{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { changePostImage, updatePostImage, createPost, insertPostImage } from \"API/indexAPI\";\nimport _ from \"lodash\";\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {\n  currentID: ''\n};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_POST:\n      {\n        createPost(action.payload).then(json => {\n          console.log(action, json);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS, json));\n        }).catch(err => {\n          console.log(action, err);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_FAIL, err));\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.INSERT_POST_IMAGE:\n      {\n        insertPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.INSERT_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.INSERT_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.INSERT_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.INSERT_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.currentID = action.payload;\n        fetch('http://localhost:3001/api/loadPostByID/' + action.payload).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return action.payload[0];\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        changePostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        console.log(\"STATECOPY==> \", stateCopy);\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","changePostImage","updatePostImage","createPost","insertPostImage","_","NavDropdown","initialState","currentID","singlePostReducer","state","action","type","CREATE_NEW_POST","payload","then","json","console","log","asyncDispatch","CREATE_NEW_POST_SUCCESS","catch","err","CREATE_NEW_POST_FAIL","INSERT_POST_IMAGE","INSERT_POST_IMAGE_SUCCESS","INSERT_POST_IMAGE_FAIL","stateCopy","cloneDeep","LOAD_POST","ID","LOAD_ARTICLE","fetch","data","res","LOAD_POST_SUCCESS","LOAD_POST_FAIL","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","image","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","_id","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {changePostImage,updatePostImage,createPost,insertPostImage} from \"API/indexAPI\"\nimport _ from \"lodash\"\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {\n  currentID:''\n};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n\n      case ACTIONS.CREATE_NEW_POST: {\n        createPost(action.payload).then(json =>{\n          console.log(action,json)\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,json))\n        }).catch(err => {\n          console.log(action,err)\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_FAIL,err))\n        })\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_FAIL: {\n        return state\n      }\n      \n      case ACTIONS.INSERT_POST_IMAGE:{\n        \n        insertPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.INSERT_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.INSERT_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.INSERT_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.INSERT_POST_IMAGE_FAIL:{\n        return state\n      }\n      \n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n       let stateCopy = _.cloneDeep(state)\n       stateCopy.currentID = action.payload\n        fetch ('http://localhost:3001/api/loadPostByID/'+ action.payload)\n        .then((data)=> data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,res.data))\n        \n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,err)))\n        return stateCopy\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n        return action.payload[0]\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n        updatePost(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         changePostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          \n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          stateCopy.currentID = action.payload.submitted.albumID\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        console.log(\"STATECOPY==> \",stateCopy)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n\n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}