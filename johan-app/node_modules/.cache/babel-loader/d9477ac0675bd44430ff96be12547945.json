{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function pageReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_PAGE:\n      {\n        db.collection(\"pages\").where('id', '==', action.payload).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PAGE_SUCCESS, { ...data\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PAGE_SUCCESS:\n      {\n        return action.payload[0];\n      }\n\n    case ACTIONS.LOAD_PAGES:\n      {\n        db.collection(\"pages\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PAGES_SUCCESS, { ...data\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PAGES_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.UPDATE_PAGE:\n      {\n        let _id = '';\n        db.collection(\"pages\").where(\"id\", \"==\", action.payload.id).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          db.collection(\"pages\").doc(_id).update(action.payload).then(() => {\n            console.log(\"success\");\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PAGE_SUCCESS, action.payload));\n          });\n        });\n      }\n\n    case ACTIONS.UPDATE_PAGE_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Websites/johandemeij/johan-app/src/redux/reducers/pages.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","pageReducer","state","action","type","LOAD_PAGE","collection","where","payload","get","then","snapshot","data","docs","map","doc","asyncDispatch","LOAD_PAGE_SUCCESS","LOAD_PAGES","LOAD_PAGES_SUCCESS","UPDATE_PAGE","_id","id","update","console","log","UPDATE_PAGE_SUCCESS"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAkB,gBAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AAGA,eAAe,SAASC,WAAT,CAAsBC,KAAK,GAAGF,YAA9B,EAA4CG,MAA5C,EAAoD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKR,OAAO,CAACS,SAAb;AAAwB;AACtBP,QAAAA,EAAE,CAACQ,UAAH,CAAc,OAAd,EACCC,KADD,CACO,IADP,EACY,IADZ,EACiBJ,MAAM,CAACK,OADxB,EAECC,GAFD,GAGCC,IAHD,CAGOC,QAAD,IAAc;AAChB,gBAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAkBC,GAAG,IAAI;AAAC,mBAAOA,GAAG,CAACH,IAAJ,EAAP;AAAkB,WAA5C,CAAb;AACAT,UAAAA,MAAM,CAACa,aAAP,CAAqBnB,UAAU,CAACD,OAAO,CAACqB,iBAAT,EAA2B,EAAC,GAAGL;AAAJ,WAA3B,CAA/B;AACH,SAND;AAOA,eAAOV,KAAP;AACD;;AACD,SAAMN,OAAO,CAACqB,iBAAd;AAAiC;AAC/B,eAAOd,MAAM,CAACK,OAAP,CAAe,CAAf,CAAP;AACD;;AACD,SAAKZ,OAAO,CAACsB,UAAb;AAAyB;AACvBpB,QAAAA,EAAE,CAACQ,UAAH,CAAc,OAAd,EACCG,GADD,GAECC,IAFD,CAEOC,QAAD,IAAY;AACd,gBAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAkBC,GAAG,IAAI;AAAC,mBAAOA,GAAG,CAACH,IAAJ,EAAP;AAAkB,WAA5C,CAAb;AACAT,UAAAA,MAAM,CAACa,aAAP,CAAqBnB,UAAU,CAACD,OAAO,CAACuB,kBAAT,EAA4B,EAAC,GAAGP;AAAJ,WAA5B,CAA/B;AACH,SALD;AAMA,eAAOV,KAAP;AACD;;AACD,SAAMN,OAAO,CAACuB,kBAAd;AAAkC;AAEhC,eAAOhB,MAAM,CAACK,OAAd;AACD;;AACD,SAAKZ,OAAO,CAACwB,WAAb;AAAyB;AACvB,YAAIC,GAAG,GAAE,EAAT;AACAvB,QAAAA,EAAE,CAACQ,UAAH,CAAc,OAAd,EACDC,KADC,CACK,IADL,EACU,IADV,EACeJ,MAAM,CAACK,OAAP,CAAec,EAD9B,EAEDb,GAFC,GAGDC,IAHC,CAGIC,QAAQ,IAAI;AAChB,gBAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAkBC,GAAG,IAAI;AACpCM,YAAAA,GAAG,GAAGN,GAAG,CAACO,EAAV;AACA,mBAAOP,GAAG,CAACH,IAAJ,EAAP;AAAkB,WAFP,CAAb;AAGEd,UAAAA,EAAE,CAACQ,UAAH,CAAc,OAAd,EAAuBS,GAAvB,CAA2BM,GAA3B,EACCE,MADD,CACQpB,MAAM,CAACK,OADf,EACwBE,IADxB,CAC6B,MAAI;AAC/Bc,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACFtB,YAAAA,MAAM,CAACa,aAAP,CAAqBnB,UAAU,CAACD,OAAO,CAAC8B,mBAAT,EAA6BvB,MAAM,CAACK,OAApC,CAA/B;AACF,WAJE;AAKH,SAZC;AAaD;;AACD,SAAKZ,OAAO,CAAC8B,mBAAb;AAAiC;AAC7B,eAAOvB,MAAM,CAACK,OAAd;AACH;;AACD;AACE,aAAO,EACL,GAAGN;AADE,OAAP;AAhDJ;AAoDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db} from \"../../firebase\";\nimport _ from \"lodash\"\nconst initialState = {\n   \n};\nexport default function pageReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_PAGE: {\n        db.collection(\"pages\")\n        .where('id','==',action.payload)\n        .get()\n        .then((snapshot) => {\n            const data = snapshot.docs.map(doc => {return doc.data()});\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PAGE_SUCCESS,{...data}))\n        })\n        return state\n      }\n      case  ACTIONS.LOAD_PAGE_SUCCESS: {\n        return action.payload[0]\n      }\n      case ACTIONS.LOAD_PAGES: {\n        db.collection(\"pages\")\n        .get()\n        .then((snapshot)=>{\n            const data = snapshot.docs.map(doc => {return doc.data()});\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PAGES_SUCCESS,{...data}))\n        })\n        return state\n      }\n      case  ACTIONS.LOAD_PAGES_SUCCESS: {\n     \n        return action.payload\n      }\n      case ACTIONS.UPDATE_PAGE:{\n        let _id =''\n        db.collection(\"pages\")\n      .where(\"id\",\"==\",action.payload.id)\n      .get()\n      .then(snapshot => {\n        const data = snapshot.docs.map(doc => {\n          _id = doc.id\n          return doc.data()});\n          db.collection(\"pages\").doc(_id)\n          .update(action.payload).then(()=>{\n            console.log(\"success\")\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PAGE_SUCCESS,action.payload))\n       });\n      })\n      }\n      case ACTIONS.UPDATE_PAGE_SUCCESS:{\n          return action.payload\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}