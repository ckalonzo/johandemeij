{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { updatePostImage, uploadPostImage, createPostImage } from \"API/indexAPI\";\nimport { db, storage } from \"../../firebase\";\nimport _ from 'lodash';\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {\n  currentID: ''\n};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_POST_IMAGE:\n      {\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"posts\").add(stateCopy).then(function (docRef) {\n          console.log(docRef);\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS, stateCopy));\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST:\n      {\n        db.collection(\"posts\").where('ID', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE:\n      {\n        console.log(action);\n        db.collection(\"postimages\").where('albumID', '==', action.payload.ID).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('images/posts/' + action.payload.name);\n        postImageRef.delete().then(() => console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, action.payload.ID));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        let post_id = ''; //////====>\n\n        db.collection(\"posts\") //.where(\"ID\",'==',action.payload)\n        .where(\"ID\", '==', action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            post_id = doc.id;\n            return doc.data();\n          });\n\n          let stateCopy = _.cloneDeep(data);\n\n          if (stateCopy[0]) stateCopy[0]._id = post_id;\n          let _id = '';\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, stateCopy)); //=======================================================\n\n          db.collection(\"postimages\").where(\"albumID\", '==', action.payload).get().then(snapshotChanges => {\n            const data = snapshotChanges.docs.map(doc => {\n              _id = doc.id;\n              return doc.data();\n            });\n            stateCopy.map((post, i) => {\n              //    data[0]._id =  _id\n              return stateCopy[i].image = data;\n            });\n\n            if (snapshotChanges.size > 0) {\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, stateCopy));\n            } else {\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL, {\n                error: \"could not find this record\"\n              }));\n            }\n          }); //========================================================\n        }); //////====>\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        db.collection(\"posts\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE:\n      {\n        let image = {\n          albumID: action.payload.albumID,\n          caption: action.payload.caption,\n          cover: action.payload.cover,\n          imageName: action.payload.image.name\n        };\n        db.collection(\"postimages\").doc().set(image).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('posts/' + action.payload.image.name).put(action.payload.image);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('posts/').child(action.payload.image.name).getDownloadURL().then(url => {\n            console.log(url);\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","updatePostImage","uploadPostImage","createPostImage","db","storage","_","NavDropdown","initialState","currentID","singlePostReducer","state","action","type","CREATE_NEW_POST_IMAGE","payload","then","json","asyncDispatch","CREATE_NEW_POST_IMAGE_SUCCESS","catch","err","CREATE_NEW_POST_IMAGE_FAIL","stateCopy","cloneDeep","LOAD_POST","ID","CREATE_NEW_POST","collection","add","docRef","console","log","_id","id","CREATE_NEW_POST_SUCCESS","CREATE_NEW_POST_FAIL","DELETE_POST","where","get","querySnapshot","forEach","doc","ref","delete","DELETE_POST_SUCCESS","LOAD_DASHBOARD_POSTS","DELETE_POST_FAIL","DELETE_POST_IMAGE","DELETE_POST_IMAGE_SUCCESS","postImageRef","name","DELETE_POST_IMAGE_FAIL","LOAD_ARTICLE","post_id","data","docs","map","LOAD_POST_SUCCESS","snapshotChanges","post","i","image","size","LOAD_POST_FAIL","error","UPDATE_POST","update","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","UPLOAD_POST_IMAGE","set","UPLOAD_POST_IMAGE_SUCCESS","put","on","snapshot","child","getDownloadURL","url","UPLOAD_POST_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updatePostImage,uploadPostImage,createPostImage} from \"API/indexAPI\"\nimport { db,storage} from \"../../firebase\";\nimport _ from 'lodash'\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {\n  currentID:''\n};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_POST_IMAGE:{\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST: {\n        let stateCopy = _.cloneDeep(action.payload)\n      \n        db.collection(\"posts\")\n          .add(stateCopy)\n          .then(function(docRef){\n            console.log(docRef)\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,stateCopy))\n          });\n        return stateCopy\n      }\n      case ACTIONS.CREATE_NEW_POST_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_FAIL: {\n        return state\n      }\n      case ACTIONS.DELETE_POST:{\n\n         db.collection(\"posts\")\n         .where('ID','==',action.payload)\n          .get()\n          .then((querySnapshot) => {\n            querySnapshot.forEach((doc)=> doc.ref.delete())\n            action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS,[]))\n          });\n        return state\n      }  \n      case ACTIONS.DELETE_POST_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS,[]))\n        return state\n      }  \n      case ACTIONS.DELETE_POST_FAIL:{\n        return action.payload\n      }  \n      case ACTIONS.DELETE_POST_IMAGE:{\n        console.log(action)\n        db.collection(\"postimages\")\n        .where('albumID','==',action.payload.ID)\n         .get()\n         .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=> doc.ref.delete())\n           action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS,action.payload))\n         });\n        return state\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_SUCCESS:{\n\n        let postImageRef = storage.ref('images/posts/'+action.payload.name)\n        postImageRef.delete().then(()=>console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,action.payload.ID))\n        return state\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n        let post_id = ''\n\n        //////====>\n        db.collection(\"posts\")\n        //.where(\"ID\",'==',action.payload)\n        .where(\"ID\",'==',action.payload)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => {\n            post_id=doc.id\n            return doc.data()}); \n\n            let stateCopy = _.cloneDeep(data)\n            if(stateCopy[0])\n            stateCopy[0]._id = post_id\n            let _id = ''\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy))\n             //=======================================================\n\n                  db.collection(\"postimages\")\n                  .where(\"albumID\",'==',action.payload)\n                  .get()\n                  .then(snapshotChanges => {\n                    \n                      const data = snapshotChanges.docs.map(doc => {\n                        _id=doc.id\n                        return doc.data()});\n                      \n                      stateCopy.map((post,i)=>{\n                    //    data[0]._id =  _id\n                      return stateCopy[i].image = data\n                    })\n                    if (snapshotChanges.size > 0) {\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,stateCopy))} else {\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,{error:\"could not find this record\"}))}\n                  });\n\n              //========================================================\n\n         });\n          //////====>\n        return state\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n        \n        return {state,...action.payload[0]}\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n\n        db.collection(\"posts\").doc(action.payload._id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,action.payload))\n        });\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          \n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          stateCopy.currentID = action.payload.submitted.albumID\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE:{\n        let image = {\n          albumID: action.payload.albumID,\ncaption: action.payload.caption,\ncover: action.payload.cover,\nimageName:action.payload.image.name\n        }\n      \n      db.collection(\"postimages\")\n       .doc()\n       .set(image)\n       .then(() => {\n         action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS,action.payload))\n       });\n       \n       return state\n     }\n      case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:{\n        let postImageRef = storage.ref('posts/'+action.payload.image.name).put(action.payload.image);\n        postImageRef.on('state_changed',(snapshot)=>{\n          //progress function\n        },(error)=>{\n          //error\n          console.log(error)\n        },()=>{\n          //complete\n          storage.ref('posts/').child(action.payload.image.name).getDownloadURL().then(url=>{\n            console.log(url)\n          })\n        })\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE_FAIL:{\n        return state\n      }\n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}