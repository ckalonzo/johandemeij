{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function catalogueReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_MUSIC_CATALOGUE:\n      {\n        db.collection(\"musicalbums\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_CATALOGUE_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_CATALOGUE_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_MUSIC_CATALOGUE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.CREATE_CATALOGUE:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"musicalbums\").add(stateCopy).then(function (docRef) {\n          console.log(docRef);\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_CATALOGUE_SUCCESS, stateCopy));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_CATALOGUE_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_CATALOGUE:\n      {\n        db.collection(\"musicalbums\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_CATALOGUE_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_CATALOGUE_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_CATALOGUE, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_CATALOGUE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_CATALOGUE:\n      {\n        db.collection(\"musicalbums\").where(\"id\", '==', action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CATALOGUE_SUCCESS, ...data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CATALOGUE_SUCCESS:\n      {\n        return action.payload ? action.payload : state;\n      }\n\n    case ACTIONS.LOAD_CATALOGUE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CATALOGUE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let _id = console.log(stateCopy.id);\n\n        if (stateCopy.id) db.collection(\"musicalbums\").where(\"id\", '==', stateCopy.id).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          console.log(_id);\n        }); // db.collection(\"musicalbums\").doc(_id)\n        // .update(stateCopy).then(()=>{\n        //   action.asyncDispatch(mainAction(ACTIONS.UPDATE_CATALOGUE_SUCCESS,stateCopy))\n        // });\n\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CATALOGUE_SUCCESS:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CATALOGUE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/musicCatalogue.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","catalogueReducer","state","action","type","LOAD_MUSIC_CATALOGUE","collection","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_MUSIC_CATALOGUE_SUCCESS","payload","LOAD_MUSIC_CATALOGUE_FAIL","CREATE_CATALOGUE","console","log","stateCopy","cloneDeep","add","docRef","_id","id","CREATE_CATALOGUE_SUCCESS","DELETE_CATALOGUE","where","forEach","ref","delete","DELETE_CATALOGUE_SUCCESS","DELETE_CATALOGUE_FAIL","LOAD_CATALOGUE","LOAD_CATALOGUE_SUCCESS","LOAD_CATALOGUE_FAIL","UPDATE_CATALOGUE","UPDATE_CATALOGUE_SUCCESS","UPDATE_CATALOGUE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\"\nconst initialState = {};\nexport default function catalogueReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_MUSIC_CATALOGUE: {\n      db.collection(\"musicalbums\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_CATALOGUE_SUCCESS,data))\n      });\n\n\n        return state\n      }\n      case ACTIONS.LOAD_MUSIC_CATALOGUE_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_MUSIC_CATALOGUE_FAIL: {\n\n        return state\n      }\n      case ACTIONS.CREATE_CATALOGUE:{\n        console.log(action)\n        let stateCopy = _.cloneDeep(action.payload)\n      \n        db.collection(\"musicalbums\")\n          .add(stateCopy)\n          .then(function(docRef){\n            console.log(docRef)\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_CATALOGUE_SUCCESS,stateCopy))\n          });\n          return state\n      }\n      case ACTIONS.CREATE_CATALOGUE_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.DELETE_CATALOGUE:{\n        db.collection(\"musicalbums\")\n        .where('id','==',action.payload)\n         .get()\n         .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=> doc.ref.delete())\n           action.asyncDispatch(mainAction(ACTIONS.DELETE_CATALOGUE_SUCCESS,[]))\n         });\n        return state\n      }\n      case ACTIONS.DELETE_CATALOGUE_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_CATALOGUE,[]))\n        return state\n      }\n      case ACTIONS.DELETE_CATALOGUE_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_CATALOGUE:{\n        db.collection(\"musicalbums\")\n        .where(\"id\",'==',action.payload)\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_CATALOGUE_SUCCESS,...data))\n          });\n        return state\n      }\n      case ACTIONS.LOAD_CATALOGUE_SUCCESS:{\n        \n        return action.payload ? action.payload : state\n      }\n      case ACTIONS.LOAD_CATALOGUE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_CATALOGUE:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let _id = \n        console.log(stateCopy.id)\n        if(stateCopy.id)\n        db.collection(\"musicalbums\")\n        .where(\"id\",'==',stateCopy.id)\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => {\n              _id = doc.id\n              return doc.data()});\n           console.log( _id)\n          });\n       // db.collection(\"musicalbums\").doc(_id)\n            // .update(stateCopy).then(()=>{\n            //   action.asyncDispatch(mainAction(ACTIONS.UPDATE_CATALOGUE_SUCCESS,stateCopy))\n            // });\n        return state\n      }\n      case ACTIONS.UPDATE_CATALOGUE_SUCCESS:{\n        return state\n      }\n      case ACTIONS.UPDATE_CATALOGUE_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}