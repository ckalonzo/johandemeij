{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst semver = require(\"semver\");\n\nconst call_credentials_1 = require(\"./call-credentials\");\n\nexports.CallCredentials = call_credentials_1.CallCredentials;\n\nconst channel_1 = require(\"./channel\");\n\nexports.connectivityState = channel_1.ConnectivityState;\nexports.Channel = channel_1.ChannelImplementation;\n\nconst channel_credentials_1 = require(\"./channel-credentials\");\n\nexports.ChannelCredentials = channel_credentials_1.ChannelCredentials;\n\nconst client_1 = require(\"./client\");\n\nexports.Client = client_1.Client;\n\nconst constants_1 = require(\"./constants\");\n\nexports.logVerbosity = constants_1.LogVerbosity;\nexports.status = constants_1.Status;\n\nconst logging = require(\"./logging\");\n\nconst make_client_1 = require(\"./make-client\");\n\nexports.loadPackageDefinition = make_client_1.loadPackageDefinition;\nexports.makeClientConstructor = make_client_1.makeClientConstructor;\nexports.makeGenericClientConstructor = make_client_1.makeClientConstructor;\n\nconst metadata_1 = require(\"./metadata\");\n\nexports.Metadata = metadata_1.Metadata;\n\nconst server_1 = require(\"./server\");\n\nexports.Server = server_1.Server;\n\nconst server_credentials_1 = require(\"./server-credentials\");\n\nexports.ServerCredentials = server_credentials_1.ServerCredentials;\n\nconst status_builder_1 = require(\"./status-builder\");\n\nexports.StatusBuilder = status_builder_1.StatusBuilder;\n\nconst supportedNodeVersions = require('../../package.json').engines.node;\n\nif (!semver.satisfies(process.version, supportedNodeVersions)) {\n  throw new Error(`@grpc/grpc-js only works on Node ${supportedNodeVersions}`);\n}\n\nfunction mixin(...sources) {\n  const result = {};\n\n  for (const source of sources) {\n    for (const propName of Object.getOwnPropertyNames(source)) {\n      const property = source[propName]; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n      if (typeof property === 'function') {\n        result[propName] = property;\n      }\n    }\n  }\n\n  return result;\n}\n/**** Client Credentials ****/\n// Using assign only copies enumerable properties, which is what we want\n\n\nexports.credentials = mixin({\n  /**\n   * Create a gRPC credential from a Google credential object.\n   * @param googleCredentials The authentication client to use.\n   * @return The resulting CallCredentials object.\n   */\n  createFromGoogleCredential: googleCredentials => {\n    return call_credentials_1.CallCredentials.createFromMetadataGenerator((options, callback) => {\n      // google-auth-library pre-v2.0.0 does not have getRequestHeaders\n      // but has getRequestMetadata, which is deprecated in v2.0.0\n      let getHeaders;\n\n      if (typeof googleCredentials.getRequestHeaders === 'function') {\n        getHeaders = googleCredentials.getRequestHeaders(options.service_url);\n      } else {\n        getHeaders = new Promise((resolve, reject) => {\n          googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n\n            resolve(headers);\n          });\n        });\n      }\n\n      getHeaders.then(headers => {\n        const metadata = new metadata_1.Metadata();\n\n        for (const key of Object.keys(headers)) {\n          metadata.add(key, headers[key]);\n        }\n\n        callback(null, metadata);\n      }, err => {\n        callback(err);\n      });\n    });\n  },\n\n  /**\n   * Combine a ChannelCredentials with any number of CallCredentials into a\n   * single ChannelCredentials object.\n   * @param channelCredentials The ChannelCredentials object.\n   * @param callCredentials Any number of CallCredentials objects.\n   * @return The resulting ChannelCredentials object.\n   */\n  combineChannelCredentials: (channelCredentials, ...callCredentials) => {\n    return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);\n  },\n\n  /**\n   * Combine any number of CallCredentials into a single CallCredentials\n   * object.\n   * @param first The first CallCredentials object.\n   * @param additional Any number of additional CallCredentials objects.\n   * @return The resulting CallCredentials object.\n   */\n  combineCallCredentials: (first, ...additional) => {\n    return additional.reduce((acc, other) => acc.compose(other), first);\n  }\n}, channel_credentials_1.ChannelCredentials, call_credentials_1.CallCredentials);\n/**\n * Close a Client object.\n * @param client The client to close.\n */\n\nexports.closeClient = client => client.close();\n\nexports.waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**** Unimplemented function stubs ****/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nexports.loadObject = (value, options) => {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\n\nexports.load = (filename, format, options) => {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\n\nexports.setLogger = logger => {\n  logging.setLogger(logger);\n};\n\nexports.setLogVerbosity = verbosity => {\n  logging.setLoggerVerbosity(verbosity);\n};\n\nexports.getClientChannel = client => {\n  return client_1.Client.prototype.getChannel.call(client);\n};\n\nvar client_interceptors_1 = require(\"./client-interceptors\");\n\nexports.ListenerBuilder = client_interceptors_1.ListenerBuilder;\nexports.RequesterBuilder = client_interceptors_1.RequesterBuilder;\nexports.InterceptingCall = client_interceptors_1.InterceptingCall;\nexports.InterceptorConfigurationError = client_interceptors_1.InterceptorConfigurationError;\n\nconst resolver = require(\"./resolver\");\n\nconst load_balancer = require(\"./load-balancer\");\n\n(() => {\n  resolver.registerAll();\n  load_balancer.registerAll();\n})();","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst semver = require(\"semver\");\nconst call_credentials_1 = require(\"./call-credentials\");\nexports.CallCredentials = call_credentials_1.CallCredentials;\nconst channel_1 = require(\"./channel\");\nexports.connectivityState = channel_1.ConnectivityState;\nexports.Channel = channel_1.ChannelImplementation;\nconst channel_credentials_1 = require(\"./channel-credentials\");\nexports.ChannelCredentials = channel_credentials_1.ChannelCredentials;\nconst client_1 = require(\"./client\");\nexports.Client = client_1.Client;\nconst constants_1 = require(\"./constants\");\nexports.logVerbosity = constants_1.LogVerbosity;\nexports.status = constants_1.Status;\nconst logging = require(\"./logging\");\nconst make_client_1 = require(\"./make-client\");\nexports.loadPackageDefinition = make_client_1.loadPackageDefinition;\nexports.makeClientConstructor = make_client_1.makeClientConstructor;\nexports.makeGenericClientConstructor = make_client_1.makeClientConstructor;\nconst metadata_1 = require(\"./metadata\");\nexports.Metadata = metadata_1.Metadata;\nconst server_1 = require(\"./server\");\nexports.Server = server_1.Server;\nconst server_credentials_1 = require(\"./server-credentials\");\nexports.ServerCredentials = server_credentials_1.ServerCredentials;\nconst status_builder_1 = require(\"./status-builder\");\nexports.StatusBuilder = status_builder_1.StatusBuilder;\nconst supportedNodeVersions = require('../../package.json').engines.node;\nif (!semver.satisfies(process.version, supportedNodeVersions)) {\n    throw new Error(`@grpc/grpc-js only works on Node ${supportedNodeVersions}`);\n}\nfunction mixin(...sources) {\n    const result = {};\n    for (const source of sources) {\n        for (const propName of Object.getOwnPropertyNames(source)) {\n            const property = source[propName]; // eslint-disable-line @typescript-eslint/no-explicit-any\n            if (typeof property === 'function') {\n                result[propName] = property;\n            }\n        }\n    }\n    return result;\n}\n/**** Client Credentials ****/\n// Using assign only copies enumerable properties, which is what we want\nexports.credentials = mixin({\n    /**\n     * Create a gRPC credential from a Google credential object.\n     * @param googleCredentials The authentication client to use.\n     * @return The resulting CallCredentials object.\n     */\n    createFromGoogleCredential: (googleCredentials) => {\n        return call_credentials_1.CallCredentials.createFromMetadataGenerator((options, callback) => {\n            // google-auth-library pre-v2.0.0 does not have getRequestHeaders\n            // but has getRequestMetadata, which is deprecated in v2.0.0\n            let getHeaders;\n            if (typeof googleCredentials.getRequestHeaders === 'function') {\n                getHeaders = googleCredentials.getRequestHeaders(options.service_url);\n            }\n            else {\n                getHeaders = new Promise((resolve, reject) => {\n                    googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {\n                        if (err) {\n                            reject(err);\n                            return;\n                        }\n                        resolve(headers);\n                    });\n                });\n            }\n            getHeaders.then((headers) => {\n                const metadata = new metadata_1.Metadata();\n                for (const key of Object.keys(headers)) {\n                    metadata.add(key, headers[key]);\n                }\n                callback(null, metadata);\n            }, (err) => {\n                callback(err);\n            });\n        });\n    },\n    /**\n     * Combine a ChannelCredentials with any number of CallCredentials into a\n     * single ChannelCredentials object.\n     * @param channelCredentials The ChannelCredentials object.\n     * @param callCredentials Any number of CallCredentials objects.\n     * @return The resulting ChannelCredentials object.\n     */\n    combineChannelCredentials: (channelCredentials, ...callCredentials) => {\n        return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);\n    },\n    /**\n     * Combine any number of CallCredentials into a single CallCredentials\n     * object.\n     * @param first The first CallCredentials object.\n     * @param additional Any number of additional CallCredentials objects.\n     * @return The resulting CallCredentials object.\n     */\n    combineCallCredentials: (first, ...additional) => {\n        return additional.reduce((acc, other) => acc.compose(other), first);\n    },\n}, channel_credentials_1.ChannelCredentials, call_credentials_1.CallCredentials);\n/**\n * Close a Client object.\n * @param client The client to close.\n */\nexports.closeClient = (client) => client.close();\nexports.waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);\n/* eslint-enable @typescript-eslint/no-explicit-any */\n/**** Unimplemented function stubs ****/\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexports.loadObject = (value, options) => {\n    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\nexports.load = (filename, format, options) => {\n    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\nexports.setLogger = (logger) => {\n    logging.setLogger(logger);\n};\nexports.setLogVerbosity = (verbosity) => {\n    logging.setLoggerVerbosity(verbosity);\n};\nexports.getClientChannel = (client) => {\n    return client_1.Client.prototype.getChannel.call(client);\n};\nvar client_interceptors_1 = require(\"./client-interceptors\");\nexports.ListenerBuilder = client_interceptors_1.ListenerBuilder;\nexports.RequesterBuilder = client_interceptors_1.RequesterBuilder;\nexports.InterceptingCall = client_interceptors_1.InterceptingCall;\nexports.InterceptorConfigurationError = client_interceptors_1.InterceptorConfigurationError;\nconst resolver = require(\"./resolver\");\nconst load_balancer = require(\"./load-balancer\");\n(() => {\n    resolver.registerAll();\n    load_balancer.registerAll();\n})();\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}