{"ast":null,"code":"'use strict';\n\nvar forEach = require('foreach');\n\nvar availableTypedArrays = require('available-typed-arrays');\n\nvar callBound = require('es-abstract/helpers/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\n\nvar hasSymbols = require('has-symbols')();\n\nvar hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';\nvar typedArrays = availableTypedArrays();\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\n\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\n\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\nif (hasToStringTag && gOPD && getPrototypeOf) {\n  forEach(typedArrays, function (typedArray) {\n    if (typeof global[typedArray] === 'function') {\n      var arr = new global[typedArray]();\n\n      if (!(Symbol.toStringTag in arr)) {\n        throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');\n      }\n\n      var proto = getPrototypeOf(arr);\n      var descriptor = gOPD(proto, Symbol.toStringTag);\n\n      if (!descriptor) {\n        var superProto = getPrototypeOf(proto);\n        descriptor = gOPD(superProto, Symbol.toStringTag);\n      }\n\n      toStrTags[typedArray] = descriptor.get;\n    }\n  });\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n  var foundName = false;\n  forEach(toStrTags, function (getter, typedArray) {\n    if (!foundName) {\n      try {\n        var name = getter.call(value);\n\n        if (name === typedArray) {\n          foundName = name;\n        }\n      } catch (e) {}\n    }\n  });\n  return foundName;\n};\n\nvar isTypedArray = require('is-typed-array');\n\nmodule.exports = function whichTypedArray(value) {\n  if (!isTypedArray(value)) {\n    return false;\n  }\n\n  if (!hasToStringTag) {\n    return $slice($toString(value), 8, -1);\n  }\n\n  return tryTypedArrays(value);\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/which-typed-array/index.js"],"names":["forEach","require","availableTypedArrays","callBound","$toString","hasSymbols","hasToStringTag","Symbol","toStringTag","typedArrays","$slice","toStrTags","gOPD","getPrototypeOf","Object","typedArray","global","arr","EvalError","proto","descriptor","superProto","get","tryTypedArrays","tryAllTypedArrays","value","foundName","getter","name","call","e","isTypedArray","module","exports","whichTypedArray"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,+BAAD,CAAvB;;AAEA,IAAIG,SAAS,GAAGD,SAAS,CAAC,2BAAD,CAAzB;;AACA,IAAIE,UAAU,GAAGJ,OAAO,CAAC,aAAD,CAAP,EAAjB;;AACA,IAAIK,cAAc,GAAGD,UAAU,IAAI,OAAOE,MAAM,CAACC,WAAd,KAA8B,QAAjE;AAEA,IAAIC,WAAW,GAAGP,oBAAoB,EAAtC;AAEA,IAAIQ,MAAM,GAAGP,SAAS,CAAC,wBAAD,CAAtB;AACA,IAAIQ,SAAS,GAAG,EAAhB;;AACA,IAAIC,IAAI,GAAGX,OAAO,CAAC,8CAAD,CAAlB;;AACA,IAAIY,cAAc,GAAGC,MAAM,CAACD,cAA5B,C,CAA4C;;AAC5C,IAAIP,cAAc,IAAIM,IAAlB,IAA0BC,cAA9B,EAA8C;AAC7Cb,EAAAA,OAAO,CAACS,WAAD,EAAc,UAAUM,UAAV,EAAsB;AAC1C,QAAI,OAAOC,MAAM,CAACD,UAAD,CAAb,KAA8B,UAAlC,EAA8C;AAC7C,UAAIE,GAAG,GAAG,IAAID,MAAM,CAACD,UAAD,CAAV,EAAV;;AACA,UAAI,EAAER,MAAM,CAACC,WAAP,IAAsBS,GAAxB,CAAJ,EAAkC;AACjC,cAAM,IAAIC,SAAJ,CAAc,yDAAyDH,UAAzD,GAAsE,kDAApF,CAAN;AACA;;AACD,UAAII,KAAK,GAAGN,cAAc,CAACI,GAAD,CAA1B;AACA,UAAIG,UAAU,GAAGR,IAAI,CAACO,KAAD,EAAQZ,MAAM,CAACC,WAAf,CAArB;;AACA,UAAI,CAACY,UAAL,EAAiB;AAChB,YAAIC,UAAU,GAAGR,cAAc,CAACM,KAAD,CAA/B;AACAC,QAAAA,UAAU,GAAGR,IAAI,CAACS,UAAD,EAAad,MAAM,CAACC,WAApB,CAAjB;AACA;;AACDG,MAAAA,SAAS,CAACI,UAAD,CAAT,GAAwBK,UAAU,CAACE,GAAnC;AACA;AACD,GAdM,CAAP;AAeA;;AAED,IAAIC,cAAc,GAAG,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AACtD,MAAIC,SAAS,GAAG,KAAhB;AACA1B,EAAAA,OAAO,CAACW,SAAD,EAAY,UAAUgB,MAAV,EAAkBZ,UAAlB,EAA8B;AAChD,QAAI,CAACW,SAAL,EAAgB;AACf,UAAI;AACH,YAAIE,IAAI,GAAGD,MAAM,CAACE,IAAP,CAAYJ,KAAZ,CAAX;;AACA,YAAIG,IAAI,KAAKb,UAAb,EAAyB;AACxBW,UAAAA,SAAS,GAAGE,IAAZ;AACA;AACD,OALD,CAKE,OAAOE,CAAP,EAAU,CAAE;AACd;AACD,GATM,CAAP;AAUA,SAAOJ,SAAP;AACA,CAbD;;AAeA,IAAIK,YAAY,GAAG9B,OAAO,CAAC,gBAAD,CAA1B;;AAEA+B,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBT,KAAzB,EAAgC;AAChD,MAAI,CAACM,YAAY,CAACN,KAAD,CAAjB,EAA0B;AAAE,WAAO,KAAP;AAAe;;AAC3C,MAAI,CAACnB,cAAL,EAAqB;AAAE,WAAOI,MAAM,CAACN,SAAS,CAACqB,KAAD,CAAV,EAAmB,CAAnB,EAAsB,CAAC,CAAvB,CAAb;AAAyC;;AAChE,SAAOF,cAAc,CAACE,KAAD,CAArB;AACA,CAJD","sourcesContent":["'use strict';\n\nvar forEach = require('foreach');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('es-abstract/helpers/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasSymbols = require('has-symbols')();\nvar hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';\n\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tif (typeof global[typedArray] === 'function') {\n\t\t\tvar arr = new global[typedArray]();\n\t\t\tif (!(Symbol.toStringTag in arr)) {\n\t\t\t\tthrow new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');\n\t\t\t}\n\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t}\n\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar foundName = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!foundName) {\n\t\t\ttry {\n\t\t\t\tvar name = getter.call(value);\n\t\t\t\tif (name === typedArray) {\n\t\t\t\t\tfoundName = name;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\treturn foundName;\n};\n\nvar isTypedArray = require('is-typed-array');\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!isTypedArray(value)) { return false; }\n\tif (!hasToStringTag) { return $slice($toString(value), 8, -1); }\n\treturn tryTypedArrays(value);\n};\n"]},"metadata":{},"sourceType":"script"}