{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { auth } from \"../../firebase\";\nconst initialState = {};\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOGIN_USER:\n      {\n        console.log(action);\n        auth.signInWithEmailAndPassword(action.payload.email, action.payload.password).then(user => {\n          action.asyncDispatch(mainAction(ACTIONS.LOGIN_USER_SUCCESS, user));\n        }).catch(error => {\n          action.asyncDispatch(mainAction(ACTIONS.LOGIN_USER_FAIL, {\n            message: \"Error signing in with password and email\",\n            error\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOGIN_USER_SUCCESS:\n      {\n        return action.payload.user;\n      }\n\n    case ACTIONS.LOGIN_USER_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOGOUT:\n      {\n        auth.signOut().then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.LOGOUT_SUCCESS, []));\n        }).catch(error => {\n          action.asyncDispatch(mainAction(ACTIONS.LOGOUT_ERROR, {\n            message: \"Error signing in with password and email\",\n            error\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOGOUT_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOGOUT_ERROR:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOGIN_CHECK:\n      {\n        let user = {\n          _id: action.payload._id,\n          firstName: action.payload.name.first,\n          lastName: action.payload.name.last\n        }; // if(action.payload._id)\n        //action.asyncDispatch(mainAction(ACTIONS.LOGIN_USER_SUCCESS,user ? user:[]))\n\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/user.reducer.js"],"names":["ACTIONS","mainAction","auth","initialState","userReducer","state","action","type","LOGIN_USER","console","log","signInWithEmailAndPassword","payload","email","password","then","user","asyncDispatch","LOGIN_USER_SUCCESS","catch","error","LOGIN_USER_FAIL","message","LOGOUT","signOut","LOGOUT_SUCCESS","LOGOUT_ERROR","LOGIN_CHECK","_id","firstName","name","first","lastName","last"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,IAAT,QAAoB,gBAApB;AACA,MAAMC,YAAY,GAAG,EAArB;AAGA,eAAe,SAASC,WAAT,CAAsBC,KAAK,GAAGF,YAA9B,EAA4CG,MAA5C,EAAoD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,OAAO,CAACQ,UAAb;AAAyB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACFJ,QAAAA,IAAI,CAACS,0BAAL,CAAgCL,MAAM,CAACM,OAAP,CAAeC,KAA/C,EAAsDP,MAAM,CAACM,OAAP,CAAeE,QAArE,EAA+EC,IAA/E,CAAqFC,IAAD,IAAQ;AACxFV,UAAAA,MAAM,CAACW,aAAP,CAAqBhB,UAAU,CAACD,OAAO,CAACkB,kBAAT,EAA4BF,IAA5B,CAA/B;AACH,SAFD,EAEGG,KAFH,CAESC,KAAK,IAAI;AACdd,UAAAA,MAAM,CAACW,aAAP,CAAqBhB,UAAU,CAACD,OAAO,CAACqB,eAAT,EAAyB;AAACC,YAAAA,OAAO,EAAC,0CAAT;AAAoDF,YAAAA;AAApD,WAAzB,CAA/B;AACD,SAJH;AAKA,eAAOf,KAAP;AACD;;AACD,SAAML,OAAO,CAACkB,kBAAd;AAAkC;AAEhC,eAAOZ,MAAM,CAACM,OAAP,CAAeI,IAAtB;AACD;;AACD,SAAMhB,OAAO,CAACqB,eAAd;AAA+B;AAE7B,eAAOhB,KAAP;AACD;;AACD,SAAML,OAAO,CAACuB,MAAd;AAAsB;AACpBrB,QAAAA,IAAI,CAACsB,OAAL,GAAeT,IAAf,CAAoB,MAAI;AACpBT,UAAAA,MAAM,CAACW,aAAP,CAAqBhB,UAAU,CAACD,OAAO,CAACyB,cAAT,EAAwB,EAAxB,CAA/B;AACH,SAFD,EAEGN,KAFH,CAESC,KAAK,IAAI;AACdd,UAAAA,MAAM,CAACW,aAAP,CAAqBhB,UAAU,CAACD,OAAO,CAAC0B,YAAT,EAAsB;AAACJ,YAAAA,OAAO,EAAC,0CAAT;AAAoDF,YAAAA;AAApD,WAAtB,CAA/B;AACD,SAJH;AAKA,eAAOf,KAAP;AACD;;AACD,SAAML,OAAO,CAACyB,cAAd;AAA8B;AAE5B,eAAOnB,MAAM,CAACM,OAAd;AACD;;AACD,SAAMZ,OAAO,CAAC0B,YAAd;AAA4B;AAE1B,eAAOrB,KAAP;AACD;;AACD,SAAML,OAAO,CAAC2B,WAAd;AAA2B;AACzB,YAAIX,IAAI,GAAG;AAACY,UAAAA,GAAG,EAACtB,MAAM,CAACM,OAAP,CAAegB,GAApB;AACXC,UAAAA,SAAS,EAACvB,MAAM,CAACM,OAAP,CAAekB,IAAf,CAAoBC,KADnB;AAEbC,UAAAA,QAAQ,EAAC1B,MAAM,CAACM,OAAP,CAAekB,IAAf,CAAoBG;AAFhB,SAAX,CADyB,CAI5B;AACC;;AACE,eAAO5B,KAAP;AACD;;AACD;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA5CJ;AAgDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { auth} from \"../../firebase\";\nconst initialState = {\n   \n};\nexport default function userReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOGIN_USER: {\n          console.log(action)\n        auth.signInWithEmailAndPassword(action.payload.email, action.payload.password).then((user)=>{\n            action.asyncDispatch(mainAction(ACTIONS.LOGIN_USER_SUCCESS,user))\n        }).catch(error => {\n            action.asyncDispatch(mainAction(ACTIONS.LOGIN_USER_FAIL,{message:\"Error signing in with password and email\",error}))\n          });\n        return state\n      }\n      case  ACTIONS.LOGIN_USER_SUCCESS: {\n     \n        return action.payload.user\n      }\n      case  ACTIONS.LOGIN_USER_FAIL: {\n\n        return state\n      }\n      case  ACTIONS.LOGOUT: {\n        auth.signOut().then(()=>{\n            action.asyncDispatch(mainAction(ACTIONS.LOGOUT_SUCCESS,[]))\n        }).catch(error => {\n            action.asyncDispatch(mainAction(ACTIONS.LOGOUT_ERROR,{message:\"Error signing in with password and email\",error}))\n          });\n        return state\n      }\n      case  ACTIONS.LOGOUT_SUCCESS: {\n\n        return action.payload\n      }\n      case  ACTIONS.LOGOUT_ERROR: {\n       \n        return state\n      }\n      case  ACTIONS.LOGIN_CHECK: {\n        let user = {_id:action.payload._id,\n        firstName:action.payload.name.first,\n      lastName:action.payload.name.last}\n     // if(action.payload._id)\n      //action.asyncDispatch(mainAction(ACTIONS.LOGIN_USER_SUCCESS,user ? user:[]))\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}