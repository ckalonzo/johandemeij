{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\"; //import {uploadPostImage} from \"API/indexAPI\"\n\nimport { updatePostImage } from \"API/indexAPI\";\nimport _ from \"lodash\";\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        fetch('http://localhost:3001/api/loadPostByID/' + action.payload).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL, err)));\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return action.payload[0];\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image; //  uploadPostImage(image).then((json)=>{\n        //   if(json.status!==404 || json.status!==500) {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n        //   } else {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n        //   }\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n        // updatePostImage(action.payload).then(json => {\n        //   //action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        // }).catch(err =>{\n        //  // action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        // })\n\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        console.log(action);\n        return action;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","updatePostImage","_","NavDropdown","initialState","singlePostReducer","state","action","type","LOAD_ARTICLE","payload","LOAD_POST","fetch","then","data","json","res","asyncDispatch","LOAD_POST_SUCCESS","catch","err","LOAD_POST_FAIL","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","stateCopy","cloneDeep","image","UPLOAD_IMAGE_SUCCESS","newImage","_id","submitted","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPLOAD_IMAGE_FAIL","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","console","log"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\n//import {uploadPostImage} from \"API/indexAPI\"\nimport { updatePostImage } from \"API/indexAPI\"\nimport _ from \"lodash\"\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n       \n        fetch ('http://localhost:3001/api/loadPostByID/'+ action.payload)\n        .then((data)=> data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,res.data))\n        \n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,err)))\n        return action.payload\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n\n        return action.payload[0]\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n        updatePost(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n        //  uploadPostImage(image).then((json)=>{\n\n        //   if(json.status!==404 || json.status!==500) {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n        //   } else {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n        //   }\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n\n        // updatePostImage(action.payload).then(json => {\n        //   //action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        // }).catch(err =>{\n        //  // action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        // })\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        console.log(action)\n        return action\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n\n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}