{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, database } from \"../../firebase\";\nconst initialState = {};\nexport default function concertInformationReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.SUBMIT_CONCERT_INFORMATION:\n      {\n        let stateCopy = action.payload;\n        const submissionRef = database.ref('submissions');\n        submissionRef.child(stateCopy.id).set(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.SUBMIT_CONCERT_INFORMATION_SUCCESS, action.payload));\n        }).catch(() => {\n          action.asyncDispatch(mainAction(ACTIONS.SUBMIT_CONCERT_INFORMATION_FAIL, {\n            error: \"could not create submission\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.SUBMIT_CONCERT_INFORMATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.SUBMIT_CONCERT_INFORMATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_SUBMISSIONS:\n      {\n        let items = ''; // db.collection(\"concertinformation\")\n        //  .get()\n        //  .then(querySnapshot => {\n        //    const data = querySnapshot.docs.map(doc => {\n        //     items = doc.data()\n        //      return doc.data()});\n        //     action.asyncDispatch(mainAction(ACTIONS.LOAD_SUBMISSIONS_SUCCESS,items))\n        //  });\n\n        var submissionRef = database.ref('submissions');\n        submissionRef.on('value', (snap, i) => {\n          const data = snap.val();\n          console.log(data);\n          let submissions = [];\n          data.map(submission => {\n            submissions.push(submission);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_SUBMISSIONS_SUCCESS, submissions));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_SUBMISSIONS_SUCCESS:\n      {\n        console.log(action.payload);\n        return { ...action.payload\n        };\n      }\n\n    case ACTIONS.LOAD_SUBMISSIONS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/concertInfomation.reducer.js"],"names":["ACTIONS","mainAction","db","database","initialState","concertInformationReducer","state","action","type","SUBMIT_CONCERT_INFORMATION","stateCopy","payload","submissionRef","ref","child","id","set","then","asyncDispatch","SUBMIT_CONCERT_INFORMATION_SUCCESS","catch","SUBMIT_CONCERT_INFORMATION_FAIL","error","LOAD_SUBMISSIONS","items","on","snap","i","data","val","console","log","submissions","map","submission","push","LOAD_SUBMISSIONS_SUCCESS","LOAD_SUBMISSIONS_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,yBAAT,CAAoCC,KAAK,GAAGF,YAA5C,EAA0DG,MAA1D,EAAkE;AAC7E,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKR,OAAO,CAACS,0BAAb;AAAyC;AAC1C,YAAIC,SAAS,GAAGH,MAAM,CAACI,OAAvB;AAEC,cAAMC,aAAa,GAAGT,QAAQ,CAACU,GAAT,CAAa,aAAb,CAAtB;AACAD,QAAAA,aAAa,CAACE,KAAd,CAAoBJ,SAAS,CAACK,EAA9B,EAAkCC,GAAlC,CAAsCT,MAAM,CAACI,OAA7C,EAAsDM,IAAtD,CAA2D,MAAI;AAC7DV,UAAAA,MAAM,CAACW,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACmB,kCAAT,EAA4CZ,MAAM,CAACI,OAAnD,CAA/B;AACD,SAFD,EAGCS,KAHD,CAGO,MAAI;AACTb,UAAAA,MAAM,CAACW,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACqB,+BAAT,EAAyC;AAACC,YAAAA,KAAK,EAAC;AAAP,WAAzC,CAA/B;AACD,SALD;AAME,eAAOhB,KAAP;AACD;;AACD,SAAKN,OAAO,CAACmB,kCAAb;AAAiD;AAE/C,eAAOZ,MAAM,CAACI,OAAd;AACD;;AACD,SAAKX,OAAO,CAACqB,+BAAb;AAA8C;AAE5C,eAAOf,KAAP;AACD;;AACD,SAAKN,OAAO,CAACuB,gBAAb;AAA+B;AACpC,YAAIC,KAAK,GAAG,EAAZ,CADoC,CAEjC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEC,YAAIZ,aAAa,GAAGT,QAAQ,CAACU,GAAT,CAAa,aAAb,CAApB;AACAD,QAAAA,aAAa,CAACa,EAAd,CAAiB,OAAjB,EAAyB,CAACC,IAAD,EAAMC,CAAN,KAAU;AAElC,gBAAMC,IAAI,GAAGF,IAAI,CAACG,GAAL,EAAb;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,cAAII,WAAW,GAAE,EAAjB;AACAJ,UAAAA,IAAI,CAACK,GAAL,CAASC,UAAU,IAAE;AACnBF,YAAAA,WAAW,CAACG,IAAZ,CAAiBD,UAAjB;AACD,WAFD;AAGA3B,UAAAA,MAAM,CAACW,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACoC,wBAAT,EAAkCJ,WAAlC,CAA/B;AACC,SATF;AAWG,eAAO1B,KAAP;AACD;;AACD,SAAKN,OAAO,CAACoC,wBAAb;AAAuC;AACrCN,QAAAA,OAAO,CAACC,GAAR,CAAYxB,MAAM,CAACI,OAAnB;AACA,eAAO,EAAC,GAAGJ,MAAM,CAACI;AAAX,SAAP;AACD;;AACD,SAAKX,OAAO,CAACqC,qBAAb;AAAoC;AAElC,eAAO/B,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA1DJ;AA8DD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db , database } from \"../../firebase\";\nconst initialState = {};\nexport default function concertInformationReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.SUBMIT_CONCERT_INFORMATION: {\n     let stateCopy = action.payload\n     \n      const submissionRef = database.ref('submissions')\n      submissionRef.child(stateCopy.id).set(action.payload).then(()=>{\n        action.asyncDispatch(mainAction(ACTIONS.SUBMIT_CONCERT_INFORMATION_SUCCESS,action.payload))\n      })\n      .catch(()=>{\n        action.asyncDispatch(mainAction(ACTIONS.SUBMIT_CONCERT_INFORMATION_FAIL,{error:\"could not create submission\"}))\n      });\n        return state\n      }\n      case ACTIONS.SUBMIT_CONCERT_INFORMATION_SUCCESS: {\n\n        return action.payload\n      }\n      case ACTIONS.SUBMIT_CONCERT_INFORMATION_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_SUBMISSIONS: {\n let items = ''\n    // db.collection(\"concertinformation\")\n    //  .get()\n    //  .then(querySnapshot => {\n    //    const data = querySnapshot.docs.map(doc => {\n    //     items = doc.data()\n    //      return doc.data()});\n      \n    //     action.asyncDispatch(mainAction(ACTIONS.LOAD_SUBMISSIONS_SUCCESS,items))\n    //  });\n\n     var submissionRef = database.ref('submissions')\n     submissionRef.on('value',(snap,i)=>{\n    \n      const data = snap.val()\n      console.log(data)\n      let submissions =[]\n      data.map(submission=>{\n        submissions.push(submission)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_SUBMISSIONS_SUCCESS,submissions))\n      })\n     \n        return state\n      }\n      case ACTIONS.LOAD_SUBMISSIONS_SUCCESS: {\n        console.log(action.payload)\n        return {...action.payload}\n      }\n      case ACTIONS.LOAD_SUBMISSIONS_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}