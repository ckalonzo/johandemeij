{"ast":null,"code":"'use strict';\n\nvar forEach = require('foreach');\n\nvar availableTypedArrays = require('available-typed-arrays');\n\nvar callBound = require('es-abstract/helpers/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\n\nvar hasSymbols = require('has-symbols')();\n\nvar hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';\nvar typedArrays = availableTypedArrays();\n\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n  for (var i = 0; i < array.length; i += 1) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\n\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\n\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\nif (hasToStringTag && gOPD && getPrototypeOf) {\n  forEach(typedArrays, function (typedArray) {\n    var arr = new global[typedArray]();\n\n    if (!(Symbol.toStringTag in arr)) {\n      throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');\n    }\n\n    var proto = getPrototypeOf(arr);\n    var descriptor = gOPD(proto, Symbol.toStringTag);\n\n    if (!descriptor) {\n      var superProto = getPrototypeOf(proto);\n      descriptor = gOPD(superProto, Symbol.toStringTag);\n    }\n\n    toStrTags[typedArray] = descriptor.get;\n  });\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n  var anyTrue = false;\n  forEach(toStrTags, function (getter, typedArray) {\n    if (!anyTrue) {\n      try {\n        anyTrue = getter.call(value) === typedArray;\n      } catch (e) {\n        /**/\n      }\n    }\n  });\n  return anyTrue;\n};\n\nmodule.exports = function isTypedArray(value) {\n  if (!value || typeof value !== 'object') {\n    return false;\n  }\n\n  if (!hasToStringTag) {\n    var tag = $slice($toString(value), 8, -1);\n    return $indexOf(typedArrays, tag) > -1;\n  }\n\n  if (!gOPD) {\n    return false;\n  }\n\n  return tryTypedArrays(value);\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/is-typed-array/index.js"],"names":["forEach","require","availableTypedArrays","callBound","$toString","hasSymbols","hasToStringTag","Symbol","toStringTag","typedArrays","$indexOf","indexOf","array","value","i","length","$slice","toStrTags","gOPD","getPrototypeOf","Object","typedArray","arr","global","EvalError","proto","descriptor","superProto","get","tryTypedArrays","tryAllTypedArrays","anyTrue","getter","call","e","module","exports","isTypedArray","tag"],"mappings":"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","sourcesContent":["'use strict';\n\nvar forEach = require('foreach');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('es-abstract/helpers/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasSymbols = require('has-symbols')();\nvar hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';\n\nvar typedArrays = availableTypedArrays();\n\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\tfor (var i = 0; i < array.length; i += 1) {\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new global[typedArray]();\n\t\tif (!(Symbol.toStringTag in arr)) {\n\t\t\tthrow new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');\n\t\t}\n\t\tvar proto = getPrototypeOf(arr);\n\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\tif (!descriptor) {\n\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t}\n\t\ttoStrTags[typedArray] = descriptor.get;\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar anyTrue = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!anyTrue) {\n\t\t\ttry {\n\t\t\t\tanyTrue = getter.call(value) === typedArray;\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn anyTrue;\n};\n\nmodule.exports = function isTypedArray(value) {\n\tif (!value || typeof value !== 'object') { return false; }\n\tif (!hasToStringTag) {\n\t\tvar tag = $slice($toString(value), 8, -1);\n\t\treturn $indexOf(typedArrays, tag) > -1;\n\t}\n\tif (!gOPD) { return false; }\n\treturn tryTypedArrays(value);\n};\n"]},"metadata":{},"sourceType":"script"}