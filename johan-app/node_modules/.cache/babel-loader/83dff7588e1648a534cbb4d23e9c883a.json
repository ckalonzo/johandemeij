{"ast":null,"code":"import _objectSpread from\"/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import{db}from\"../../firebase\";import _ from'lodash';var initialState={};export default function agendaReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.LOAD_CD_AGENDA:{//   let stateCopy = _.cloneDeep(state)\n//  fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n//   .then((data) => data.json())\n//   .then((res) => {\n//     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n//     stateCopy.agendaTotal = res.data.length\n//   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\ndb.collection(\"agendas\").where(\"year\",\"==\",\"2020\").orderBy('month','asc').get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data));});//   let stateCopy = []\n//   db.collection(\"agendas\")\n//   .where(\"year\",\"==\",\"2020\")\n//   .orderBy('month')\n//  .get()\n//  .then(querySnapshot => {\n//    const data = querySnapshot.docs.map(doc => doc.data());\n//    let x =  action.payload.limit - action.payload.skip;\n//    console.log(x)\n//    data.map((newData,i)=>{\n//      if(i < action.payload.limit && i > action.payload.skip)\n//      stateCopy.push(newData)\n//    })\n//    action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n//  });\n// db.collection(\"agendas\")\n// .where(\"year\",\"==\",\"2020\")\n// .orderBy('month')\n// .get()\n// .then(querySnapshot => {\n//   const data = querySnapshot.docs.map(doc => doc.data());\n//   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n// });\nreturn state;}case ACTIONS.LOAD_CD_AGENDA_SUCCESS:{return action.payload;}case ACTIONS.LOAD_CD_AGENDA_FAIL:{return state;}case ACTIONS.LOAD_AGENDAS:{var agendas=[];var d=new Date();var day=d.getDay();var month=(d.getMonth()+1).toString();var year=d.getFullYear().toString();var stateCopy='';//=======================================================\ndb.collection(\"agendas\")//.where(\"year\",'==',year)\n.where(\"month\",'>=',month).orderBy(\"month\",\"asc\").orderBy(\"day\",\"asc\").get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});stateCopy=data;//=======================================================\ndb.collection(\"presentations\")// .where(\"id\",\"==\",stateCopy.cd.toString())\n.get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});stateCopy.map(function(post,i){var title=data.filter(function(presentation){return presentation.id===post.cd;}).map(function(presentation){return presentation.cdName;});post.title=title[0];post.date=\"\".concat(post.year,\"-\").concat(post.month,\"-\").concat(post.day);return post;});action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy));});//========================================================\n});return state;}case ACTIONS.LOAD_AGENDAS_SUCCESS:{var _stateCopy=_.cloneDeep(action.payload);var _d=new Date();var _year=_d.getFullYear().toString();return _stateCopy.filter(function(agendas){return agendas.year===_year;});}case ACTIONS.LOAD_AGENDAS_FAIL:{return state;}default:return _objectSpread({},state);}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","collection","where","orderBy","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","payload","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","agendas","d","Date","day","getDay","month","getMonth","toString","year","getFullYear","stateCopy","post","i","title","filter","presentation","id","cd","cdName","date","LOAD_AGENDAS_SUCCESS","cloneDeep","LOAD_AGENDAS_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n      //   let stateCopy = _.cloneDeep(state)\n      //  fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n      //   .then((data) => data.json())\n      //   .then((res) => {\n      //     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n      //     stateCopy.agendaTotal = res.data.length\n      //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n      db.collection(\"agendas\")\n      .where(\"year\",\"==\",\"2020\")\n      .orderBy('month','asc')\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n      });\n      \n\n      //   let stateCopy = []\n      //   db.collection(\"agendas\")\n      //   .where(\"year\",\"==\",\"2020\")\n      //   .orderBy('month')\n      //  .get()\n      //  .then(querySnapshot => {\n      //    const data = querySnapshot.docs.map(doc => doc.data());\n      //    let x =  action.payload.limit - action.payload.skip;\n      //    console.log(x)\n      //    data.map((newData,i)=>{\n      //      if(i < action.payload.limit && i > action.payload.skip)\n      //      stateCopy.push(newData)\n      //    })\n      //    action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n      //  });\n      // db.collection(\"agendas\")\n      // .where(\"year\",\"==\",\"2020\")\n      // .orderBy('month')\n      // .get()\n      // .then(querySnapshot => {\n      //   const data = querySnapshot.docs.map(doc => doc.data());\n      //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n      // });\n      \n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n              post.title = title[0]; \n              post.date=`${post.year}-${post.month}-${post.day}`\n              return post\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}