{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        fetch('http://127.0.0.1:5021/api/loadAgendasByPage/' + action.payload.skip + \"/\" + action.payload.limit).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, res.data));\n          stateCopy.agendaTotal = res.data.length;\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let d = new Date();\n        let day = d.getDay();\n        let month = d.getMonth() + 1;\n        let year = d.getFullYear(); // fetch ('http://127.0.0.1:5021/api/loadfilteredAgendas/'+action.payload.skip+\"/\"+action.payload.limit+\"/\"+year+\"/\" + month )\n        // .then((data)=> data.json())\n        // .then((res) => {\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,res.data))\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_FAIL,err)))\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          console.log(data); // action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_SUCCESS,data))\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let d = new Date();\n        let day = d.getDate();\n        let stateCopy = [];\n        action.payload.map(agenda => {\n          // if(agenda.day > day)\n          return stateCopy.push(agenda);\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","cloneDeep","fetch","payload","skip","limit","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","agendaTotal","length","catch","err","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","d","Date","day","getDay","month","getMonth","year","getFullYear","collection","get","querySnapshot","docs","map","doc","console","log","LOAD_AGENDAS_SUCCESS","getDate","agenda","push","LOAD_AGENDAS_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AACjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKR,OAAO,CAACS,cAAb;AAA6B;AAC3B,YAAIC,SAAS,GAAGP,CAAC,CAACQ,SAAF,CAAYL,KAAZ,CAAhB;;AACDM,QAAAA,KAAK,CAAC,iDAA+CL,MAAM,CAACM,OAAP,CAAeC,IAA9D,GAAmE,GAAnE,GAAuEP,MAAM,CAACM,OAAP,CAAeE,KAAvF,CAAL,CACEC,IADF,CACQC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADjB,EAEEF,IAFF,CAEQG,GAAD,IAAS;AACbZ,UAAAA,MAAM,CAACa,aAAP,CAAqBnB,UAAU,CAACD,OAAO,CAACqB,sBAAT,EAAgCF,GAAG,CAACF,IAApC,CAA/B;AACAP,UAAAA,SAAS,CAACY,WAAV,GAAwBH,GAAG,CAACF,IAAJ,CAASM,MAAjC;AACD,SALF,EAKIC,KALJ,CAKUC,GAAG,IAAIlB,MAAM,CAACa,aAAP,CAAqBnB,UAAU,CAACD,OAAO,CAAC0B,mBAAT,EAA6BD,GAA7B,CAA/B,CALjB;AAOC,eAAOf,SAAP;AACD;;AACD,SAAKV,OAAO,CAACqB,sBAAb;AAAqC;AACnC,eAAOd,MAAM,CAACM,OAAd;AACD;;AACD,SAAKb,OAAO,CAAC0B,mBAAb;AAAkC;AAEhC,eAAOpB,KAAP;AACD;;AACD,SAAKN,OAAO,CAAC2B,YAAb;AAA2B;AACzB,YAAIC,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACA,YAAIC,GAAG,GAAGF,CAAC,CAACG,MAAF,EAAV;AACA,YAAIC,KAAK,GAAGJ,CAAC,CAACK,QAAF,KAAe,CAA3B;AACA,YAAIC,IAAI,GAAGN,CAAC,CAACO,WAAF,EAAX,CAJyB,CAKzB;AACA;AACA;AACA;AACA;;AACAjC,QAAAA,EAAE,CAACkC,UAAH,CAAc,SAAd,EACD;AADC,SAEEC,GAFF,GAGErB,IAHF,CAGOsB,aAAa,IAAI;AACrB,gBAAMrB,IAAI,GAAGqB,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACxB,IAAJ,EAA9B,CAAb;AACAyB,UAAAA,OAAO,CAACC,GAAR,CAAY1B,IAAZ,EAFqB,CAGtB;AACA,SAPF;AAQA,eAAOX,KAAP;AACD;;AACD,SAAKN,OAAO,CAAC4C,oBAAb;AAAkC;AAChC,YAAIhB,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACA,YAAIC,GAAG,GAAGF,CAAC,CAACiB,OAAF,EAAV;AACA,YAAInC,SAAS,GAAG,EAAhB;AACAH,QAAAA,MAAM,CAACM,OAAP,CAAe2B,GAAf,CAAmBM,MAAM,IAAE;AAC1B;AACC,iBAAOpC,SAAS,CAACqC,IAAV,CAAeD,MAAf,CAAP;AACD,SAHD;AAIA,eAAOpC,SAAP;AACD;;AACD,SAAKV,OAAO,CAACgD,iBAAb;AAA+B;AAC7B,eAAO1C,KAAP;AACD;;AACD;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AAtDJ;AA0DD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n        let stateCopy = _.cloneDeep(state)\n       fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n          stateCopy.agendaTotal = res.data.length\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let d = new Date();\n        let day = d.getDay();\n        let month = d.getMonth() + 1\n        let year = d.getFullYear();\n        // fetch ('http://127.0.0.1:5021/api/loadfilteredAgendas/'+action.payload.skip+\"/\"+action.payload.limit+\"/\"+year+\"/\" + month )\n        // .then((data)=> data.json())\n        // .then((res) => {\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,res.data))\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_FAIL,err)))\n        db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => doc.data());\n           console.log(data)\n          // action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_SUCCESS,data))\n         });\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let d = new Date();\n        let day = d.getDate();\n        let stateCopy = []\n        action.payload.map(agenda=>{\n         // if(agenda.day > day)\n          return stateCopy.push(agenda)\n        })\n        return stateCopy\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}