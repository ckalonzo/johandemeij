{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, dbRef } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"agendas\").add(stateCopy).then(docRef => {\n          db.collection(\"agendas\").doc(docRef.id).update(stateCopy).then(() => {\n            stateCopy._id = docRef.id;\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n          });\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        console.log(dbRef.child('agendas').orderByKey().limitToFirst(10));\n        let _id = '';\n        let stateCopy = '';\n        db.collection(\"agendas\").where(\"year\", \"==\", \"2020\").orderBy(\"month\", \"desc\").orderBy(\"day\", \"desc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          stateCopy = data;\n          let newData = [];\n          stateCopy.map((agenda, i) => {\n            agenda._id = _id;\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            if (i >= action.payload.skip && i <= action.payload.limit) newData.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, newData));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              post.title = title[0];\n              post.date = `${post.year}-${post.month}-${post.day}`;\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        let _id, stateCopy;\n\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          stateCopy = data;\n          if (stateCopy[0]) stateCopy[0]._id = _id;\n\n          if (data.length > 0) {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, stateCopy));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL, {\n              error: \"Failed to retrieve agenda\"\n            }));\n          }\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return { ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        console.log(action);\n        db.collection(\"agendas\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","dbRef","_","initialState","agendaReducer","state","action","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","collection","add","then","docRef","doc","id","update","_id","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","DELETE_AGENDA","where","get","querySnapshot","forEach","ref","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","console","log","child","orderByKey","limitToFirst","orderBy","data","docs","map","newData","agenda","i","date","month","day","year","skip","limit","push","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","d","Date","getDay","getMonth","toString","getFullYear","post","title","filter","presentation","cd","cdName","LOAD_AGENDAS_SUCCESS","agendas","LOAD_AGENDAS_FAIL","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","error","UPDATE_AGENDA","UPDATE_AGENDA_SUCCESS"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db , dbRef} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n        let stateCopy = _.cloneDeep(action.payload)\n        db.collection(\"agendas\")\n        .add(stateCopy).then((docRef)=>{\n          db.collection(\"agendas\")\n          .doc(docRef.id)\n          .update(stateCopy).then(()=>{\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n          });\n        })\n      return stateCopy\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n        return action.payload\n    }\n     case ACTIONS.DELETE_AGENDA:{\n\n        db.collection(\"agendas\")\n        .where('id','==',action.payload)\n          .get()\n          .then((querySnapshot) => {\n            querySnapshot.forEach((doc)=> doc.ref.delete())\n            action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n          });\n        return state\n     }  \n     case ACTIONS.DELETE_AGENDA_SUCCESS:{\n       action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n       return state\n     }  \n      case ACTIONS.LOAD_CD_AGENDA: {\nconsole.log(dbRef.child('agendas').orderByKey().limitToFirst(10))\n\n        let _id = ''\n        let stateCopy = ''\n        db.collection(\"agendas\")\n        .where(\"year\",\"==\",\"2020\")\n        .orderBy(\"month\",\"desc\")\n        .orderBy(\"day\",\"desc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id\n            return doc.data()});\n            stateCopy = data\n            let newData = []\n            stateCopy.map((agenda,i)=>{\n              agenda._id = _id\n              agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n              if(i >= action.payload.skip && i <= action.payload.limit)\n              newData.push(agenda)\n            })\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,newData))\n        });\n\n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n              post.title = title[0]; \n              post.date=`${post.year}-${post.month}-${post.day}`\n              return post\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_AGENDA:{\n      let _id,stateCopy \n      db.collection(\"agendas\")\n      .where(\"id\",\"==\",action.payload)\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => {\n          _id = doc.id\n          return doc.data()});\n          stateCopy= data\n          if(stateCopy[0])\n          stateCopy[0]._id = _id\n           \n    \n        if(data.length > 0){\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,stateCopy))\n        } else {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL,{error:\"Failed to retrieve agenda\"}))\n        }\n      });\n      return state\n      }\n      case ACTIONS.LOAD_AGENDA_SUCCESS:{\n        return {...action.payload[0]}\n      }\n      case ACTIONS.LOAD_AGENDA_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_AGENDA:{\n        console.log(action)\n          db.collection(\"agendas\")\n          .doc(action.payload._id)\n          .update(action.payload).then(()=>{\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n          });\n          return state\n          }\n      case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n      let stateCopy = _.cloneDeep(state)\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n      return {state,...action.payload}\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}