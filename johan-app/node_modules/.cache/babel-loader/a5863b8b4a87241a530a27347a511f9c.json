{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database, db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function AllAgendasReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_ALL_AGENDAS:\n      {\n        // const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload).endAt(action.payload)\n        // agendaYearRef.on('value',(snap,i)=>{\n        // let d = new Date();\n        // let month = (d.getMonth() + 1).toString()\n        // let agendas = []\n        // const data = snap.val()\n        // Object.values(data).map(agenda=>{\n        //   agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        //   if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n        //   return agendas.push(agenda)\n        // })\n        //  action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,agendas))\n        // })\n        let d = new Date();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        const agendaYearRef = database.ref('agendas');\n        agendaYearRef.on('child_added', (snap, i) => {\n          let agendas = [];\n          const data = snap.val();\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_ALL_AGENDAS_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['month', 'day'], ['asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_ALL_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/allAgendas.reducer.js"],"names":["ACTIONS","mainAction","database","db","_","initialState","AllAgendasReducer","state","action","type","LOAD_ALL_AGENDAS","d","Date","month","getMonth","toString","year","getFullYear","agendaYearRef","ref","on","snap","i","agendas","data","val","Object","values","map","agenda","date","day","push","asyncDispatch","LOAD_ALL_AGENDAS_SUCCESS","orderBy","payload","LOAD_ALL_AGENDAS_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,QAAT,EAAkBC,EAAlB,QAA4B,gBAA5B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA,eAAe,SAASC,iBAAT,CAA4BC,KAAK,GAAGF,YAApC,EAAkDG,MAAlD,EAA0D;AACvE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKT,OAAO,CAACU,gBAAb;AAA+B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAIC,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACA,YAAIC,KAAK,GAAG,CAACF,CAAC,CAACG,QAAF,KAAe,CAAhB,EAAmBC,QAAnB,EAAZ;AACA,YAAIC,IAAI,GAAGL,CAAC,CAACM,WAAF,GAAgBF,QAAhB,EAAX;AAEA,cAAMG,aAAa,GAAGhB,QAAQ,CAACiB,GAAT,CAAa,SAAb,CAAtB;AACAD,QAAAA,aAAa,CAACE,EAAd,CAAiB,aAAjB,EAA+B,CAACC,IAAD,EAAMC,CAAN,KAAU;AAEzC,cAAIC,OAAO,GAAG,EAAd;AACA,gBAAMC,IAAI,GAAGH,IAAI,CAACI,GAAL,EAAb;AACEC,UAAAA,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoBI,GAApB,CAAwBC,MAAM,IAAE;AAC9BA,YAAAA,MAAM,CAACC,IAAP,GAAe,GAAED,MAAM,CAAChB,KAAM,IAAGgB,MAAM,CAACE,GAAI,IAAGF,MAAM,CAACb,IAAK,EAA3D;AACAa,YAAAA,MAAM,CAAChB,KAAP,GAAe,CAACgB,MAAM,CAAChB,KAAvB;AACA,mBAAOU,OAAO,CAACS,IAAR,CAAaH,MAAb,CAAP;AACD,WAJD;AAKArB,UAAAA,MAAM,CAACyB,aAAP,CAAqBhC,UAAU,CAACD,OAAO,CAACkC,wBAAT,EAAkC9B,CAAC,CAAC+B,OAAF,CAAUZ,OAAV,EAAkB,CAAC,OAAD,EAAS,KAAT,CAAlB,EAAkC,CAAC,KAAD,EAAO,KAAP,CAAlC,CAAlC,CAA/B;AACD,SAVD;AAWE,eAAOhB,KAAP;AACD;;AACH,SAAKP,OAAO,CAACkC,wBAAb;AAAuC;AACnC,eAAO9B,CAAC,CAAC+B,OAAF,CAAU3B,MAAM,CAAC4B,OAAjB,EAAyB,CAAC,OAAD,EAAS,KAAT,CAAzB,EAAyC,CAAC,KAAD,EAAO,KAAP,CAAzC,CAAP;AACH;;AACD,SAAKpC,OAAO,CAACqC,qBAAb;AAAoC;AAChC,eAAO9B,KAAP;AACH;;AACD;AACE,aAAOA,KAAP;AAzCJ;AA2CC","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database,db } from \"../../firebase\";\nimport _ from \"lodash\"\nconst initialState = {\n};\nexport default function AllAgendasReducer (state = initialState, action) {\n  switch (action.type) {\n      \n    case ACTIONS.LOAD_ALL_AGENDAS: {\n      // const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload).endAt(action.payload)\n      // agendaYearRef.on('value',(snap,i)=>{\n      // let d = new Date();\n      // let month = (d.getMonth() + 1).toString()\n      // let agendas = []\n      // const data = snap.val()\n      // Object.values(data).map(agenda=>{\n      //   agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n      //   if(agenda.month >= month || agenda.month >= +month  && agenda.id > 0)\n      //   return agendas.push(agenda)\n      // })\n      //  action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,agendas))\n      // })\n      let d = new Date();\n      let month = (d.getMonth() + 1).toString()\n      let year = d.getFullYear().toString();\n  \n      const agendaYearRef = database.ref('agendas')\n      agendaYearRef.on('child_added',(snap,i)=>{\n  \n      let agendas = []\n      const data = snap.val()\n        Object.values(data).map(agenda=>{\n          agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n          agenda.month = +agenda.month\n          return agendas.push(agenda)\n        })\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n      })\n        return state\n      }\n    case ACTIONS.LOAD_ALL_AGENDAS_SUCCESS: { \n        return _.orderBy(action.payload,['month','day'],['asc','asc'])\n    }\n    case ACTIONS.LOAD_ALL_AGENDAS_FAIL: {\n        return state\n    }\n    default: \n      return state\n    }\n  }"]},"metadata":{},"sourceType":"module"}