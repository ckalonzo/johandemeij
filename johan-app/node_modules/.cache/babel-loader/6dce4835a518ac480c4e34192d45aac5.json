{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { updateEvent } from \"API/indexAPI\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function eventsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_EVENTS:\n      {\n        db.collection(\"events\").where(\"id\", '==', '53').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_EVENTS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_EVENTS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_EVENT:\n      {\n        db.collection(\"events\").where(\"id\", '==', '53').get().then(snapshotChanges => {\n          const data = snapshotChanges.docs.map(doc => {\n            console.log(doc);\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_EVENT_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_EVENT_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_EVENT:\n      {\n        console.log(action);\n        updateEvent(action.payload).then(json => {\n          console.log(json);\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_SUCCESS, json.data.data));\n        }).catch(err => {// action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_FAIL,err))\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_EVENT_SUCCESS:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_EVENT_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/events.reducer.js"],"names":["ACTIONS","mainAction","updateEvent","db","_","initialState","eventsReducer","state","action","type","LOAD_EVENTS","collection","where","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_EVENT_SUCCESS","LOAD_EVENTS_SUCCESS","payload","LOAD_EVENTS_FAIL","LOAD_EVENT","snapshotChanges","console","log","LOAD_EVENT_FAIL","UPDATE_EVENT","json","UPDATE_EVENT_SUCCESS","catch","err","UPDATE_EVENT_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAAQC,WAAR,QAA0B,cAA1B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AACjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKT,OAAO,CAACU,WAAb;AAA0B;AACxBP,QAAAA,EAAE,CAACQ,UAAH,CAAc,QAAd,EACAC,KADA,CACM,IADN,EACW,IADX,EACgB,IADhB,EAECC,GAFD,GAGCC,IAHD,CAGMC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAR,UAAAA,MAAM,CAACY,aAAP,CAAqBnB,UAAU,CAACD,OAAO,CAACqB,kBAAT,EAA4BL,IAA5B,CAA/B;AACD,SAND;AAOA,eAAOT,KAAP;AACD;;AACD,SAAKP,OAAO,CAACsB,mBAAb;AAAkC;AAChC,eAAOd,MAAM,CAACe,OAAd;AACD;;AACD,SAAKvB,OAAO,CAACwB,gBAAb;AAA+B;AAE7B,eAAOjB,KAAP;AACD;;AACD,SAAKP,OAAO,CAACyB,UAAb;AAAwB;AACtBtB,QAAAA,EAAE,CAACQ,UAAH,CAAc,QAAd,EACAC,KADA,CACM,IADN,EACW,IADX,EACgB,IADhB,EAECC,GAFD,GAGCC,IAHD,CAGMY,eAAe,IAAI;AACvB,gBAAMV,IAAI,GAAGU,eAAe,CAACT,IAAhB,CAAqBC,GAArB,CAAyBC,GAAG,IAAI;AAC3CQ,YAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AACA,mBAAOA,GAAG,CAACH,IAAJ,EAAP;AAAkB,WAFP,CAAb;AAIAR,UAAAA,MAAM,CAACY,aAAP,CAAqBnB,UAAU,CAACD,OAAO,CAACqB,kBAAT,EAA4BL,IAA5B,CAA/B;AACD,SATD;AAWA,eAAOT,KAAP;AACD;;AACD,SAAKP,OAAO,CAACqB,kBAAb;AAAgC;AAC9B,eAAOb,MAAM,CAACe,OAAd;AACD;;AACD,SAAKvB,OAAO,CAAC6B,eAAb;AAA6B;AAC3B,eAAOtB,KAAP;AACD;;AACD,SAAKP,OAAO,CAAC8B,YAAb;AAA2B;AACzBH,QAAAA,OAAO,CAACC,GAAR,CAAYpB,MAAZ;AACAN,QAAAA,WAAW,CAACM,MAAM,CAACe,OAAR,CAAX,CAA4BT,IAA5B,CAAiCiB,IAAI,IAAE;AACrCJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACAvB,UAAAA,MAAM,CAACY,aAAP,CAAqBnB,UAAU,CAACD,OAAO,CAACgC,oBAAT,EAA8BD,IAAI,CAACf,IAAL,CAAUA,IAAxC,CAA/B;AACD,SAHD,EAGGiB,KAHH,CAGSC,GAAG,IAAE,CACb;AACA,SALD;AAOA,eAAO3B,KAAP;AACD;;AACD,SAAKP,OAAO,CAACgC,oBAAb;AAAmC;AACjC,eAAOzB,KAAP;AACD;;AACD,SAAKP,OAAO,CAACmC,iBAAb;AAAgC;AAE9B,eAAO5B,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA3DJ;AA+DD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updateEvent} from \"API/indexAPI\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {};\nexport default function eventsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_EVENTS: {\n        db.collection(\"events\")\n       .where(\"id\",'==','53')\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_SUCCESS,data))\n        });\n        return state\n      }\n      case ACTIONS.LOAD_EVENTS_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_EVENTS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_EVENT:{\n        db.collection(\"events\")\n       .where(\"id\",'==','53')\n        .get()\n        .then(snapshotChanges => {\n          const data = snapshotChanges.docs.map(doc => {\n            console.log(doc)\n            return doc.data()});\n          \n          action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_SUCCESS,data))\n        });\n\n        return state\n      }\n      case ACTIONS.LOAD_EVENT_SUCCESS:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_EVENT_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_EVENT: {\n        console.log(action)\n        updateEvent(action.payload).then(json=>{\n          console.log(json)\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_SUCCESS,json.data.data))\n        }).catch(err=>{\n         // action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_FAIL,err))\n        })\n\n        return state\n      }\n      case ACTIONS.UPDATE_EVENT_SUCCESS: {\n        return state\n      }\n      case ACTIONS.UPDATE_EVENT_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}