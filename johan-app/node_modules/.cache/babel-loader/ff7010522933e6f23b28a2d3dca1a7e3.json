{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, storage } from \"../../firebase\";\nconst initialState = {};\nexport default function presentationMusicReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_PUBLICATION_MUSIC:\n      {\n        let stateCopy = action.payload;\n        let file = {\n          id: action.payload.id,\n          musicName: action.payload.file.name,\n          pres_id: action.payload.pres_id\n        };\n        console.log(file);\n        db.collection(\"presentationmusic\").doc().set(file).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS:\n      {\n        let postImageRef = storage.ref('music/' + action.payload.file.name).put(action.payload.file);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('/music').child(action.payload.file.name).getDownloadURL().then(url => {\n            console.log(url);\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC, action.payload.pres_id));\n          });\n        });\n      }\n\n    case ACTIONS.CREATE_PUBLICATION_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_PUBLICATION_MUSIC:\n      {\n        db.collection(\"presentationmusic\").where('id', '==', action.payload.ID).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => {\n            console.log(doc.ref.id, doc.ref.parent, doc.ref.path);\n            doc.ref.delete();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_PUBLICATION_MUSIC_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_PUBLICATION_MUSIC_SUCCESS:\n      {\n        let postImageRef = storage.ref('music/' + action.payload.name);\n        postImageRef.delete().then(() => console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC, action.payload.ID)); //window.location.reload()\n\n        return state;\n      }\n\n    case ACTIONS.DELETE_PUBLICATION_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PUBLICATION_MUSIC:\n      {\n        db.collection(\"presentationmusic\").where(\"pres_id\", \"==\", action.payload).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          console.log();\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC_SUCCESS, data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC_FAIL, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PUBLICATION_MUSIC_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_PUBLICATION_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Websites/johandemeij/johan-app/src/redux/reducers/presentationMusic.reducer.js"],"names":["ACTIONS","mainAction","db","storage","initialState","presentationMusicReducer","state","action","type","CREATE_PUBLICATION_MUSIC","stateCopy","payload","file","id","musicName","name","pres_id","console","log","collection","doc","set","then","asyncDispatch","CREATE_PUBLICATION_MUSIC_SUCCESS","postImageRef","ref","put","on","snapshot","error","child","getDownloadURL","url","LOAD_PUBLICATION_MUSIC","CREATE_PUBLICATION_MUSIC_FAIL","DELETE_PUBLICATION_MUSIC","where","ID","get","querySnapshot","forEach","parent","path","delete","DELETE_PUBLICATION_MUSIC_SUCCESS","DELETE_PUBLICATION_MUSIC_FAIL","data","docs","map","LOAD_PUBLICATION_MUSIC_SUCCESS","catch","err","LOAD_PUBLICATION_MUSIC_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db,storage} from \"../../firebase\";\nconst initialState = {\n   \n};\nexport default function presentationMusicReducer (state = initialState, action) {\n    switch (action.type) {\n  \n     case ACTIONS.CREATE_PUBLICATION_MUSIC : {\n      let stateCopy = action.payload\n      let file = {\n        id: action.payload.id,\n        musicName: action.payload.file.name,\n        pres_id: action.payload.pres_id,\n      }\n      console.log(file)\n      db.collection(\"presentationmusic\")\n          .doc()\n          .set(file)\n          .then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS,action.payload))\n          })\n      return state\n     }\n     case ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS : {\n      let postImageRef = storage.ref('music/'+action.payload.file.name).put(action.payload.file);\n      postImageRef.on('state_changed',(snapshot)=>{\n        //progress function\n      },(error)=>{\n        //error\n        console.log(error)\n      },()=>{\n        //complete\n        storage.ref('/music').child(action.payload.file.name).getDownloadURL().then(url=>{\n          console.log(url)\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC,action.payload.pres_id))\n        })\n      })\n\n     }\n     case ACTIONS.CREATE_PUBLICATION_MUSIC_FAIL : {\n      return state\n     }\n     case ACTIONS.DELETE_PUBLICATION_MUSIC : {\n       \n         db.collection(\"presentationmusic\")\n         .where('id','==',action.payload.ID)\n          .get()\n          .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=>{\n              console.log(doc.ref.id,doc.ref.parent,doc.ref.path)\n              doc.ref.delete()\n             })\n           action.asyncDispatch(mainAction(ACTIONS.DELETE_PUBLICATION_MUSIC_SUCCESS,action.payload))\n          });\n      \n      return state\n     }\n     case ACTIONS.DELETE_PUBLICATION_MUSIC_SUCCESS : {\n      let postImageRef = storage.ref('music/'+action.payload.name)\n      postImageRef.delete().then(()=>console.log(\"file deleted\"));\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC,action.payload.ID))\n      //window.location.reload()\n      return state\n     }\n     case ACTIONS.DELETE_PUBLICATION_MUSIC_FAIL : {\n      return state\n     }\n     case ACTIONS.LOAD_PUBLICATION_MUSIC : {\n       db.collection(\"presentationmusic\")\n       .where(\"pres_id\",\"==\",action.payload)\n       .get()\n       .then(snapshot=>{\n         const data = snapshot.docs.map(doc => {return doc.data()})\n         console.log()\n         action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC_SUCCESS,data))\n       })\n       .catch(err=>{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC_FAIL,action.payload))\n       })\n\n      return state\n     }\n     case ACTIONS.LOAD_PUBLICATION_MUSIC_SUCCESS : {\n      return action.payload\n     }\n     case ACTIONS.LOAD_PUBLICATION_MUSIC_FAIL : {\n      return state\n     }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}