{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database, db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nlet d = new Date();\nlet day = d.getDate();\nlet month = d.getMonth() + 1;\nlet year = d.getFullYear();\nconsole.log(day);\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        console.log(action);\n        const agendaRef = database.ref('agendas/' + action.payload.id);\n        agendaRef.set(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, action.payload));\n        }).catch(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_FAIL, {\n            error: \"could not creat agenda\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"year\", \"==\", year.toString()).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          let agendas = [];\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            console.log(agenda.month, \">=\", month, \"&&\", agenda.day, \">\", day);\n            if (agenda.month >= month && agenda.day > day) agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, agendas));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['month', 'day'], ['asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        db.collection(\"agendas\").where(\"year\", \"==\", year.toString()).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          let agendas = [];\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            console.log(agenda.month, \">=\", month, \"&&\", agenda.day, \">\", day);\n            if (agenda.month >= month && agenda.day > day) return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        //   let d = new Date();\n        // let month = (d.getMonth() + 1).toString()\n        // let year = d.getFullYear().toString();\n        // const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload.year).endAt(action.payload.year)\n        // agendaYearRef.on('value',(snap,i)=>{\n        // let agendas = []\n        // const data = snap.val()\n        //   Object.values(data).map(agenda=>{\n        //     agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        //     agenda.month = +agenda.month\n        //     return agendas.push(agenda)\n        //   })\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n        // })\n        console.log(action);\n        db.collection(\"agendas\").where(\"year\", \"==\", action.payload.year.toString()).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          let agendas = [];\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        let stateCopy = [];\n        var agendaRef = database.ref('agendas/' + action.payload);\n        agendaRef.on('value', (snap, i) => {\n          const data = snap.val();\n          if (data) action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...data\n          }));\n        });\n        var agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload);\n        agendaRef.on('child_added', (snap, i) => {\n          const data = snap.val();\n          stateCopy = data;\n          if (stateCopy) action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...stateCopy\n          }));\n        });\n        return { ...stateCopy\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        const agendaRef = database.ref('agendas');\n        agendaRef.child(action.payload.id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        }).catch(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_FAIL, {\n            error: \"failed to update agenda\"\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","database","db","_","initialState","d","Date","day","getDate","month","getMonth","year","getFullYear","console","log","agendaReducer","state","action","type","CREATE_NEW_AGENDA","agendaRef","ref","payload","id","set","then","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","catch","CREATE_NEW_AGENDA_FAIL","error","DELETE_AGENDA","collection","where","get","querySnapshot","forEach","doc","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","toString","orderBy","snapshot","agendas","data","docs","map","Object","values","agenda","date","push","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDAS_FILTERED","LOAD_AGENDA","stateCopy","on","snap","i","val","LOAD_AGENDA_SUCCESS","orderByChild","startAt","endAt","LOAD_AGENDA_FAIL","UPDATE_AGENDA","child","update","UPDATE_AGENDA_SUCCESS","UPDATE_AGENDA_FAIL","cloneDeep"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database,db} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nlet d = new Date();\nlet day = d.getDate();\nlet month = d.getMonth()+1;\nlet year = d.getFullYear()\nconsole.log(day)\nexport default function agendaReducer (state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n      console.log(action)\n     \n     const agendaRef = database.ref('agendas/'+action.payload.id)\n    agendaRef.set(action.payload).then(()=>{\n      action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,action.payload))\n    })\n    .catch(()=>{\n      action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_FAIL,{error:\"could not creat agenda\"}))\n    });\n   \n    return state\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.DELETE_AGENDA:{\n    db.collection(\"agendas\")\n    .where('id','==',action.payload)\n     .get()\n     .then((querySnapshot) => {\n       querySnapshot.forEach((doc)=> doc.ref.delete())\n       action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n     });\n\n    return state\n    }  \n    case ACTIONS.DELETE_AGENDA_SUCCESS:{\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n    return state\n    }  \n    case ACTIONS.LOAD_CD_AGENDA: {\n\n\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",year.toString())\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      let agendas = []\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n        console.log(agenda.month ,\">=\", month ,\"&&\", agenda.day ,\">\", day)\n        if(agenda.month >= month && agenda.day > day)\n        agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,agendas))\n    })\n      \n\n    return state\n    }\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n    return _.orderBy(action.payload,['month','day'],['asc','asc'])\n    }\n    case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS: {\n\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",year.toString())\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      let agendas = []\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n        console.log(agenda.month ,\">=\", month ,\"&&\", agenda.day ,\">\", day)\n        if(agenda.month >= month && agenda.day > day)\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDAS_FAIL:{\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n    //   let d = new Date();\n    // let month = (d.getMonth() + 1).toString()\n    // let year = d.getFullYear().toString();\n\n    // const agendaYearRef = database.ref('agendas').orderByChild('year').startAt(action.payload.year).endAt(action.payload.year)\n    // agendaYearRef.on('value',(snap,i)=>{\n\n    // let agendas = []\n    // const data = snap.val()\n    //   Object.values(data).map(agenda=>{\n    //     agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n    //     agenda.month = +agenda.month\n    //     return agendas.push(agenda)\n    //   })\n    //   action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n    // })\n\nconsole.log(action)\n\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",action.payload.year.toString())\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      let agendas = []\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n      return action.payload\n    }\n    case ACTIONS.LOAD_AGENDA:{\n    let stateCopy = []\n    var agendaRef = database.ref('agendas/'+action.payload)\n     agendaRef.on('value',(snap,i)=>{\n    const data = snap.val()\n    if(data) \n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...data}))\n      \n    })\n    var agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload)\n     agendaRef.on('child_added',(snap,i)=>{\n    const data = snap.val()\n    stateCopy = data\n    if(stateCopy)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...stateCopy}))\n      \n    })\n    return {...stateCopy}\n    }\n    case ACTIONS.LOAD_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDA_FAIL:{\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA:{\n      const agendaRef = database.ref('agendas')\n      agendaRef.child(action.payload.id).update(action.payload)\n      .then(()=>{\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n      }).catch(()=>{\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_FAIL,{error:\"failed to update agenda\"}))\n      })\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n    let stateCopy = _.cloneDeep(action.payload)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n    return stateCopy\n    }\n    case ACTIONS.UPDATE_AGENDA_FAIL:{\n   \n    return state\n    }\n    default: \n      return {\n        ...state\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}