{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        fetch('http://127.0.0.1:5021/api/loadAgendasByPage/' + action.payload.skip + \"/\" + action.payload.limit).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, res.data));\n          stateCopy.agendaTotal = res.data.length;\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              return post.title = title[0];\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let day = d.getDate();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        stateCopy.map((agenda, i) => {\n          db.collection(\"presentations\").where(\"id\", \"==\", agenda.cd.toString()).get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            agenda.title = data[0] ? data[0].cdName : \"\";\n          });\n        });\n        let yearFilter = stateCopy.filter(agendas => agendas.year === '2020');\n        let monthFilter = yearFilter.filter(agendas => agendas.month >= month);\n\n        let dayFilter = _.orderBy(monthFilter, 'day');\n\n        return dayFilter;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","cloneDeep","fetch","payload","skip","limit","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","agendaTotal","length","catch","err","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","agendas","d","Date","day","getDay","month","getMonth","toString","year","getFullYear","collection","where","orderBy","get","querySnapshot","docs","map","doc","post","i","title","filter","presentation","id","cd","cdName","LOAD_AGENDAS_SUCCESS","getDate","agenda","yearFilter","monthFilter","dayFilter","LOAD_AGENDAS_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n        let stateCopy = _.cloneDeep(state)\n       fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n          stateCopy.agendaTotal = res.data.length\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n             \n              return post.title = title[0]\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let day = d.getDate();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n        \n        stateCopy.map((agenda,i)=>{\n          \n          db.collection(\"presentations\")\n          .where(\"id\",\"==\",agenda.cd.toString())\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            agenda.title=data[0] ?data[0].cdName:\"\"\n          });\n        })\n        let yearFilter = stateCopy.filter(agendas=>agendas.year === '2020')\n        let monthFilter = yearFilter.filter(agendas=>agendas.month >= month)\n        let dayFilter =  _.orderBy(monthFilter,'day')\n        return dayFilter\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}