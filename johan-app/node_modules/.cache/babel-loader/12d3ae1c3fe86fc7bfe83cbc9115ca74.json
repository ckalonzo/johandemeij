{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nimport { createCd, updateCd } from \"API/indexAPI\";\nconst initialState = {};\nexport default function cdReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_CD:\n      {\n        createCd(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_SUCCESS, json));\n        }).catch(err => {\n          console.log(action, err);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_FAIL, err));\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_CD_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_CD_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.currentID = action.payload;\n        db.collection(\"cds\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_CD_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD:\n      {\n        db.collection(\"posts\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_CD_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE:\n      {\n        // let stateCopy = _.cloneDeep(action.payload)\n        //  let image = stateCopy.image\n        //  updateCdImage(image).then((json)=>{\n        //   if(json.status!==404 || json.status!==500) {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n        //   } else {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,json.response.message))\n        //   }\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,err)))\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_CD_IMAGE:\n      {\n        // let stateCopy = _.cloneDeep(action.payload)\n        //  let image = stateCopy.image\n        //  console.log(action)\n        //  uploadCDImage(image).then((json)=>{\n        //   if(json.status!==404 || json.status!==500) {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n        //   } else {\n        //     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL,json.response.message))\n        //   }\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL,err)))\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_CD_IMAGE_SUCCESS:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(state);\n\n        let image = '';\n\n        if (action.payload.submitted.cover === \"frontCover\") {\n          image = {\n            _id: action.payload.submitted._id,\n            frontCover: action.payload.json.data.filename,\n            frontCaption: action.payload.submitted.caption\n          };\n        } else {\n          image = {\n            _id: action.payload.submitted._id,\n            backCover: action.payload.json.data.filename,\n            backCaption: action.payload.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD, image));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_CD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_IMAGE:\n      {\n        console.log(action);\n        let image = '';\n\n        if (action.submitted.cover === \"frontCover\") {\n          image = {\n            frontCover: action.json.data.filename,\n            frontCaption: action.submitted.caption\n          };\n        } else {\n          image = {\n            backCover: action.json.data.filename,\n            backCaption: action.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD, image));\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cd.reducer.js"],"names":["ACTIONS","mainAction","db","_","createCd","updateCd","initialState","cdReducer","state","action","type","CREATE_NEW_CD","payload","then","json","asyncDispatch","CREATE_NEW_CD_SUCCESS","catch","err","console","log","CREATE_NEW_CD_FAIL","LOAD_CD","stateCopy","cloneDeep","currentID","collection","where","get","querySnapshot","data","docs","map","doc","LOAD_CD_SUCCESS","length","LOAD_CD_FAIL","UPDATE_CD","_id","update","UPDATE_CD_SUCCESS","ID","UPDATE_CD_FAIL","UPDATE_CD_IMAGE","UPDATE_CD_IMAGE_SUCCESS","newImage","submitted","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_CD_IMAGE_FAIL","UPLOAD_CD_IMAGE","UPLOAD_CD_IMAGE_SUCCESS","image","frontCover","frontCaption","backCover","backCaption","UPLOAD_CD_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport  _ from \"lodash\"\nimport {createCd,updateCd} from \"API/indexAPI\"\nconst initialState = {};\nexport default function cdReducer (state = initialState, action) {\n    switch (action.type) {\n  \n        case ACTIONS.CREATE_NEW_CD: {\n        createCd(action.payload).then(json =>{\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_SUCCESS,json))\n        }).catch(err => {\n            console.log(action,err)\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_CD_FAIL,err))\n        })\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_CD_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_CD_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_CD: {\n        let stateCopy = _.cloneDeep(state)\n        stateCopy.currentID = action.payload\n\n            db.collection(\"cds\")\n            .where(\"id\",\"==\",action.payload)\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_SUCCESS,data))\n            });\n            return state\n        }\n        case  ACTIONS.LOAD_CD_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_CD_FAIL:{\n            return state\n        }\n        case ACTIONS.UPDATE_CD:{\n        db.collection(\"posts\").doc(action.payload._id)\n          .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_SUCCESS,action.payload))\n        });\n        return state\n        }\n        case ACTIONS.UPDATE_CD_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD,stateCopy.ID))\n        return {state,...action.payload}\n        }\n        case ACTIONS.UPDATE_CD_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE:{\n            // let stateCopy = _.cloneDeep(action.payload)\n            //  let image = stateCopy.image\n            //  updateCdImage(image).then((json)=>{\n    \n            //   if(json.status!==404 || json.status!==500) {\n            //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n            //   } else {\n            //     action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,json.response.message))\n            //   }\n            // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_IMAGE_FAIL,err)))\n          \n            return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_CD_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE:{\n          // let stateCopy = _.cloneDeep(action.payload)\n          //  let image = stateCopy.image\n          //  console.log(action)\n          //  uploadCDImage(image).then((json)=>{\n  \n          //   if(json.status!==404 || json.status!==500) {\n          //     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          //   } else {\n          //     action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL,json.response.message))\n          //   }\n          // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_CD_IMAGE_FAIL,err)))\n        \n          return state\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE_SUCCESS:{\n          console.log(action)\n            let stateCopy = _.cloneDeep(state)\n            \n            let image = ''\n          if(action.payload.submitted.cover === \"frontCover\") {\n            image = {\n              _id:action.payload.submitted._id,\n              frontCover:action.payload.json.data.filename,\n              frontCaption:action.payload.submitted.caption \n            }\n          } else {\n            image = {\n              _id:action.payload.submitted._id,\n              backCover:action.payload.json.data.filename,\n              backCaption:action.payload.submitted.caption \n            }\n          }\n            action.asyncDispatch(mainAction( ACTIONS.UPDATE_CD,image))\n          return stateCopy\n        }\n        case ACTIONS.UPLOAD_CD_IMAGE_FAIL:{\n          return state\n        }\n        case ACTIONS.UPDATE_CD_IMAGE:{\n          console.log(action)\n          let image = ''\n          if(action.submitted.cover === \"frontCover\") {\n            image = {\n              frontCover:action.json.data.filename,\n              frontCaption:action.submitted.caption \n            }\n          } else {\n            image = {\n              backCover:action.json.data.filename,\n              backCaption:action.submitted.caption \n            }\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_CD,image))\n          return state\n        }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}