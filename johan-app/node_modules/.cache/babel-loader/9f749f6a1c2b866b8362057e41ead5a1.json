{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport _ from \"lodash\";\nimport { createPresentation } from \"API/indexAPI\";\nconst initialState = {};\nexport default function presentationReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_PUBLICATION:\n      {\n        createPresentation(action.payload).then(json => {\n          console.log(action, json);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS, json));\n        }).catch(err => {\n          console.log(action, err);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_FAIL, err));\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.currentID = action.payload;\n        fetch('http://localhost:3001/api/loadPresentationByID/' + action.payload).then(data => data.json()).then(res => {\n          console.log(res.data);\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/presentation.reducer.js"],"names":["ACTIONS","mainAction","_","createPresentation","initialState","presentationReducer","state","action","type","CREATE_NEW_PUBLICATION","payload","then","json","console","log","asyncDispatch","CREATE_NEW_PUBLICATION_SUCCESS","catch","err","CREATE_NEW_PUBLICATION_FAIL","LOAD_PRESENTATION","stateCopy","cloneDeep","currentID","fetch","data","res","LOAD_PRESENTATION_SUCCESS","LOAD_PRESENTATION_FAIL","length","UPDATE_PUBLICATION","updatePost","UPDATE_PUBLICATION_SUCCESS","UPDATE_PUBLICATION_FAIL","LOAD_POST","ID"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport  _ from \"lodash\"\nimport {createPresentation} from \"API/indexAPI\"\nconst initialState = {};\nexport default function presentationReducer (state = initialState, action) {\n    switch (action.type) {\n  \n        case ACTIONS.CREATE_NEW_PUBLICATION: {\n        createPresentation(action.payload).then(json =>{\n            console.log(action,json)\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS,json))\n        }).catch(err => {\n            console.log(action,err)\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_FAIL,err))\n        })\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_PRESENTATION: {\n        let stateCopy = _.cloneDeep(state)\n        stateCopy.currentID = action.payload\n            fetch ('http://localhost:3001/api/loadPresentationByID/'+ action.payload)\n            .then((data)=> data.json())\n            .then((res) => {\n                console.log(res.data)\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS,res.data))\n            \n            }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_FAIL,err)))\n            return state\n        }\n        case  ACTIONS.LOAD_PRESENTATION_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_PRESENTATION_FAIL:{\n            return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION:{\n            updatePost(action.payload).then(json=>{\n              action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS,json.data.data))\n            }).catch(err=>{\n              action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_FAIL,err))\n            })\n            return state\n          }\n          case ACTIONS.UPDATE_PUBLICATION_SUCCESS:{\n            let stateCopy = _.cloneDeep(state)\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n            return {state,...action.payload}\n          }\n          case ACTIONS.UPDATE_PUBLICATION_FAIL:{\n            return state\n          }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}