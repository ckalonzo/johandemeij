{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nconst initialState = {};\nexport default function cdInfoReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_INFO:\n      {\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"cd_info\").where(\"cdId\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n          stateCopy.map((cdinfo, i) => {\n            //=======================================================\n            db.collection(\"presentations\").where(\"id\", \"==\", cdinfo.track_title).get().then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n              cdinfo.title = data[0].cdName;\n              cdinfo.duration = data[0].duration;\n              cdinfo.codes = data[0].codes;\n            }); //========================================================\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS, stateCopy));\n        }); //=======================================================\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cdInfo.reducer.js"],"names":["ACTIONS","mainAction","db","initialState","cdInfoReducer","state","action","type","LOAD_CD_INFO","stateCopy","collection","where","payload","get","then","querySnapshot","data","docs","map","doc","cdinfo","i","track_title","title","cdName","duration","codes","asyncDispatch","LOAD_CD_INFO_SUCCESS","LOAD_CD_INFO_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AACjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,OAAO,CAACQ,YAAb;AAA2B;AAEzB,YAAIC,SAAS,GAAG,EAAhB,CAFyB,CAG5B;;AACAP,QAAAA,EAAE,CAACQ,UAAH,CAAc,SAAd,EACCC,KADD,CACO,MADP,EACc,IADd,EACmBL,MAAM,CAACM,OAD1B,EAEAC,GAFA,GAGAC,IAHA,CAGKC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,UAAAA,SAAS,GAAGO,IAAZ;AACAP,UAAAA,SAAS,CAACS,GAAV,CAAc,CAACE,MAAD,EAAQC,CAAR,KAAY;AACxB;AACAnB,YAAAA,EAAE,CAACQ,UAAH,CAAc,eAAd,EACCC,KADD,CACO,IADP,EACY,IADZ,EACiBS,MAAM,CAACE,WADxB,EAECT,GAFD,GAGCC,IAHD,CAGMC,aAAa,IAAI;AACrB,oBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAI,cAAAA,MAAM,CAACG,KAAP,GAAcP,IAAI,CAAC,CAAD,CAAJ,CAAQQ,MAAtB;AACAJ,cAAAA,MAAM,CAACK,QAAP,GAAiBT,IAAI,CAAC,CAAD,CAAJ,CAAQS,QAAzB;AACAL,cAAAA,MAAM,CAACM,KAAP,GAAcV,IAAI,CAAC,CAAD,CAAJ,CAAQU,KAAtB;AACD,aARD,EAFwB,CAWzB;AACD,WAZA;AAaDpB,UAAAA,MAAM,CAACqB,aAAP,CAAqB1B,UAAU,CAACD,OAAO,CAAC4B,oBAAT,EAA8BnB,SAA9B,CAA/B;AACA,SApBA,EAJ4B,CAyB5B;;AAEG,eAAOJ,KAAP;AACD;;AACD,SAAKL,OAAO,CAAC4B,oBAAb;AAAmC;AAEjC,eAAOtB,MAAM,CAACM,OAAd;AACD;;AACD,SAAKZ,OAAO,CAAC6B,iBAAb;AAAgC;AAE9B,eAAOxB,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AAzCJ;AA6CD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nconst initialState = {};\nexport default function cdInfoReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_CD_INFO: {\n\n        let stateCopy = ''\n     //=======================================================\n     db.collection(\"cd_info\")\n     .where(\"cdId\",\"==\",action.payload)\n    .get()\n    .then(querySnapshot => {\n      const data = querySnapshot.docs.map(doc => doc.data());\n      stateCopy = data;\n      stateCopy.map((cdinfo,i)=>{\n        //=======================================================\n        db.collection(\"presentations\")\n        .where(\"id\",\"==\",cdinfo.track_title)\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          cdinfo.title =data[0].cdName\n          cdinfo.duration =data[0].duration\n          cdinfo.codes =data[0].codes\n        });\n       //========================================================\n     })\n     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS,stateCopy))\n    });\n     //=======================================================\n\n        return state\n      }\n      case ACTIONS.LOAD_CD_INFO_SUCCESS: {\n        \n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_INFO_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}