{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        fetch('http://localhost:3001/api/loadAgendas').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, res.data));\n          stateCopy.agendaTotal = res.data.length;\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        let stateCopy = [];\n\n        _.orderBy(action.payload, ['year', 'month', 'day'], ['desc', 'desc', 'desc']).map((agenda, index) => {\n          if (index <= 20) return stateCopy.push(agenda);\n        });\n\n        stateCopy.total = action.payload.length;\n        console.log(stateCopy);\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        console.log(action);\n        fetch('http://localhost:3001/api/loadfilteredAgendas?skip=' + action.skip).then(data => data.json()).then(res => {\n          // action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,res.data))\n          console.log(res.data);\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_FAIL, err)));\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","cloneDeep","fetch","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","agendaTotal","length","catch","err","LOAD_CD_AGENDA_FAIL","orderBy","payload","map","agenda","index","push","total","console","log","LOAD_AGENDAS","skip","LOAD_AGENDAS_FAIL","LOAD_AGENDAS_SUCCESS"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AACjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,OAAO,CAACQ,cAAb;AAA6B;AAC3B,YAAIC,SAAS,GAAGP,CAAC,CAACQ,SAAF,CAAYL,KAAZ,CAAhB;;AACDM,QAAAA,KAAK,CAAC,uCAAD,CAAL,CACEC,IADF,CACQC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADjB,EAEEF,IAFF,CAEQG,GAAD,IAAS;AACbT,UAAAA,MAAM,CAACU,aAAP,CAAqBf,UAAU,CAACD,OAAO,CAACiB,sBAAT,EAAgCF,GAAG,CAACF,IAApC,CAA/B;AACAJ,UAAAA,SAAS,CAACS,WAAV,GAAwBH,GAAG,CAACF,IAAJ,CAASM,MAAjC;AACD,SALF,EAKIC,KALJ,CAKUC,GAAG,IAAIf,MAAM,CAACU,aAAP,CAAqBf,UAAU,CAACD,OAAO,CAACsB,mBAAT,EAA6BD,GAA7B,CAA/B,CALjB;AAOC,eAAOZ,SAAP;AACD;;AACD,SAAKT,OAAO,CAACiB,sBAAb;AAAqC;AACpC,YAAIR,SAAS,GAAG,EAAhB;;AAEAP,QAAAA,CAAC,CAACqB,OAAF,CAAUjB,MAAM,CAACkB,OAAjB,EAAyB,CAAC,MAAD,EAAQ,OAAR,EAAgB,KAAhB,CAAzB,EAAgD,CAAC,MAAD,EAAQ,MAAR,EAAe,MAAf,CAAhD,EAAwEC,GAAxE,CAA4E,CAACC,MAAD,EAAQC,KAAR,KAAgB;AAC1F,cAAGA,KAAK,IAAI,EAAZ,EACA,OAAOlB,SAAS,CAACmB,IAAV,CAAeF,MAAf,CAAP;AACD,SAHD;;AAIDjB,QAAAA,SAAS,CAACoB,KAAV,GAAkBvB,MAAM,CAACkB,OAAP,CAAeL,MAAjC;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYtB,SAAZ;AACE,eAAOA,SAAP;AACD;;AACD,SAAKT,OAAO,CAACsB,mBAAb;AAAkC;AAEhC,eAAOjB,KAAP;AACD;;AACD,SAAKL,OAAO,CAACgC,YAAb;AAA2B;AACzBF,QAAAA,OAAO,CAACC,GAAR,CAAYzB,MAAZ;AACAK,QAAAA,KAAK,CAAE,wDAAsDL,MAAM,CAAC2B,IAA/D,CAAL,CACCrB,IADD,CACOC,IAAD,IAASA,IAAI,CAACC,IAAL,EADf,EAECF,IAFD,CAEOG,GAAD,IAAS;AACd;AACAe,UAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAG,CAACF,IAAhB;AACA,SALD,EAKGO,KALH,CAKSC,GAAG,IAAIf,MAAM,CAACU,aAAP,CAAqBf,UAAU,CAACD,OAAO,CAACkC,iBAAT,EAA2Bb,GAA3B,CAA/B,CALhB;AAMD;;AACD,SAAKrB,OAAO,CAACmC,oBAAb;AAAkC;AAEhC,eAAO7B,MAAM,CAACkB,OAAd;AACD;;AACD,SAAKxB,OAAO,CAACkC,iBAAb;AAA+B;AAC7B,eAAO7B,KAAP;AACD;;AACD;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA7CJ;AAiDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport _ from \"lodash\"\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n        let stateCopy = _.cloneDeep(state)\n       fetch('http://localhost:3001/api/loadAgendas')\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n          stateCopy.agendaTotal = res.data.length\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n       let stateCopy = []\n\n       _.orderBy(action.payload,['year','month','day'],['desc','desc','desc']).map((agenda,index)=>{\n         if(index <= 20)\n         return stateCopy.push(agenda)\n       })\n      stateCopy.total = action.payload.length;\n      console.log(stateCopy)\n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        console.log(action)\n        fetch ('http://localhost:3001/api/loadfilteredAgendas?skip='+action.skip)\n        .then((data)=> data.json())\n        .then((res) => {\n         // action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,res.data))\n         console.log(res.data)\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_FAIL,err)))\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        \n        return action.payload\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}