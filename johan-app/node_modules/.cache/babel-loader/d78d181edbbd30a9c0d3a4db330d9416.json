{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { uploadImage } from \"API/indexAPI\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function postImageReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_POST_IMAGE:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES, []));\n        console.log(state); //let image = Object.values(props.postImages).filter(postImage => postImage.albumID === ID)\n\n        let image = action.payload.image[0];\n        return { ...image\n        };\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        uploadImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, json));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let image = action.json ? action.json.data.filename : '';\n        stateCopy.imageName = image;\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/postImage.reducer.js"],"names":["ACTIONS","mainAction","uploadImage","_","initialState","postImageReducer","state","action","type","LOAD_POST_IMAGE","asyncDispatch","LOAD_POST_IMAGES","console","log","image","payload","UPLOAD_IMAGE","then","json","UPLOAD_IMAGE_SUCCESS","catch","err","UPLOAD_IMAGE_FAIL","stateCopy","cloneDeep","data","filename","imageName"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAAQC,WAAR,QAA0B,cAA1B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,gBAAT,CAA2BC,KAAK,GAAGF,YAAnC,EAAiDG,MAAjD,EAAyD;AACpE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,OAAO,CAACS,eAAb;AAA6B;AAC3BF,QAAAA,MAAM,CAACG,aAAP,CAAqBT,UAAU,CAACD,OAAO,CAACW,gBAAT,EAA0B,EAA1B,CAA/B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,EAF2B,CAG3B;;AACE,YAAIQ,KAAK,GAAGP,MAAM,CAACQ,OAAP,CAAeD,KAAf,CAAqB,CAArB,CAAZ;AACA,eAAO,EAAC,GAAGA;AAAJ,SAAP;AACH;;AACD,SAAKd,OAAO,CAACgB,YAAb;AAA0B;AACxBd,QAAAA,WAAW,CAACK,MAAM,CAACQ,OAAR,CAAX,CAA4BE,IAA5B,CAAkCC,IAAD,IAAQ;AACvCX,UAAAA,MAAM,CAACG,aAAP,CAAqBT,UAAU,CAACD,OAAO,CAACmB,oBAAT,EAA8BD,IAA9B,CAA/B;AACD,SAFD,EAEGE,KAFH,CAESC,GAAG,IAAId,MAAM,CAACG,aAAP,CAAqBT,UAAU,CAACD,OAAO,CAACsB,iBAAT,EAA2BD,GAA3B,CAA/B,CAFhB;AAGA,eAAOf,KAAP;AACD;;AACD,SAAKN,OAAO,CAACmB,oBAAb;AAAkC;AAC9B,YAAII,SAAS,GAAGpB,CAAC,CAACqB,SAAF,CAAYlB,KAAZ,CAAhB;;AACA,YAAIQ,KAAK,GAAGP,MAAM,CAACW,IAAP,GAAcX,MAAM,CAACW,IAAP,CAAYO,IAAZ,CAAiBC,QAA/B,GAAwC,EAApD;AACAH,QAAAA,SAAS,CAACI,SAAV,GAAsBb,KAAtB;AACF,eAAOS,SAAP;AACD;;AACD,SAAKvB,OAAO,CAACsB,iBAAb;AAA+B;AAC7B,eAAOhB,KAAP;AACD;;AACD;AACE,aAAOA,KAAP;AAxBJ;AA2BD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {uploadImage} from \"API/indexAPI\"\nimport _ from \"lodash\"\nconst initialState = {};\nexport default function postImageReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.LOAD_POST_IMAGE:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES,[]))\n        console.log(state)\n        //let image = Object.values(props.postImages).filter(postImage => postImage.albumID === ID)\n          let image = action.payload.image[0]\n          return {...image}\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        uploadImage(action.payload).then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,json))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          let image = action.json ? action.json.data.filename:''\n          stateCopy.imageName = image\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      default: \n        return state\n       \n    }\n  }"]},"metadata":{},"sourceType":"module"}