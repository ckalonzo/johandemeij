{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { updatePostImage, createPost, uploadPostImage, createPostImage, deletePostImage, deletePost } from \"API/indexAPI\";\nimport _ from \"lodash\";\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {\n  currentID: ''\n};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_POST_IMAGE:\n      {\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_POST:\n      {\n        createPost(action.payload).then(json => {\n          console.log(action, json);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS, json));\n        }).catch(err => {\n          console.log(action, err);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_FAIL, err));\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        deletePost(action.payload.image).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_FAIL, err));\n        });\n        stateCopy.currentID = action.payload.post;\n        return stateCopy;\n      }\n\n    case ACTIONS.DELETE_POST_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        deletePostImage(action.payload.image).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_FAIL, err));\n        });\n        stateCopy.currentID = action.payload.post;\n        return stateCopy;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.DELETE_POST_IMAGE_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.currentID = action.payload;\n        fetch('http://127.0.0.1:5020/api/loadPostByID/' + action.payload).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return action.payload[0];\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, stateCopy.ID));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_IMAGE, newImage));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","updatePostImage","createPost","uploadPostImage","createPostImage","deletePostImage","deletePost","_","NavDropdown","initialState","currentID","singlePostReducer","state","action","type","CREATE_NEW_POST_IMAGE","payload","then","json","asyncDispatch","CREATE_NEW_POST_IMAGE_SUCCESS","catch","err","CREATE_NEW_POST_IMAGE_FAIL","stateCopy","cloneDeep","LOAD_POST","ID","CREATE_NEW_POST","console","log","CREATE_NEW_POST_SUCCESS","CREATE_NEW_POST_FAIL","DELETE_POST","image","DELETE_POST_SUCCESS","DELETE_POST_FAIL","post","LOAD_DASHBOARD_POSTS","DELETE_POST_IMAGE","DELETE_POST_IMAGE_SUCCESS","DELETE_POST_IMAGE_FAIL","LOAD_ARTICLE","fetch","data","res","LOAD_POST_SUCCESS","LOAD_POST_FAIL","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","_id","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","UPLOAD_POST_IMAGE","UPLOAD_POST_IMAGE_SUCCESS","UPLOAD_POST_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updatePostImage,createPost,uploadPostImage,createPostImage,deletePostImage,deletePost} from \"API/indexAPI\"\nimport _ from \"lodash\"\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {\n  currentID:''\n};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_POST_IMAGE:{\n        createPostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.CREATE_NEW_POST: {\n        createPost(action.payload).then(json =>{\n          console.log(action,json)\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,json))\n        }).catch(err => {\n          console.log(action,err)\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_FAIL,err))\n        })\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_FAIL: {\n        return state\n      }\n      case ACTIONS.DELETE_POST:{\n        \n        let stateCopy = _.cloneDeep(state)\n        deletePost(action.payload.image)\n        .then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS,json))\n        })\n        .catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_FAIL,err))\n        })\n        stateCopy.currentID = action.payload.post\n        return stateCopy\n      }  \n      case ACTIONS.DELETE_POST_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS,[]))\n        return state\n      }  \n      case ACTIONS.DELETE_POST_FAIL:{\n        return action.payload\n      }  \n      case ACTIONS.DELETE_POST_IMAGE:{\n\n        let stateCopy = _.cloneDeep(state)\n        deletePostImage(action.payload.image)\n        .then((json)=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_SUCCESS,json))\n        })\n        .catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_IMAGE_FAIL,err))\n        })\n        stateCopy.currentID = action.payload.post\n        return stateCopy\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_SUCCESS:{\n\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n\n        return state\n      }  \n      case ACTIONS.DELETE_POST_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n       let stateCopy = _.cloneDeep(state)\n       stateCopy.currentID = action.payload\n        fetch ('http://127.0.0.1:5020/api/loadPostByID/'+ action.payload)\n        .then((data)=> data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,res.data))\n        \n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,err)))\n        return state\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n        \n        return action.payload[0]\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n        updatePost(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          \n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          stateCopy.currentID = action.payload.submitted.albumID\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,stateCopy.ID))\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let image = stateCopy.image\n        uploadPostImage(image).then((json)=>{\n\n         if(json.status!==404 || json.status!==500) {\n           action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n         } else {\n           action.asyncDispatch(mainAction(ACTIONS.UPLOAD_POST_IMAGE_FAIL,json.response.message))\n         }\n       }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n     \n       return state\n     }\n      case ACTIONS.UPLOAD_POST_IMAGE_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n         \n         let newImage = {\n           albumID:action.payload.submitted.albumID,\n           caption:action.payload.submitted.caption,\n           cover:action.payload.submitted.cover,\n           imageName:action.payload.json.data.filename\n         }\n         stateCopy.currentID = action.payload.submitted.albumID\n         action.asyncDispatch(mainAction( ACTIONS.CREATE_NEW_POST_IMAGE,newImage))\n        return state\n      }\n      case ACTIONS.UPLOAD_POST_IMAGE_FAIL:{\n        return state\n      }\n      \n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}