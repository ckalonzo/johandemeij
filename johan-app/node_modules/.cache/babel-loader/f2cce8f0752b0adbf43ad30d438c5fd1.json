{"ast":null,"code":"import _objectSpread from\"/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import{db}from\"../../firebase\";var initialState={};export default function musicProfileReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.LOAD_MUSIC_PROFILE:{db.collection(\"presentations\").where(\"id\",'==',action.payload).get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});action.asyncDispatch(mainAction.apply(void 0,[ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS].concat(_toConsumableArray(data))));});return action.payload;}case ACTIONS.LOAD_MUSIC_PROFILE_BY_ID:{db.collection(\"presentations\").where(\"id\",'==',action.payload).get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});action.asyncDispatch(mainAction.apply(void 0,[ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS].concat(_toConsumableArray(data))));});return state;}case ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS:{return action.payload;}case ACTIONS.LOAD_MUSIC_PROFILE_FAIL:{return state;}default:return _objectSpread({},state);}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/musicProfile.reducer.js"],"names":["ACTIONS","mainAction","db","initialState","musicProfileReducer","state","action","type","LOAD_MUSIC_PROFILE","collection","where","payload","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_MUSIC_PROFILE_SUCCESS","LOAD_MUSIC_PROFILE_BY_ID","LOAD_MUSIC_PROFILE_FAIL"],"mappings":"yWAAA,OAASA,OAAT,KAAwB,wBAAxB,CACA,OAASC,UAAT,KAA2B,6BAA3B,CACA,OAASC,EAAT,KAAmB,gBAAnB,CACA,GAAMC,CAAAA,YAAY,CAAG,EAArB,CAGA,cAAe,SAASC,CAAAA,mBAAT,EAA4D,IAA9BC,CAAAA,KAA8B,2DAAtBF,YAAsB,IAARG,CAAAA,MAAQ,2CACvE,OAAQA,MAAM,CAACC,IAAf,EAEE,IAAKP,CAAAA,OAAO,CAACQ,kBAAb,CAAiC,CACjCN,EAAE,CAACO,UAAH,CAAc,eAAd,EACEC,KADF,CACQ,IADR,CACa,IADb,CACkBJ,MAAM,CAACK,OADzB,EAEIC,GAFJ,GAGIC,IAHJ,CAGS,SAAAC,aAAa,CAAI,CACrB,GAAMC,CAAAA,IAAI,CAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuB,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACH,IAAJ,EAAJ,EAA1B,CAAb,CACAT,MAAM,CAACa,aAAP,CAAqBlB,UAAU,MAAV,SAAWD,OAAO,CAACoB,0BAAnB,4BAAiDL,IAAjD,GAArB,EACD,CANJ,EAQE,MAAOT,CAAAA,MAAM,CAACK,OAAd,CACD,CACD,IAAKX,CAAAA,OAAO,CAACqB,wBAAb,CAAsC,CACpCnB,EAAE,CAACO,UAAH,CAAc,eAAd,EACAC,KADA,CACM,IADN,CACW,IADX,CACgBJ,MAAM,CAACK,OADvB,EAEEC,GAFF,GAGEC,IAHF,CAGO,SAAAC,aAAa,CAAI,CACrB,GAAMC,CAAAA,IAAI,CAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuB,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACH,IAAJ,EAAJ,EAA1B,CAAb,CACAT,MAAM,CAACa,aAAP,CAAqBlB,UAAU,MAAV,SAAWD,OAAO,CAACoB,0BAAnB,4BAAiDL,IAAjD,GAArB,EACD,CANF,EAOA,MAAOV,CAAAA,KAAP,CACD,CAED,IAAKL,CAAAA,OAAO,CAACoB,0BAAb,CAAyC,CACvC,MAAOd,CAAAA,MAAM,CAACK,OAAd,CACD,CACD,IAAKX,CAAAA,OAAO,CAACsB,uBAAb,CAAsC,CAEpC,MAAOjB,CAAAA,KAAP,CACD,CAGD,QACE,wBACKA,KADL,EAlCJ,CAsCD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nconst initialState = {\n   \n};\nexport default function musicProfileReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_MUSIC_PROFILE: {\n      db.collection(\"presentations\")\n       .where(\"id\",'==',action.payload)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => doc.data());\n           action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS,...data))\n         });\n     \n        return action.payload\n      }\n      case ACTIONS.LOAD_MUSIC_PROFILE_BY_ID:{\n        db.collection(\"presentations\")\n       .where(\"id\",'==',action.payload)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => doc.data());\n           action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS,...data))\n         });\n        return state\n      }\n      \n      case ACTIONS.LOAD_MUSIC_PROFILE_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_MUSIC_PROFILE_FAIL: {\n\n        return state\n      }\n      \n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}