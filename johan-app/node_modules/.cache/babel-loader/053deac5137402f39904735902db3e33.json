{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let testData = {\n          ON_OFF: 2,\n          cd: \"1038\",\n          city: \"DUNWOODY\",\n          conductor: \"carl kalonzo\",\n          country: \"U.S.A\",\n          date: \"9-4-2020\",\n          day: \"4\",\n          id: 4613,\n          location: \"Fox Theatre\",\n          month: \"9\",\n          orchestra: \"kalonzo ensemble\",\n          synopsis: \"<p>test</p>\",\n          time: \"8:00 pm\",\n          year: \"2020\"\n        }; // db.collection(\"agendas\")\n        //   .add(stateCopy)\n        //   .then(function(docRef){\n        //     stateCopy._id = docRef.id\n        //     db.collection(\"agendas\")\n        //     .doc(docRef.id)\n        //     .update({_id:docRef.id}).then(()=>{\n        //       action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n        //     });\n        //   });\n\n        console.log(action);\n        db.collection(\"agendas\").add(testData).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        console.log(action);\n        let stateCopy = [];\n        db.collection(\"agendas\").where(\"year\", \"==\", action.payload.year).orderBy('month', 'desc').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          data.map((newData, i) => {\n            if (i < action.payload.limit && i > action.payload.skip) stateCopy.push(newData);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, stateCopy));\n        }); // db.collection(\"agendas\")\n        // .get()\n        // .then(querySnapshot => {\n        //   const data = querySnapshot.docs.map(doc => doc.data());\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,data))\n        // });\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              post.title = title[0];\n              post.date = `${post.year}-${post.month}-${post.day}`;\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n\n          if (data.length > 0) {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, data));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL, {\n              error: \"Failed to retrieve agenda\"\n            }));\n          }\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return { ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        console.log(action);\n        db.collection(\"agendas\").doc(action.payload.id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.AGENDA, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","testData","ON_OFF","cd","city","conductor","country","date","day","id","location","month","orchestra","synopsis","time","year","console","log","collection","add","then","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","DELETE_AGENDA","where","get","querySnapshot","forEach","doc","ref","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","orderBy","data","docs","map","newData","i","limit","skip","push","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","agendas","d","Date","getDay","getMonth","toString","getFullYear","post","title","filter","presentation","cdName","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","error","UPDATE_AGENDA","update","UPDATE_AGENDA_SUCCESS","AGENDA"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_AGENDA:{\n        let stateCopy = _.cloneDeep(action.payload)\n      let testData = {\n        ON_OFF: 2,\ncd: \"1038\",\ncity: \"DUNWOODY\",\nconductor: \"carl kalonzo\",\ncountry: \"U.S.A\",\ndate: \"9-4-2020\",\nday: \"4\",\nid: 4613,\nlocation: \"Fox Theatre\",\nmonth: \"9\",\norchestra: \"kalonzo ensemble\",\nsynopsis: \"<p>test</p>\",\ntime: \"8:00 pm\",\nyear: \"2020\"\n\n      }\n        // db.collection(\"agendas\")\n        //   .add(stateCopy)\n        //   .then(function(docRef){\n        //     stateCopy._id = docRef.id\n        //     db.collection(\"agendas\")\n        //     .doc(docRef.id)\n        //     .update({_id:docRef.id}).then(()=>{\n        //       action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n        //     });\n           \n        //   });\n        console.log(action)\n        db.collection(\"agendas\")\n        .add(testData).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n        })\n      return stateCopy\n      }\n      case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n        return action.payload\n      }\n      case ACTIONS.DELETE_AGENDA:{\n\n        db.collection(\"agendas\")\n        .where('id','==',action.payload)\n         .get()\n         .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=> doc.ref.delete())\n           action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n         });\n       return state\n     }  \n     case ACTIONS.DELETE_AGENDA_SUCCESS:{\n       action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n       return state\n     }  \n      case ACTIONS.LOAD_CD_AGENDA: {\n        console.log(action)\n      let stateCopy = []\n      db.collection(\"agendas\")\n      .where(\"year\",\"==\",action.payload.year)\n      .orderBy('month','desc')\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n\n        data.map((newData,i)=>{\n          if(i < action.payload.limit && i > action.payload.skip)\n          stateCopy.push(newData)\n        })\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n      });\n      \n\n      // db.collection(\"agendas\")\n      // .get()\n      // .then(querySnapshot => {\n      //   const data = querySnapshot.docs.map(doc => doc.data());\n      //   action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,data))\n      // });\n      \n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n              post.title = title[0]; \n              post.date=`${post.year}-${post.month}-${post.day}`\n              return post\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_AGENDA:{\n       \n        db.collection(\"agendas\")\n      .where(\"id\",\"==\",action.payload)\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        \n        if(data.length > 0){\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,data))\n      } else {\n         action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL,{error:\"Failed to retrieve agenda\"}))\n      }\n       \n      });\n      return state\n      }\n      case ACTIONS.LOAD_AGENDA_SUCCESS:{\n        return {...action.payload[0]}\n      }\n      case ACTIONS.LOAD_AGENDA_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_AGENDA:{\n        console.log(action)\n          db.collection(\"agendas\")\n          .doc(action.payload.id)\n          .update(action.payload).then(()=>{\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n          });\n          return state\n          }\n          case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          action.asyncDispatch(mainAction(ACTIONS.AGENDA,stateCopy.id))\n          return {state,...action.payload}\n          }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}