{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database, db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nlet d = new Date();\nlet day = d.getDate();\nlet month = d.getMonth() + 1;\nlet year = d.getFullYear();\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        console.log(stateCopy); // db.collection(\"agendas\")\n        //   .add(stateCopy)\n        //   .then(function(docRef){\n        //     console.log(docRef)\n        //     stateCopy._id = docRef.id\n        //     action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n        //   });\n\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"year\", \"==\", year.toString()).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['month', 'day'], ['asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        db.collection(\"agendas\").where(\"year\", \"==\", year.toString()).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          let agendas = [];\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month; // console.log(agenda.month ,\">=\", month ,\"&&\", +agenda.day.replace(/^0+/, '') ,\">\", day)\n\n            if (+agenda.month >= +month) return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, agendas));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        db.collection(\"agendas\").where(\"year\", \"==\", action.payload.year.toString()).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          let agendas = [];\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        // let stateCopy = []\n        // var agendaRef = database.ref('agendas/'+action.payload)\n        //  agendaRef.on('value',(snap,i)=>{\n        // const data = snap.val()\n        // if(data) \n        // action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...data}))\n        // })\n        // var agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload)\n        //  agendaRef.on('child_added',(snap,i)=>{\n        // const data = snap.val()\n        // stateCopy = data\n        // if(stateCopy)\n        // action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...stateCopy}))\n        // })\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => doc.data());\n          if (data.length > 0) action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...data\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return action.payload ? action.payload[0] : state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        let _id = '';\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload.id).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          db.collection(\"agendas\").doc(_id).update(action.payload).then(() => {\n            console.log(\"success\");\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Users/carlkalonzo/Documents/DEV/johandemeij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","database","db","_","initialState","d","Date","day","getDate","month","getMonth","year","getFullYear","agendaReducer","state","action","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","console","log","CREATE_NEW_AGENDA_SUCCESS","DELETE_AGENDA","collection","where","get","then","querySnapshot","forEach","doc","ref","delete","asyncDispatch","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","toString","orderBy","snapshot","data","docs","map","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","agendas","Object","values","agenda","date","push","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDAS_FILTERED","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","UPDATE_AGENDA","_id","id","update","UPDATE_AGENDA_SUCCESS","UPDATE_AGENDA_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database,db} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nlet d = new Date();\nlet day = d.getDate();\nlet month = d.getMonth()+1;\nlet year = d.getFullYear()\nexport default function agendaReducer (state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n\n    let stateCopy = _.cloneDeep(action.payload)\n      console.log(stateCopy)\n        // db.collection(\"agendas\")\n        //   .add(stateCopy)\n        //   .then(function(docRef){\n        //     console.log(docRef)\n        //     stateCopy._id = docRef.id\n        //     action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n        //   });\n    return state\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n    return action.payload\n    }\n    case ACTIONS.DELETE_AGENDA:{\n    db.collection(\"agendas\")\n    .where('id','==',action.payload)\n     .get()\n     .then((querySnapshot) => {\n       querySnapshot.forEach((doc)=> doc.ref.delete())\n       action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n     });\n\n    return state\n    }  \n    case ACTIONS.DELETE_AGENDA_SUCCESS:{\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n    return state\n    }  \n    case ACTIONS.LOAD_CD_AGENDA: {\n\n\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",year.toString())\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n    return _.orderBy(action.payload,['month','day'],['asc','asc'])\n    }\n    case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS: {\n\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",year.toString())\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      let agendas = []\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n       // console.log(agenda.month ,\">=\", month ,\"&&\", +agenda.day.replace(/^0+/, '') ,\">\", day)\n       if(+agenda.month >= +month )\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,agendas))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDAS_FAIL:{\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",action.payload.year.toString())\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      let agendas = []\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n      return action.payload\n    }\n    case ACTIONS.LOAD_AGENDA:{\n    // let stateCopy = []\n    // var agendaRef = database.ref('agendas/'+action.payload)\n    //  agendaRef.on('value',(snap,i)=>{\n    // const data = snap.val()\n    // if(data) \n    // action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...data}))\n      \n    // })\n    // var agendaRef = database.ref('agendas').orderByChild('id').startAt(action.payload).endAt(action.payload)\n    //  agendaRef.on('child_added',(snap,i)=>{\n    // const data = snap.val()\n    // stateCopy = data\n    // if(stateCopy)\n    // action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...stateCopy}))\n      \n    // })\n    db.collection(\"agendas\")\n    .where(\"id\",\"==\",action.payload)\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => doc.data());\n      if(data.length > 0)\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...data}))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA_SUCCESS:{\n\n     return action.payload ? action.payload[0] : state\n\n    }\n    case ACTIONS.LOAD_AGENDA_FAIL:{\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA:{\n      let _id =''\n      db.collection(\"agendas\")\n    .where(\"id\",\"==\",action.payload.id)\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {\n        _id = doc.id\n        return doc.data()});\n        db.collection(\"agendas\").doc(_id)\n        .update(action.payload).then(()=>{\n          console.log(\"success\")\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n     });\n    })\n     \n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n    let stateCopy = _.cloneDeep(action.payload)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n    return stateCopy\n    }\n    case ACTIONS.UPDATE_AGENDA_FAIL:{\n   \n    return state\n    }\n    default: \n      return {\n        ...state\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}