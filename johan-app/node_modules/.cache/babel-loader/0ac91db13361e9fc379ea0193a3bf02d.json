{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { uploadPostImage, updatePostImage } from \"API/indexAPI\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: actin.payload.json.data.originalname\n        };\n        console.log(\"new imge==>\", newImage);\n        updatePostImage(newImage).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        console.log(action);\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","uploadPostImage","updatePostImage","_","initialState","singlePostReducer","state","action","type","LOAD_ARTICLE","payload","LOAD_POST","UPDATE_POST","then","json","asyncDispatch","UPDATE_POST_SUCCESS","data","catch","err","UPDATE_POST_FAIL","UPLOAD_IMAGE","stateCopy","cloneDeep","image","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","_id","albumID","caption","cover","imageName","actin","originalname","console","log","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {uploadPostImage,updatePostImage} from \"API/indexAPI\"\nimport _ from \"lodash\"\nconst initialState = {};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n        return action.payload\n      }\n      case ACTIONS.UPDATE_POST:{\n        updatePost(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         uploadPostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:actin.payload.json.data.originalname\n          }\n\n          console.log(\"new imge==>\",newImage)\n          updatePostImage(newImage).then(json => {\n            action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n          }).catch(err =>{\n            action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n          })\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        console.log(action)\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n\n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}