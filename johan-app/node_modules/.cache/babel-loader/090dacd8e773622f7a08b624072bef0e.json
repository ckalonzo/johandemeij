{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nimport { createPresentation, updatePresentation, updatePresentationImage, uploadPresentationImage } from \"API/indexAPI\";\nconst initialState = {};\nexport default function presentationReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_PUBLICATION:\n      {\n        createPresentation(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS, json));\n        }).catch(err => {\n          console.log(action, err);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_FAIL, err));\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let _id = ''; // fetch ('http://127.0.0.1:5021/api/loadPresentationByID/'+ action.payload)\n        // .then((data)=> data.json())\n        // .then((res) => {\n        // action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS,res.data))\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_FAIL,err)))\n\n        db.collection(\"presentations\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          stateCopy._id = _id;\n          console.log(stateCopy);\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS, stateCopy));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION:\n      {\n        console.log(action); // db.collection(\"presentations\")\n        // .where(\"id\",\"==\",action.payload.id)\n        // .update(action.payload).then(()=>{\n        //   action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS,action.payload))\n        // });\n\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        updatePresentationImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        console.log(action);\n        uploadPresentationImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(state);\n\n        let image = '';\n\n        if (action.payload.submitted.cover === \"frontCover\") {\n          image = {\n            _id: action.payload.submitted._id,\n            frontCover: action.payload.json.data.filename,\n            frontCaption: action.payload.submitted.caption\n          };\n        } else {\n          image = {\n            _id: action.payload.submitted._id,\n            backCover: action.payload.json.data.filename,\n            backCaption: action.payload.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION, image));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        console.log(action);\n        let image = '';\n\n        if (action.submitted.cover === \"frontCover\") {\n          image = {\n            frontCover: action.json.data.filename,\n            frontCaption: action.submitted.caption\n          };\n        } else {\n          image = {\n            backCover: action.json.data.filename,\n            backCaption: action.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION, image));\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/presentation.reducer.js"],"names":["ACTIONS","mainAction","db","_","createPresentation","updatePresentation","updatePresentationImage","uploadPresentationImage","initialState","presentationReducer","state","action","type","CREATE_NEW_PUBLICATION","payload","then","json","asyncDispatch","CREATE_NEW_PUBLICATION_SUCCESS","catch","err","console","log","CREATE_NEW_PUBLICATION_FAIL","LOAD_PRESENTATION","stateCopy","cloneDeep","_id","collection","where","get","querySnapshot","data","docs","map","doc","id","LOAD_PRESENTATION_SUCCESS","length","LOAD_PRESENTATION_FAIL","UPDATE_PUBLICATION","UPDATE_PUBLICATION_SUCCESS","ID","UPDATE_PUBLICATION_FAIL","UPDATE_PRESENTATION_IMAGE","image","status","UPDATE_PRESENTATION_IMAGE_SUCCESS","submitted","UPDATE_PRESENTATION_IMAGE_FAIL","response","message","newImage","albumID","caption","cover","imageName","filename","updatedAt","Date","now","currentID","UPDATE_POST_IMAGE","UPLOAD_PRESENTATION_IMAGE","UPLOAD_PRESENTATION_IMAGE_SUCCESS","UPLOAD_PRESENTATION_IMAGE_FAIL","frontCover","frontCaption","backCover","backCaption"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport  _ from \"lodash\"\nimport {createPresentation,updatePresentation,updatePresentationImage,uploadPresentationImage} from \"API/indexAPI\"\nconst initialState = {};\nexport default function presentationReducer (state = initialState, action) {\n    switch (action.type) {\n  \n        case ACTIONS.CREATE_NEW_PUBLICATION: {\n        createPresentation(action.payload).then(json =>{\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS,json))\n        }).catch(err => {\n            console.log(action,err)\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_FAIL,err))\n        })\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_PRESENTATION: {\n        let stateCopy = _.cloneDeep(state)\n        let _id = ''\n            // fetch ('http://127.0.0.1:5021/api/loadPresentationByID/'+ action.payload)\n            // .then((data)=> data.json())\n            // .then((res) => {\n            // action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS,res.data))\n            \n            // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_FAIL,err)))\n            db.collection(\"presentations\")\n            .where(\"id\",\"==\",action.payload)\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => {\n                _id=doc.id\n                return doc.data()});\n              stateCopy._id = _id\n              console.log(stateCopy)\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS,stateCopy))\n            });\n            return state\n        }\n        case  ACTIONS.LOAD_PRESENTATION_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_PRESENTATION_FAIL:{\n            return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION:{\n      console.log(action)\n        // db.collection(\"presentations\")\n        // .where(\"id\",\"==\",action.payload.id)\n        // .update(action.payload).then(()=>{\n        //   action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS,action.payload))\n        // });\n        return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,stateCopy.ID))\n        return {state,...action.payload}\n        }\n        case ACTIONS.UPDATE_PUBLICATION_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n            let stateCopy = _.cloneDeep(action.payload)\n             let image = stateCopy.image\n             updatePresentationImage(image).then((json)=>{\n    \n              if(json.status!==404 || json.status!==500) {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n              } else {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,json.response.message))\n              }\n            }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,err)))\n          \n            return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE:{\n          let stateCopy = _.cloneDeep(action.payload)\n           let image = stateCopy.image\n           console.log(action)\n           uploadPresentationImage(image).then((json)=>{\n  \n            if(json.status!==404 || json.status!==500) {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n            } else {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL,json.response.message))\n            }\n          }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL,err)))\n        \n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:{\n          console.log(action)\n            let stateCopy = _.cloneDeep(state)\n            \n            let image = ''\n          if(action.payload.submitted.cover === \"frontCover\") {\n            image = {\n              _id:action.payload.submitted._id,\n              frontCover:action.payload.json.data.filename,\n              frontCaption:action.payload.submitted.caption \n            }\n          } else {\n            image = {\n              _id:action.payload.submitted._id,\n              backCover:action.payload.json.data.filename,\n              backCaption:action.payload.submitted.caption \n            }\n          }\n            action.asyncDispatch(mainAction( ACTIONS.UPDATE_PUBLICATION,image))\n          return stateCopy\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:{\n          return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n          console.log(action)\n          let image = ''\n          if(action.submitted.cover === \"frontCover\") {\n            image = {\n              frontCover:action.json.data.filename,\n              frontCaption:action.submitted.caption \n            }\n          } else {\n            image = {\n              backCover:action.json.data.filename,\n              backCaption:action.submitted.caption \n            }\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_PUBLICATION,image))\n          return state\n        }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}