{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nimport { createPresentation, updatePresentation, updatePresentationImage, uploadPresentationImage } from \"API/indexAPI\";\nconst initialState = {};\nexport default function presentationReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_PUBLICATION:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        console.log(stateCopy); // db.collection(\"presentations\")\n        //   .add(stateCopy)\n        //   .then(()=>{\n        //     //console.log(docRef)\n        //    // stateCopy._id = docRef.id\n        //     action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS,stateCopy))\n        //   });\n\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let _id = '';\n        db.collection(\"presentations\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            //  _id=doc.id\n            return doc.data();\n          });\n          stateCopy = data; //  stateCopy[0]._id = _id\n\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION:\n      {\n        console.log(action);\n        db.collection(\"presentations\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        updatePresentationImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        console.log(action);\n        uploadPresentationImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(state);\n\n        let image = '';\n\n        if (action.payload.submitted.cover === \"frontCover\") {\n          image = {\n            _id: action.payload.submitted._id,\n            frontCover: action.payload.json.data.filename,\n            frontCaption: action.payload.submitted.caption\n          };\n        } else {\n          image = {\n            _id: action.payload.submitted._id,\n            backCover: action.payload.json.data.filename,\n            backCaption: action.payload.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION, image));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        console.log(action);\n        let image = '';\n\n        if (action.submitted.cover === \"frontCover\") {\n          image = {\n            frontCover: action.json.data.filename,\n            frontCaption: action.submitted.caption\n          };\n        } else {\n          image = {\n            backCover: action.json.data.filename,\n            backCaption: action.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION, image));\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/presentation.reducer.js"],"names":["ACTIONS","mainAction","db","_","createPresentation","updatePresentation","updatePresentationImage","uploadPresentationImage","initialState","presentationReducer","state","action","type","CREATE_NEW_PUBLICATION","stateCopy","cloneDeep","payload","console","log","CREATE_NEW_PUBLICATION_SUCCESS","CREATE_NEW_PUBLICATION_FAIL","LOAD_PRESENTATION","_id","collection","where","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_PRESENTATION_SUCCESS","length","LOAD_PRESENTATION_FAIL","UPDATE_PUBLICATION","update","UPDATE_PUBLICATION_SUCCESS","id","UPDATE_PUBLICATION_FAIL","UPDATE_PRESENTATION_IMAGE","image","json","status","UPDATE_PRESENTATION_IMAGE_SUCCESS","submitted","UPDATE_PRESENTATION_IMAGE_FAIL","response","message","catch","err","newImage","albumID","caption","cover","imageName","filename","updatedAt","Date","now","currentID","UPDATE_POST_IMAGE","UPLOAD_PRESENTATION_IMAGE","UPLOAD_PRESENTATION_IMAGE_SUCCESS","UPLOAD_PRESENTATION_IMAGE_FAIL","frontCover","frontCaption","backCover","backCaption"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,OAAQC,CAAR,MAAe,QAAf;AACA,SAAQC,kBAAR,EAA2BC,kBAA3B,EAA8CC,uBAA9C,EAAsEC,uBAAtE,QAAoG,cAApG;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,mBAAT,CAA8BC,KAAK,GAAGF,YAAtC,EAAoDG,MAApD,EAA4D;AACvE,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKZ,OAAO,CAACa,sBAAb;AAAqC;AACnC,YAAIC,SAAS,GAAGX,CAAC,CAACY,SAAF,CAAYJ,MAAM,CAACK,OAAnB,CAAhB;;AACJC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ,EAFuC,CAGnC;AACA;AACA;AACA;AACA;AACA;AACA;;AACF,eAAOA,SAAP;AACC;;AACD,SAAKd,OAAO,CAACmB,8BAAb;AAA6C;AAC7C,eAAOR,MAAM,CAACK,OAAd;AACC;;AACD,SAAKhB,OAAO,CAACoB,2BAAb;AAA0C;AAC1C,eAAOV,KAAP;AACC;;AACD,SAAKV,OAAO,CAACqB,iBAAb;AAAgC;AAChC,YAAIP,SAAS,GAAGX,CAAC,CAACY,SAAF,CAAYL,KAAZ,CAAhB;;AACA,YAAIY,GAAG,GAAG,EAAV;AACIpB,QAAAA,EAAE,CAACqB,UAAH,CAAc,eAAd,EACCC,KADD,CACO,IADP,EACY,IADZ,EACiBb,MAAM,CAACK,OADxB,EAECS,GAFD,GAGCC,IAHD,CAGMC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAI;AAC3C;AACE,mBAAOA,GAAG,CAACH,IAAJ,EAAP;AAAkB,WAFP,CAAb;AAGAd,UAAAA,SAAS,GAAGc,IAAZ,CAJqB,CAKvB;;AACEjB,UAAAA,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAACD,OAAO,CAACiC,yBAAT,EAAmCL,IAAnC,CAA/B;AACD,SAVD;AAWA,eAAOlB,KAAP;AACH;;AACD,SAAMV,OAAO,CAACiC,yBAAd;AAAwC;AAEpC,eAAOtB,MAAM,CAACK,OAAP,CAAekB,MAAf,GAAwB,CAAxB,GAA4BvB,MAAM,CAACK,OAAP,CAAe,CAAf,CAA5B,GAA8C,EAArD;AACH;;AACD,SAAMhB,OAAO,CAACmC,sBAAd;AAAqC;AACjC,eAAOzB,KAAP;AACH;;AACD,SAAKV,OAAO,CAACoC,kBAAb;AAAgC;AAClCnB,QAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACET,QAAAA,EAAE,CAACqB,UAAH,CAAc,eAAd,EACCQ,GADD,CACKpB,MAAM,CAACK,OAAP,CAAeM,GADpB,EAECe,MAFD,CAEQ1B,MAAM,CAACK,OAFf,EAEwBU,IAFxB,CAE6B,MAAI;AAC/Bf,UAAAA,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAACD,OAAO,CAACsC,0BAAT,EAAoC3B,MAAM,CAACK,OAA3C,CAA/B;AACD,SAJD;AAKA,eAAON,KAAP;AACC;;AACD,SAAKV,OAAO,CAACsC,0BAAb;AAAwC;AACxC,YAAIxB,SAAS,GAAGX,CAAC,CAACY,SAAF,CAAYL,KAAZ,CAAhB;;AACAC,QAAAA,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAACD,OAAO,CAACqB,iBAAT,EAA2BP,SAAS,CAACyB,EAArC,CAA/B;AACA,eAAO;AAAC7B,UAAAA,KAAD;AAAO,aAAGC,MAAM,CAACK;AAAjB,SAAP;AACC;;AACD,SAAKhB,OAAO,CAACwC,uBAAb;AAAqC;AACrC,eAAO9B,KAAP;AACC;;AACD,SAAKV,OAAO,CAACyC,yBAAb;AAAuC;AACnC,YAAI3B,SAAS,GAAGX,CAAC,CAACY,SAAF,CAAYJ,MAAM,CAACK,OAAnB,CAAhB;;AACC,YAAI0B,KAAK,GAAG5B,SAAS,CAAC4B,KAAtB;AACApC,QAAAA,uBAAuB,CAACoC,KAAD,CAAvB,CAA+BhB,IAA/B,CAAqCiB,IAAD,IAAQ;AAE3C,cAAGA,IAAI,CAACC,MAAL,KAAc,GAAd,IAAqBD,IAAI,CAACC,MAAL,KAAc,GAAtC,EAA2C;AACzCjC,YAAAA,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAACD,OAAO,CAAC6C,iCAAT,EAA2C;AAACC,cAAAA,SAAS,EAAChC,SAAX;AAAqB6B,cAAAA;AAArB,aAA3C,CAA/B;AACD,WAFD,MAEO;AACLhC,YAAAA,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAACD,OAAO,CAAC+C,8BAAT,EAAwCJ,IAAI,CAACK,QAAL,CAAcC,OAAtD,CAA/B;AACD;AACF,SAPA,EAOEC,KAPF,CAOQC,GAAG,IAAIxC,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAACD,OAAO,CAAC+C,8BAAT,EAAwCI,GAAxC,CAA/B,CAPf;AASD,eAAOzC,KAAP;AACH;;AACD,SAAKV,OAAO,CAAC6C,iCAAb;AAA+C;AACzC,YAAI/B,SAAS,GAAGX,CAAC,CAACY,SAAF,CAAYL,KAAZ,CAAhB;;AAEA,YAAI0C,QAAQ,GAAG;AACb9B,UAAAA,GAAG,EAACX,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBxB,GADhB;AAEb+B,UAAAA,OAAO,EAAC1C,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBO,OAFpB;AAGbC,UAAAA,OAAO,EAAC3C,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBQ,OAHpB;AAIbC,UAAAA,KAAK,EAAC5C,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBS,KAJlB;AAKbC,UAAAA,SAAS,EAAC7C,MAAM,CAACK,OAAP,CAAe2B,IAAf,CAAoBf,IAApB,CAAyB6B,QALtB;AAMbC,UAAAA,SAAS,EAACC,IAAI,CAACC,GAAL;AANG,SAAf;AAQA9C,QAAAA,SAAS,CAAC+C,SAAV,GAAsBlD,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBO,OAA/C;AACA1C,QAAAA,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAAED,OAAO,CAAC8D,iBAAV,EAA4BV,QAA5B,CAA/B;AACF,eAAOtC,SAAP;AACH;;AACD,SAAKd,OAAO,CAAC+C,8BAAb;AAA4C;AACxC,eAAOrC,KAAP;AACH;;AACD,SAAKV,OAAO,CAAC+D,yBAAb;AAAuC;AACrC,YAAIjD,SAAS,GAAGX,CAAC,CAACY,SAAF,CAAYJ,MAAM,CAACK,OAAnB,CAAhB;;AACC,YAAI0B,KAAK,GAAG5B,SAAS,CAAC4B,KAAtB;AACAzB,QAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACAJ,QAAAA,uBAAuB,CAACmC,KAAD,CAAvB,CAA+BhB,IAA/B,CAAqCiB,IAAD,IAAQ;AAE3C,cAAGA,IAAI,CAACC,MAAL,KAAc,GAAd,IAAqBD,IAAI,CAACC,MAAL,KAAc,GAAtC,EAA2C;AACzCjC,YAAAA,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAACD,OAAO,CAACgE,iCAAT,EAA2C;AAAClB,cAAAA,SAAS,EAAChC,SAAX;AAAqB6B,cAAAA;AAArB,aAA3C,CAA/B;AACD,WAFD,MAEO;AACLhC,YAAAA,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAACD,OAAO,CAACiE,8BAAT,EAAwCtB,IAAI,CAACK,QAAL,CAAcC,OAAtD,CAA/B;AACD;AACF,SAPA,EAOEC,KAPF,CAOQC,GAAG,IAAIxC,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAACD,OAAO,CAACiE,8BAAT,EAAwCd,GAAxC,CAA/B,CAPf;AASD,eAAOzC,KAAP;AACD;;AACD,SAAKV,OAAO,CAACgE,iCAAb;AAA+C;AAC7C/C,QAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;;AACE,YAAIG,SAAS,GAAGX,CAAC,CAACY,SAAF,CAAYL,KAAZ,CAAhB;;AAEA,YAAIgC,KAAK,GAAG,EAAZ;;AACF,YAAG/B,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBS,KAAzB,KAAmC,YAAtC,EAAoD;AAClDb,UAAAA,KAAK,GAAG;AACNpB,YAAAA,GAAG,EAACX,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBxB,GADvB;AAEN4C,YAAAA,UAAU,EAACvD,MAAM,CAACK,OAAP,CAAe2B,IAAf,CAAoBf,IAApB,CAAyB6B,QAF9B;AAGNU,YAAAA,YAAY,EAACxD,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBQ;AAHhC,WAAR;AAKD,SAND,MAMO;AACLZ,UAAAA,KAAK,GAAG;AACNpB,YAAAA,GAAG,EAACX,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBxB,GADvB;AAEN8C,YAAAA,SAAS,EAACzD,MAAM,CAACK,OAAP,CAAe2B,IAAf,CAAoBf,IAApB,CAAyB6B,QAF7B;AAGNY,YAAAA,WAAW,EAAC1D,MAAM,CAACK,OAAP,CAAe8B,SAAf,CAAyBQ;AAH/B,WAAR;AAKD;;AACC3C,QAAAA,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAAED,OAAO,CAACoC,kBAAV,EAA6BM,KAA7B,CAA/B;AACF,eAAO5B,SAAP;AACD;;AACD,SAAKd,OAAO,CAACiE,8BAAb;AAA4C;AAC1C,eAAOvD,KAAP;AACD;;AACD,SAAKV,OAAO,CAACyC,yBAAb;AAAuC;AACrCxB,QAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACA,YAAI+B,KAAK,GAAG,EAAZ;;AACA,YAAG/B,MAAM,CAACmC,SAAP,CAAiBS,KAAjB,KAA2B,YAA9B,EAA4C;AAC1Cb,UAAAA,KAAK,GAAG;AACNwB,YAAAA,UAAU,EAACvD,MAAM,CAACgC,IAAP,CAAYf,IAAZ,CAAiB6B,QADtB;AAENU,YAAAA,YAAY,EAACxD,MAAM,CAACmC,SAAP,CAAiBQ;AAFxB,WAAR;AAID,SALD,MAKO;AACLZ,UAAAA,KAAK,GAAG;AACN0B,YAAAA,SAAS,EAACzD,MAAM,CAACgC,IAAP,CAAYf,IAAZ,CAAiB6B,QADrB;AAENY,YAAAA,WAAW,EAAC1D,MAAM,CAACmC,SAAP,CAAiBQ;AAFvB,WAAR;AAID;;AACD3C,QAAAA,MAAM,CAACqB,aAAP,CAAqB/B,UAAU,CAAED,OAAO,CAACoC,kBAAV,EAA6BM,KAA7B,CAA/B;AACA,eAAOhC,KAAP;AACD;;AACH;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AArJJ;AAyJD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport  _ from \"lodash\"\nimport {createPresentation,updatePresentation,updatePresentationImage,uploadPresentationImage} from \"API/indexAPI\"\nconst initialState = {};\nexport default function presentationReducer (state = initialState, action) {\n    switch (action.type) {\n  \n        case ACTIONS.CREATE_NEW_PUBLICATION: {\n          let stateCopy = _.cloneDeep(action.payload)\n      console.log(stateCopy)\n          // db.collection(\"presentations\")\n          //   .add(stateCopy)\n          //   .then(()=>{\n          //     //console.log(docRef)\n          //    // stateCopy._id = docRef.id\n          //     action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS,stateCopy))\n          //   });\n        return stateCopy\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_PRESENTATION: {\n        let stateCopy = _.cloneDeep(state)\n        let _id = ''\n            db.collection(\"presentations\")\n            .where(\"id\",\"==\",action.payload)\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => {\n              //  _id=doc.id\n                return doc.data()});\n              stateCopy = data\n            //  stateCopy[0]._id = _id\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS,data))\n            });\n            return state\n        }\n        case  ACTIONS.LOAD_PRESENTATION_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_PRESENTATION_FAIL:{\n            return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION:{\n      console.log(action)\n        db.collection(\"presentations\")\n        .doc(action.payload._id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS,action.payload))\n        });\n        return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,stateCopy.id))\n        return {state,...action.payload}\n        }\n        case ACTIONS.UPDATE_PUBLICATION_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n            let stateCopy = _.cloneDeep(action.payload)\n             let image = stateCopy.image\n             updatePresentationImage(image).then((json)=>{\n    \n              if(json.status!==404 || json.status!==500) {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n              } else {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,json.response.message))\n              }\n            }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,err)))\n          \n            return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE:{\n          let stateCopy = _.cloneDeep(action.payload)\n           let image = stateCopy.image\n           console.log(action)\n           uploadPresentationImage(image).then((json)=>{\n  \n            if(json.status!==404 || json.status!==500) {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n            } else {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL,json.response.message))\n            }\n          }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL,err)))\n        \n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:{\n          console.log(action)\n            let stateCopy = _.cloneDeep(state)\n            \n            let image = ''\n          if(action.payload.submitted.cover === \"frontCover\") {\n            image = {\n              _id:action.payload.submitted._id,\n              frontCover:action.payload.json.data.filename,\n              frontCaption:action.payload.submitted.caption \n            }\n          } else {\n            image = {\n              _id:action.payload.submitted._id,\n              backCover:action.payload.json.data.filename,\n              backCaption:action.payload.submitted.caption \n            }\n          }\n            action.asyncDispatch(mainAction( ACTIONS.UPDATE_PUBLICATION,image))\n          return stateCopy\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:{\n          return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n          console.log(action)\n          let image = ''\n          if(action.submitted.cover === \"frontCover\") {\n            image = {\n              frontCover:action.json.data.filename,\n              frontCaption:action.submitted.caption \n            }\n          } else {\n            image = {\n              backCover:action.json.data.filename,\n              backCaption:action.submitted.caption \n            }\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_PUBLICATION,image))\n          return state\n        }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}