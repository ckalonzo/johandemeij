{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nconst initialState = {};\nexport default function cdInfoReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_INFO:\n      {\n        let stateCopy = []; //=======================================================\n\n        db.collection(\"cd_info\").where(\"cdId\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n        });\n        stateCopy.presentations = []; //=======================================================\n\n        db.collection(\"presentations\").where(\"cd\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy.presentations = data;\n          stateCopy.map((info, i) => {\n            if (cdId = data.cd) info[i].info = data[i];\n            console.log(info);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS, data));\n        }); //========================================================\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cdInfo.reducer.js"],"names":["ACTIONS","mainAction","db","initialState","cdInfoReducer","state","action","type","LOAD_CD_INFO","stateCopy","collection","where","payload","get","then","querySnapshot","data","docs","map","doc","presentations","info","i","cdId","cd","console","log","asyncDispatch","LOAD_CD_INFO_SUCCESS","LOAD_CD_INFO_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAGA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AAEjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,OAAO,CAACQ,YAAb;AAA2B;AAEzB,YAAIC,SAAS,GAAG,EAAhB,CAFyB,CAGzB;;AACAP,QAAAA,EAAE,CAACQ,UAAH,CAAc,SAAd,EACCC,KADD,CACO,MADP,EACc,IADd,EACmBL,MAAM,CAACM,OAD1B,EAEAC,GAFA,GAGAC,IAHA,CAGKC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,UAAAA,SAAS,GAACO,IAAV;AACD,SANA;AAODP,QAAAA,SAAS,CAACW,aAAV,GAA0B,EAA1B,CAX0B,CAYvB;;AACClB,QAAAA,EAAE,CAACQ,UAAH,CAAc,eAAd,EACCC,KADD,CACO,IADP,EACY,IADZ,EACiBL,MAAM,CAACM,OADxB,EAECC,GAFD,GAGCC,IAHD,CAGMC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,UAAAA,SAAS,CAACW,aAAV,GAA0BJ,IAA1B;AAEAP,UAAAA,SAAS,CAACS,GAAV,CAAc,CAACG,IAAD,EAAMC,CAAN,KAAU;AACtB,gBAAGC,IAAI,GAAGP,IAAI,CAACQ,EAAf,EACAH,IAAI,CAACC,CAAD,CAAJ,CAAQD,IAAR,GAAeL,IAAI,CAACM,CAAD,CAAnB;AACAG,YAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACD,WAJD;AAKAf,UAAAA,MAAM,CAACqB,aAAP,CAAqB1B,UAAU,CAACD,OAAO,CAAC4B,oBAAT,EAA8BZ,IAA9B,CAA/B;AACD,SAbD,EAbsB,CA2BvB;;AACF,eAAOX,KAAP;AACD;;AACD,SAAKL,OAAO,CAAC4B,oBAAb;AAAmC;AAEjC,eAAOtB,MAAM,CAACM,OAAd;AACD;;AACD,SAAKZ,OAAO,CAAC6B,iBAAb;AAAgC;AAE9B,eAAOxB,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA1CJ;AA8CD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\n\nconst initialState = {\n\n}\nexport default function cdInfoReducer (state = initialState, action) {\n   \n    switch (action.type) {\n  \n      case ACTIONS.LOAD_CD_INFO: {\n\n        let stateCopy = []\n        //=======================================================\n        db.collection(\"cd_info\")\n        .where(\"cdId\",\"==\",action.payload)\n       .get()\n       .then(querySnapshot => {\n         const data = querySnapshot.docs.map(doc => doc.data());\n         stateCopy=data;\n       });\n       stateCopy.presentations = []\n          //=======================================================\n           db.collection(\"presentations\")\n           .where(\"cd\",\"==\",action.payload)\n           .get()\n           .then(querySnapshot => {\n             const data = querySnapshot.docs.map(doc => doc.data());\n             stateCopy.presentations = data\n\n             stateCopy.map((info,i)=>{\n               if(cdId = data.cd)\n               info[i].info = data[i]\n               console.log(info)\n             })\n             action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS,data))\n           });\n          //========================================================\n        return state\n      }\n      case ACTIONS.LOAD_CD_INFO_SUCCESS: {\n        \n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_INFO_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}