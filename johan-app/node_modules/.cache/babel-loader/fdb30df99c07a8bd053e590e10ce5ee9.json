{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        //   let stateCopy = _.cloneDeep(state)\n        //  fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        //   .then((data) => data.json())\n        //   .then((res) => {\n        //     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n        //     stateCopy.agendaTotal = res.data.length\n        //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        db.collection(\"agendas\").where(\"year\", \"==\", \"2020\").orderBy('month', 'asc').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, data));\n        }); //   let stateCopy = []\n        //   db.collection(\"agendas\")\n        //   .where(\"year\",\"==\",\"2020\")\n        //   .orderBy('month')\n        //  .get()\n        //  .then(querySnapshot => {\n        //    const data = querySnapshot.docs.map(doc => doc.data());\n        //    let x =  action.payload.limit - action.payload.skip;\n        //    console.log(x)\n        //    data.map((newData,i)=>{\n        //      if(i < action.payload.limit && i > action.payload.skip)\n        //      stateCopy.push(newData)\n        //    })\n        //    action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n        //  });\n        // db.collection(\"agendas\")\n        // .where(\"year\",\"==\",\"2020\")\n        // .orderBy('month')\n        // .get()\n        // .then(querySnapshot => {\n        //   const data = querySnapshot.docs.map(doc => doc.data());\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n        // });\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        //   let agendas = []\n        //   let d = new Date();\n        //   let day = d.getDay();\n        //   let month = (d.getMonth() + 1).toString()\n        //   let year = d.getFullYear().toString();\n        //    let stateCopy = ''\n        //    //=======================================================\n        //    db.collection(\"agendas\")\n        //  //.where(\"year\",'==',year)\n        // .where(\"month\",'>=',month)\n        // .orderBy(\"month\",\"asc\")\n        // .orderBy(\"day\",\"asc\")\n        //   .get()\n        //   .then(querySnapshot => {\n        //     const data = querySnapshot.docs.map(doc => doc.data());\n        //     stateCopy = data;\n        //     //=======================================================\n        //       db.collection(\"presentations\")\n        //      // .where(\"id\",\"==\",stateCopy.cd.toString())\n        //      .get()\n        //       .then(querySnapshot => {\n        //         const data = querySnapshot.docs.map(doc => doc.data());\n        //         stateCopy.map((post,i)=>{\n        //         let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n        //         post.title = title[0]; \n        //         post.date=`${post.year}-${post.month}-${post.day}`\n        //         return post\n        //         })\n        //         action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n        //       });\n        //     //========================================================\n        //   });\n        db.collection(\"agendas\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n\n          if (data.length > 0) {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, data));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL, {\n              error: \"Failed to retrieve agenda\"\n            }));\n          }\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return { ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","collection","where","orderBy","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","payload","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","LOAD_AGENDAS_SUCCESS","stateCopy","cloneDeep","d","Date","year","getFullYear","toString","filter","agendas","LOAD_AGENDAS_FAIL","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","error"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n      //   let stateCopy = _.cloneDeep(state)\n      //  fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n      //   .then((data) => data.json())\n      //   .then((res) => {\n      //     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n      //     stateCopy.agendaTotal = res.data.length\n      //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n      db.collection(\"agendas\")\n      .where(\"year\",\"==\",\"2020\")\n      .orderBy('month','asc')\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n      });\n      \n\n      //   let stateCopy = []\n      //   db.collection(\"agendas\")\n      //   .where(\"year\",\"==\",\"2020\")\n      //   .orderBy('month')\n      //  .get()\n      //  .then(querySnapshot => {\n      //    const data = querySnapshot.docs.map(doc => doc.data());\n      //    let x =  action.payload.limit - action.payload.skip;\n      //    console.log(x)\n      //    data.map((newData,i)=>{\n      //      if(i < action.payload.limit && i > action.payload.skip)\n      //      stateCopy.push(newData)\n      //    })\n      //    action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n      //  });\n      // db.collection(\"agendas\")\n      // .where(\"year\",\"==\",\"2020\")\n      // .orderBy('month')\n      // .get()\n      // .then(querySnapshot => {\n      //   const data = querySnapshot.docs.map(doc => doc.data());\n      //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n      // });\n      \n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n      //   let agendas = []\n      //   let d = new Date();\n      //   let day = d.getDay();\n      //   let month = (d.getMonth() + 1).toString()\n      //   let year = d.getFullYear().toString();\n\n      //    let stateCopy = ''\n      //    //=======================================================\n      //    db.collection(\"agendas\")\n      //  //.where(\"year\",'==',year)\n      // .where(\"month\",'>=',month)\n      // .orderBy(\"month\",\"asc\")\n      // .orderBy(\"day\",\"asc\")\n      //   .get()\n      //   .then(querySnapshot => {\n      //     const data = querySnapshot.docs.map(doc => doc.data());\n      //     stateCopy = data;\n  \n      //     //=======================================================\n      //       db.collection(\"presentations\")\n      //      // .where(\"id\",\"==\",stateCopy.cd.toString())\n      //      .get()\n      //       .then(querySnapshot => {\n      //         const data = querySnapshot.docs.map(doc => doc.data());\n\n      //         stateCopy.map((post,i)=>{\n\n      //         let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n      //         post.title = title[0]; \n      //         post.date=`${post.year}-${post.month}-${post.day}`\n      //         return post\n      //         })\n\n      //         action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n      //       });\n      //     //========================================================\n      //   });\n      db.collection(\"agendas\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,data))\n      });\n      \n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_AGENDA:{\n       \n        db.collection(\"agendas\")\n      .where(\"id\",\"==\",action.payload)\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        \n        if(data.length > 0){\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,data))\n      } else {\n         action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL,{error:\"Failed to retrieve agenda\"}))\n      }\n       \n      });\n      return state\n      }\n      case ACTIONS.LOAD_AGENDA_SUCCESS:{\n        return {...action.payload[0]}\n      }\n      case ACTIONS.LOAD_AGENDA_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}