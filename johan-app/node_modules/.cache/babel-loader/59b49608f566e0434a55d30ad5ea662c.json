{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  console.log(action);\n\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"agendas\").add(stateCopy).then(docRef => {\n          db.collection(\"agendas\").doc(docRef.id).update(stateCopy).then(() => {\n            stateCopy._id = docRef.id;\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n          });\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        //     let d = new Date();\n        //     let year = d.getFullYear().toString();\n        //      let stateCopy = []\n        //      db.collection(\"agendas\")\n        //    .where(\"year\",'==',year)\n        //  .orderBy(\"month\",\"desc\")\n        //   .orderBy(\"day\",\"asc\")\n        //     .get()\n        //     .then(querySnapshot => {\n        //       const data = querySnapshot.docs.map(doc => {\n        //         doc.data()});\n        //       data.map((newData,i)=>{\n        //         console.log(newData)\n        //         if(i < action.payload.limit && i > action.payload.skip)\n        //         stateCopy.push(newData)\n        //       })\n        //       action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n        //     });\n        // db.collection(\"agendas\")\n        // .where(\"year\",\"==\",\"2020\")\n        // .get()\n        // .then(querySnapshot =>{\n        //   const data = querySnapshot.docs.map(doc =>{\n        //     return doc.data\n        //   })\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n        //   console.log(data)\n        // })\n        let _id = '';\n        let stateCopy = '';\n        db.collection(\"agendas\").where(\"year\", \"==\", \"2020\").orderBy(\"month\", \"desc\").orderBy(\"day\", \"desc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          stateCopy = data;\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, stateCopy));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\").get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              post.title = title[0];\n              post.date = `${post.year}-${post.month}-${post.day}`;\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        let _id, stateCopy;\n\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          stateCopy = data;\n          stateCopy[0]._id = _id;\n\n          if (data.length > 0) {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, stateCopy));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL, {\n              error: \"Failed to retrieve agenda\"\n            }));\n          }\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return { ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        console.log(action);\n        db.collection(\"agendas\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","console","log","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","collection","add","then","docRef","doc","id","update","_id","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","DELETE_AGENDA","where","get","querySnapshot","forEach","ref","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","orderBy","data","docs","map","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","d","Date","day","getDay","month","getMonth","toString","year","getFullYear","post","i","title","filter","presentation","cd","cdName","date","LOAD_AGENDAS_SUCCESS","agendas","LOAD_AGENDAS_FAIL","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","error","UPDATE_AGENDA","UPDATE_AGENDA_SUCCESS"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n  console.log(action)\n    switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n        let stateCopy = _.cloneDeep(action.payload)\n        db.collection(\"agendas\")\n        .add(stateCopy).then((docRef)=>{\n          db.collection(\"agendas\")\n          .doc(docRef.id)\n          .update(stateCopy).then(()=>{\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n          });\n        })\n      return stateCopy\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n        return action.payload\n    }\n     case ACTIONS.DELETE_AGENDA:{\n\n        db.collection(\"agendas\")\n        .where('id','==',action.payload)\n          .get()\n          .then((querySnapshot) => {\n            querySnapshot.forEach((doc)=> doc.ref.delete())\n            action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n          });\n        return state\n     }  \n     case ACTIONS.DELETE_AGENDA_SUCCESS:{\n       action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n       return state\n     }  \n      case ACTIONS.LOAD_CD_AGENDA: {\n  //     let d = new Date();\n  //     let year = d.getFullYear().toString();\n\n  //      let stateCopy = []\n  //      db.collection(\"agendas\")\n  //    .where(\"year\",'==',year)\n  //  .orderBy(\"month\",\"desc\")\n  //   .orderBy(\"day\",\"asc\")\n  //     .get()\n  //     .then(querySnapshot => {\n  //       const data = querySnapshot.docs.map(doc => {\n          \n  //         doc.data()});\n  //       data.map((newData,i)=>{\n  //         console.log(newData)\n  //         if(i < action.payload.limit && i > action.payload.skip)\n  //         stateCopy.push(newData)\n  //       })\n  //       action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n  //     });\n        // db.collection(\"agendas\")\n        // .where(\"year\",\"==\",\"2020\")\n        // .get()\n        // .then(querySnapshot =>{\n        //   const data = querySnapshot.docs.map(doc =>{\n        //     return doc.data\n        //   })\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n        //   console.log(data)\n        // })\n        \n        let _id = ''\n        let stateCopy = ''\n        db.collection(\"agendas\")\n        .where(\"year\",\"==\",\"2020\")\n        .orderBy(\"month\",\"desc\")\n        .orderBy(\"day\",\"desc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id\n            return doc.data()});\n            stateCopy = data\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n        });\n\n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n              stateCopy.map((post,i)=>{\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n              post.title = title[0]; \n              post.date=`${post.year}-${post.month}-${post.day}`\n              return post\n              })\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_AGENDA:{\n      let _id,stateCopy \n      db.collection(\"agendas\")\n      .where(\"id\",\"==\",action.payload)\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => {\n          _id = doc.id\n          return doc.data()});\n          stateCopy= data\n          stateCopy[0]._id = _id\n           \n    \n        if(data.length > 0){\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,stateCopy))\n        } else {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL,{error:\"Failed to retrieve agenda\"}))\n        }\n      });\n      return state\n      }\n      case ACTIONS.LOAD_AGENDA_SUCCESS:{\n        return {...action.payload[0]}\n      }\n      case ACTIONS.LOAD_AGENDA_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_AGENDA:{\n        console.log(action)\n          db.collection(\"agendas\")\n          .doc(action.payload._id)\n          .update(action.payload).then(()=>{\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n          });\n          return state\n          }\n      case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n      let stateCopy = _.cloneDeep(state)\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n      return {state,...action.payload}\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}