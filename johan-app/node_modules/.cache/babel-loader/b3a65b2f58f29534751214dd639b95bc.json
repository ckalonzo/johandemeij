{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport _ from \"lodash\";\nimport { createPresentation, updatePresentation, updatePresentationImage, uploadPresentationImage } from \"API/indexAPI\";\nconst initialState = {};\nexport default function presentationReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_PUBLICATION:\n      {\n        createPresentation(action.payload).then(json => {\n          console.log(action, json);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS, json));\n        }).catch(err => {\n          console.log(action, err);\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_FAIL, err));\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.currentID = action.payload;\n        fetch('http://localhost:3001/api/loadPresentationByID/' + action.payload).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION:\n      {\n        updatePresentation(action.payload).then(json => {\n          console.log(json);\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, stateCopy.ID));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        updatePresentationImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        uploadPresentationImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          frontCover: action.payload.submitted.frontCover,\n          caption: action.payload.submitted.caption\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/presentation.reducer.js"],"names":["ACTIONS","mainAction","_","createPresentation","updatePresentation","updatePresentationImage","uploadPresentationImage","initialState","presentationReducer","state","action","type","CREATE_NEW_PUBLICATION","payload","then","json","console","log","asyncDispatch","CREATE_NEW_PUBLICATION_SUCCESS","catch","err","CREATE_NEW_PUBLICATION_FAIL","LOAD_PRESENTATION","stateCopy","cloneDeep","currentID","fetch","data","res","LOAD_PRESENTATION_SUCCESS","LOAD_PRESENTATION_FAIL","length","UPDATE_PUBLICATION","UPDATE_PUBLICATION_SUCCESS","UPDATE_PUBLICATION_FAIL","ID","UPDATE_PRESENTATION_IMAGE","image","status","UPDATE_PRESENTATION_IMAGE_SUCCESS","submitted","UPDATE_PRESENTATION_IMAGE_FAIL","response","message","newImage","_id","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPLOAD_PRESENTATION_IMAGE","UPLOAD_PRESENTATION_IMAGE_SUCCESS","UPLOAD_PRESENTATION_IMAGE_FAIL","frontCover"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAQC,CAAR,MAAe,QAAf;AACA,SAAQC,kBAAR,EAA2BC,kBAA3B,EAA8CC,uBAA9C,EAAsEC,uBAAtE,QAAoG,cAApG;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,mBAAT,CAA8BC,KAAK,GAAGF,YAAtC,EAAoDG,MAApD,EAA4D;AACvE,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKX,OAAO,CAACY,sBAAb;AAAqC;AACrCT,QAAAA,kBAAkB,CAACO,MAAM,CAACG,OAAR,CAAlB,CAAmCC,IAAnC,CAAwCC,IAAI,IAAG;AAC3CC,UAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ,EAAmBK,IAAnB;AACAL,UAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACmB,8BAAT,EAAwCJ,IAAxC,CAA/B;AACH,SAHD,EAGGK,KAHH,CAGSC,GAAG,IAAI;AACZL,UAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ,EAAmBW,GAAnB;AACAX,UAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACsB,2BAAT,EAAqCD,GAArC,CAA/B;AACH,SAND;AAOA,eAAOX,MAAM,CAACG,OAAd;AACC;;AACD,SAAKb,OAAO,CAACmB,8BAAb;AAA6C;AAC7C,eAAOT,MAAM,CAACG,OAAd;AACC;;AACD,SAAKb,OAAO,CAACsB,2BAAb;AAA0C;AAC1C,eAAOb,KAAP;AACC;;AACD,SAAKT,OAAO,CAACuB,iBAAb;AAAgC;AAChC,YAAIC,SAAS,GAAGtB,CAAC,CAACuB,SAAF,CAAYhB,KAAZ,CAAhB;;AACAe,QAAAA,SAAS,CAACE,SAAV,GAAsBhB,MAAM,CAACG,OAA7B;AACIc,QAAAA,KAAK,CAAE,oDAAmDjB,MAAM,CAACG,OAA5D,CAAL,CACCC,IADD,CACOc,IAAD,IAASA,IAAI,CAACb,IAAL,EADf,EAECD,IAFD,CAEOe,GAAD,IAAS;AACfnB,UAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAAC8B,yBAAT,EAAmCD,GAAG,CAACD,IAAvC,CAA/B;AAEC,SALD,EAKGR,KALH,CAKSC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAAC+B,sBAAT,EAAgCV,GAAhC,CAA/B,CALhB;AAMA,eAAOZ,KAAP;AACH;;AACD,SAAMT,OAAO,CAAC8B,yBAAd;AAAwC;AAEpC,eAAOpB,MAAM,CAACG,OAAP,CAAemB,MAAf,GAAwB,CAAxB,GAA4BtB,MAAM,CAACG,OAAP,CAAe,CAAf,CAA5B,GAA8C,EAArD;AACH;;AACD,SAAMb,OAAO,CAAC+B,sBAAd;AAAqC;AACjC,eAAOtB,KAAP;AACH;;AACD,SAAKT,OAAO,CAACiC,kBAAb;AAAgC;AAChC7B,QAAAA,kBAAkB,CAACM,MAAM,CAACG,OAAR,CAAlB,CAAmCC,IAAnC,CAAwCC,IAAI,IAAE;AAC1CC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAL,UAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACkC,0BAAT,EAAoCnB,IAAI,CAACa,IAAL,CAAUA,IAA9C,CAA/B;AACH,SAHD,EAGGR,KAHH,CAGSC,GAAG,IAAE;AACVX,UAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACmC,uBAAT,EAAiCd,GAAjC,CAA/B;AACH,SALD;AAMA,eAAOZ,KAAP;AACC;;AACD,SAAKT,OAAO,CAACkC,0BAAb;AAAwC;AACxC,YAAIV,SAAS,GAAGtB,CAAC,CAACuB,SAAF,CAAYhB,KAAZ,CAAhB;;AACAC,QAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACuB,iBAAT,EAA2BC,SAAS,CAACY,EAArC,CAA/B;AACA,eAAO;AAAC3B,UAAAA,KAAD;AAAO,aAAGC,MAAM,CAACG;AAAjB,SAAP;AACC;;AACD,SAAKb,OAAO,CAACmC,uBAAb;AAAqC;AACrC,eAAO1B,KAAP;AACC;;AACD,SAAKT,OAAO,CAACqC,yBAAb;AAAuC;AACnC,YAAIb,SAAS,GAAGtB,CAAC,CAACuB,SAAF,CAAYf,MAAM,CAACG,OAAnB,CAAhB;;AACC,YAAIyB,KAAK,GAAGd,SAAS,CAACc,KAAtB;AACAjC,QAAAA,uBAAuB,CAACiC,KAAD,CAAvB,CAA+BxB,IAA/B,CAAqCC,IAAD,IAAQ;AAE3C,cAAGA,IAAI,CAACwB,MAAL,KAAc,GAAd,IAAqBxB,IAAI,CAACwB,MAAL,KAAc,GAAtC,EAA2C;AACzC7B,YAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACwC,iCAAT,EAA2C;AAACC,cAAAA,SAAS,EAACjB,SAAX;AAAqBT,cAAAA;AAArB,aAA3C,CAA/B;AACD,WAFD,MAEO;AACLL,YAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAAC0C,8BAAT,EAAwC3B,IAAI,CAAC4B,QAAL,CAAcC,OAAtD,CAA/B;AACD;AACF,SAPA,EAOExB,KAPF,CAOQC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAAC0C,8BAAT,EAAwCrB,GAAxC,CAA/B,CAPf;AASD,eAAOZ,KAAP;AACH;;AACD,SAAKT,OAAO,CAACwC,iCAAb;AAA+C;AACzC,YAAIhB,SAAS,GAAGtB,CAAC,CAACuB,SAAF,CAAYhB,KAAZ,CAAhB;;AAEA,YAAIoC,QAAQ,GAAG;AACbC,UAAAA,GAAG,EAACpC,MAAM,CAACG,OAAP,CAAe4B,SAAf,CAAyBK,GADhB;AAEbC,UAAAA,OAAO,EAACrC,MAAM,CAACG,OAAP,CAAe4B,SAAf,CAAyBM,OAFpB;AAGbC,UAAAA,OAAO,EAACtC,MAAM,CAACG,OAAP,CAAe4B,SAAf,CAAyBO,OAHpB;AAIbC,UAAAA,KAAK,EAACvC,MAAM,CAACG,OAAP,CAAe4B,SAAf,CAAyBQ,KAJlB;AAKbC,UAAAA,SAAS,EAACxC,MAAM,CAACG,OAAP,CAAeE,IAAf,CAAoBa,IAApB,CAAyBuB,QALtB;AAMbC,UAAAA,SAAS,EAACC,IAAI,CAACC,GAAL;AANG,SAAf;AAQA9B,QAAAA,SAAS,CAACE,SAAV,GAAsBhB,MAAM,CAACG,OAAP,CAAe4B,SAAf,CAAyBM,OAA/C;AACArC,QAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAAED,OAAO,CAACuD,iBAAV,EAA4BV,QAA5B,CAA/B;AACF,eAAOrB,SAAP;AACH;;AACD,SAAKxB,OAAO,CAAC0C,8BAAb;AAA4C;AACxC,eAAOjC,KAAP;AACH;;AACD,SAAKT,OAAO,CAACwD,yBAAb;AAAuC;AACrC,YAAIhC,SAAS,GAAGtB,CAAC,CAACuB,SAAF,CAAYf,MAAM,CAACG,OAAnB,CAAhB;;AACC,YAAIyB,KAAK,GAAGd,SAAS,CAACc,KAAtB;AACAhC,QAAAA,uBAAuB,CAACgC,KAAD,CAAvB,CAA+BxB,IAA/B,CAAqCC,IAAD,IAAQ;AAE3C,cAAGA,IAAI,CAACwB,MAAL,KAAc,GAAd,IAAqBxB,IAAI,CAACwB,MAAL,KAAc,GAAtC,EAA2C;AACzC7B,YAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACyD,iCAAT,EAA2C;AAAChB,cAAAA,SAAS,EAACjB,SAAX;AAAqBT,cAAAA;AAArB,aAA3C,CAA/B;AACD,WAFD,MAEO;AACLL,YAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAAC0D,8BAAT,EAAwC3C,IAAI,CAAC4B,QAAL,CAAcC,OAAtD,CAA/B;AACD;AACF,SAPA,EAOExB,KAPF,CAOQC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAAC0D,8BAAT,EAAwCrC,GAAxC,CAA/B,CAPf;AASD,eAAOZ,KAAP;AACD;;AACD,SAAKT,OAAO,CAACyD,iCAAb;AAA+C;AAC3C,YAAIjC,SAAS,GAAGtB,CAAC,CAACuB,SAAF,CAAYhB,KAAZ,CAAhB;;AAEA,YAAIoC,QAAQ,GAAG;AACbc,UAAAA,UAAU,EAACjD,MAAM,CAACG,OAAP,CAAe4B,SAAf,CAAyBkB,UADvB;AAEbX,UAAAA,OAAO,EAACtC,MAAM,CAACG,OAAP,CAAe4B,SAAf,CAAyBO;AAFpB,SAAf;AAIAxB,QAAAA,SAAS,CAACE,SAAV,GAAsBhB,MAAM,CAACG,OAAP,CAAe4B,SAAf,CAAyBM,OAA/C;AACArC,QAAAA,MAAM,CAACQ,aAAP,CAAqBjB,UAAU,CAAED,OAAO,CAACqC,yBAAV,EAAoCQ,QAApC,CAA/B;AACF,eAAOrB,SAAP;AACD;;AACD,SAAKxB,OAAO,CAAC0D,8BAAb;AAA4C;AAC1C,eAAOjD,KAAP;AACD;;AACH;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AAlHJ;AAsHD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport  _ from \"lodash\"\nimport {createPresentation,updatePresentation,updatePresentationImage,uploadPresentationImage} from \"API/indexAPI\"\nconst initialState = {};\nexport default function presentationReducer (state = initialState, action) {\n    switch (action.type) {\n  \n        case ACTIONS.CREATE_NEW_PUBLICATION: {\n        createPresentation(action.payload).then(json =>{\n            console.log(action,json)\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS,json))\n        }).catch(err => {\n            console.log(action,err)\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_FAIL,err))\n        })\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_PRESENTATION: {\n        let stateCopy = _.cloneDeep(state)\n        stateCopy.currentID = action.payload\n            fetch ('http://localhost:3001/api/loadPresentationByID/'+ action.payload)\n            .then((data)=> data.json())\n            .then((res) => {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS,res.data))\n            \n            }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_FAIL,err)))\n            return state\n        }\n        case  ACTIONS.LOAD_PRESENTATION_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_PRESENTATION_FAIL:{\n            return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION:{\n        updatePresentation(action.payload).then(json=>{\n            console.log(json)\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS,json.data.data))\n        }).catch(err=>{\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_FAIL,err))\n        })\n        return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,stateCopy.ID))\n        return {state,...action.payload}\n        }\n        case ACTIONS.UPDATE_PUBLICATION_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n            let stateCopy = _.cloneDeep(action.payload)\n             let image = stateCopy.image\n             updatePresentationImage(image).then((json)=>{\n    \n              if(json.status!==404 || json.status!==500) {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n              } else {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,json.response.message))\n              }\n            }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,err)))\n          \n            return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE:{\n          let stateCopy = _.cloneDeep(action.payload)\n           let image = stateCopy.image\n           uploadPresentationImage(image).then((json)=>{\n  \n            if(json.status!==404 || json.status!==500) {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n            } else {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL,json.response.message))\n            }\n          }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL,err)))\n        \n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:{\n            let stateCopy = _.cloneDeep(state)\n            \n            let newImage = {\n              frontCover:action.payload.submitted.frontCover,\n              caption:action.payload.submitted.caption\n            }\n            stateCopy.currentID = action.payload.submitted.albumID\n            action.asyncDispatch(mainAction( ACTIONS.UPDATE_PRESENTATION_IMAGE,newImage))\n          return stateCopy\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:{\n          return state\n        }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}