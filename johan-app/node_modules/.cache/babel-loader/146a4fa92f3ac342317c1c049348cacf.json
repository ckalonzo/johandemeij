{"ast":null,"code":"import _objectSpread from\"/Applications/MAMP/htdocs/WEB/johandemeij/johan-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import{db}from\"../../firebase\";var initialState={};export default function postImagesReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.LOAD_POST_IMAGES:{fetch('http://127.0.0.1:5021/api/loadPostImages').then(function(data){return data.json();}).then(function(res){action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data));}).catch(function(err){return action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err));});return state;}case ACTIONS.LOAD_POST_IMAGES_SUCCESS:{return _objectSpread({state:state},action.payload);}case ACTIONS.LOAD_POST_IMAGES_FAIL:{return state;}case ACTIONS.LOAD_PRESENTATION_IMAGES:{db.collection(\"postimages\").where(\"albumID\",'==',action.payload).get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return doc.data();});console.log(data);action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_IMAGES_SUCCESS,data));});return state;}case ACTIONS.LOAD_PRESENTATION_IMAGES_SUCCESS:{return _objectSpread({state:state},action.payload);}case ACTIONS.LOAD_PRESENTATIONS_IMAGES_FAIL:{return state;}default:return state;}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/WEB/johandemeij/johan-app/src/redux/reducers/postImages.reducer.js"],"names":["ACTIONS","mainAction","db","initialState","postImagesReducer","state","action","type","LOAD_POST_IMAGES","fetch","then","data","json","res","asyncDispatch","LOAD_POST_IMAGES_SUCCESS","catch","err","LOAD_POST_IMAGES_FAIL","payload","LOAD_PRESENTATION_IMAGES","collection","where","get","querySnapshot","docs","map","doc","console","log","LOAD_PRESENTATION_IMAGES_SUCCESS","LOAD_PRESENTATIONS_IMAGES_FAIL"],"mappings":"yKAAA,OAASA,OAAT,KAAwB,wBAAxB,CACA,OAASC,UAAT,KAA2B,6BAA3B,CACA,OAASC,EAAT,KAAkB,gBAAlB,CACA,GAAMC,CAAAA,YAAY,CAAG,EAArB,CACA,cAAe,SAASC,CAAAA,iBAAT,EAA0D,IAA9BC,CAAAA,KAA8B,2DAAtBF,YAAsB,IAARG,CAAAA,MAAQ,2CACrE,OAAQA,MAAM,CAACC,IAAf,EAEE,IAAKP,CAAAA,OAAO,CAACQ,gBAAb,CAA8B,CAC5BC,KAAK,CAAC,0CAAD,CAAL,CACCC,IADD,CACM,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,IAAL,EAAV,EADN,EAECF,IAFD,CAEM,SAACG,GAAD,CAAS,CACbP,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACe,wBAAT,CAAkCF,GAAG,CAACF,IAAtC,CAA/B,EACD,CAJD,EAIGK,KAJH,CAIS,SAAAC,GAAG,QAAIX,CAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACkB,qBAAT,CAA+BD,GAA/B,CAA/B,CAAJ,EAJZ,EAKA,MAAOZ,CAAAA,KAAP,CACD,CACD,IAAKL,CAAAA,OAAO,CAACe,wBAAb,CAAsC,CAEpC,sBAAQV,KAAK,CAALA,KAAR,EAAiBC,MAAM,CAACa,OAAxB,EACD,CACD,IAAKnB,CAAAA,OAAO,CAACkB,qBAAb,CAAmC,CACjC,MAAOb,CAAAA,KAAP,CACD,CACD,IAAKL,CAAAA,OAAO,CAACoB,wBAAb,CAAsC,CAEpClB,EAAE,CAACmB,UAAH,CAAc,YAAd,EACCC,KADD,CACO,SADP,CACiB,IADjB,CACsBhB,MAAM,CAACa,OAD7B,EAEEI,GAFF,GAGEb,IAHF,CAGO,SAAAc,aAAa,CAAI,CACrB,GAAMb,CAAAA,IAAI,CAAGa,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAuB,SAAAC,GAAG,QAAGA,CAAAA,GAAG,CAAChB,IAAJ,EAAH,EAA1B,CAAb,CACAiB,OAAO,CAACC,GAAR,CAAYlB,IAAZ,EACCL,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAAC8B,gCAAT,CAA0CnB,IAA1C,CAA/B,EACF,CAPF,EASA,MAAON,CAAAA,KAAP,CACD,CACD,IAAKL,CAAAA,OAAO,CAAC8B,gCAAb,CAA8C,CAE5C,sBAAQzB,KAAK,CAALA,KAAR,EAAiBC,MAAM,CAACa,OAAxB,EACD,CACD,IAAKnB,CAAAA,OAAO,CAAC+B,8BAAb,CAA4C,CAC1C,MAAO1B,CAAAA,KAAP,CACD,CACD,QACE,MAAOA,CAAAA,KAAP,CAtCJ,CAyCD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db} from \"../../firebase\";\nconst initialState = {};\nexport default function postImagesReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_POST_IMAGES:{\n        fetch('http://127.0.0.1:5021/api/loadPostImages')\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\n        return state\n      }\n      case ACTIONS.LOAD_POST_IMAGES_SUCCESS:{\n        \n        return {state,...action.payload}\n      }\n      case ACTIONS.LOAD_POST_IMAGES_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_PRESENTATION_IMAGES:{\n\n        db.collection(\"postimages\")\n        .where(\"albumID\",'==',action.payload)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc =>doc.data()); \n           console.log(data)\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_IMAGES_SUCCESS,data))\n         });\n        \n        return state\n      }\n      case ACTIONS.LOAD_PRESENTATION_IMAGES_SUCCESS:{\n        \n        return {state,...action.payload}\n      }\n      case ACTIONS.LOAD_PRESENTATIONS_IMAGES_FAIL:{\n        return state\n      }\n      default: \n        return state\n       \n    }\n  }"]},"metadata":{},"sourceType":"module"}