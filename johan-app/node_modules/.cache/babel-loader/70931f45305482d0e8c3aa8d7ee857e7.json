{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { updatePost } from 'API/indexAPI';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { changePostImage, updatePostImage, createPost } from \"API/indexAPI\";\nimport _ from \"lodash\";\nimport { NavDropdown } from 'react-bootstrap';\nconst initialState = {};\nexport default function singlePostReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_POST:\n      {\n        createPost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_FAIL, err));\n        });\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_ARTICLE:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST:\n      {\n        fetch('http://localhost:3001/api/loadPostByID/' + action.payload).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL, err)));\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POST_SUCCESS:\n      {\n        return action.payload[0];\n      }\n\n    case ACTIONS.LOAD_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST:\n      {\n        updatePost(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_SUCCESS:\n      {\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_POST_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        changePostImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPLOAD_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE:\n      {\n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_SUCCESS, json));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:\n      {\n        console.log(action);\n        return action;\n      }\n\n    case ACTIONS.UPDATE_POST_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n} //No. 5 JPEG.jpg","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/singlePost.reducer.js"],"names":["ACTIONS","updatePost","mainAction","changePostImage","updatePostImage","createPost","_","NavDropdown","initialState","singlePostReducer","state","action","type","CREATE_NEW_POST","payload","then","json","asyncDispatch","CREATE_NEW_POST_SUCCESS","catch","err","CREATE_NEW_POST_FAIL","LOAD_ARTICLE","LOAD_POST","fetch","data","res","LOAD_POST_SUCCESS","LOAD_POST_FAIL","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","UPLOAD_IMAGE","stateCopy","cloneDeep","image","status","UPLOAD_IMAGE_SUCCESS","submitted","UPLOAD_IMAGE_FAIL","response","message","newImage","_id","albumID","caption","cover","imageName","filename","updatedAt","Date","now","UPDATE_POST_IMAGE","UPDATE_POST_IMAGE_SUCCESS","UPDATE_POST_IMAGE_FAIL","console","log"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { updatePost } from 'API/indexAPI'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {changePostImage,updatePostImage,createPost} from \"API/indexAPI\"\nimport _ from \"lodash\"\nimport { NavDropdown } from 'react-bootstrap'\nconst initialState = {};\nexport default function singlePostReducer (state = initialState, action) {\n    switch (action.type) {\n\n      case ACTIONS.CREATE_NEW_POST: {\n        createPost(action.payload).then(json =>{\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_SUCCESS,json))\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_POST_FAIL,err))\n        })\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.CREATE_NEW_POST_FAIL: {\n        return state\n      }\n      case ACTIONS.LOAD_ARTICLE:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_POST: {\n       \n        fetch ('http://localhost:3001/api/loadPostByID/'+ action.payload)\n        .then((data)=> data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_SUCCESS,res.data))\n        \n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_FAIL,err)))\n        return action.payload\n      }\n      case  ACTIONS.LOAD_POST_SUCCESS:{\n\n        return action.payload[0]\n      }\n      case  ACTIONS.LOAD_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_POST:{\n        updatePost(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_SUCCESS:{\n        return {state,...action.payload}\n      }\n      case ACTIONS.UPDATE_POST_FAIL:{\n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE:{\n        let stateCopy = _.cloneDeep(action.payload)\n         let image = stateCopy.image\n         changePostImage(image).then((json)=>{\n\n          if(json.status!==404 || json.status!==500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,json.response.message))\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPLOAD_IMAGE_FAIL,err)))\n      \n        return state\n      }\n      case ACTIONS.UPLOAD_IMAGE_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          let newImage = {\n            _id:action.payload.submitted._id,\n            albumID:action.payload.submitted.albumID,\n            caption:action.payload.submitted.caption,\n            cover:action.payload.submitted.cover,\n            imageName:action.payload.json.data.filename,\n            updatedAt:Date.now()\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n        return stateCopy\n      }\n      case ACTIONS.UPLOAD_IMAGE_FAIL:{\n        return state\n      }\n\n      case ACTIONS.UPDATE_POST_IMAGE:{\n        \n        updatePostImage(action.payload).then(json => {\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_SUCCESS,json))\n        }).catch(err =>{\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE_FAIL,err))\n        })\n        return state\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_SUCCESS:{\n        console.log(action)\n        return action\n      }\n      case ACTIONS.UPDATE_POST_IMAGE_FAIL:{\n        return state\n      }\n\n      default: \n        return state\n       \n    }\n  }//No. 5 JPEG.jpg"]},"metadata":{},"sourceType":"module"}