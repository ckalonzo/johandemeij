{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function postsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_POSTS:\n      {\n        fetch('http://localhost:3001/api/loadPosts').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_POSTS_SUCCESS:\n      {\n        let stateCopy = action.payload;\n        let postImages = [];\n        fetch('http://localhost:3001/api/loadPostImages').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS, res.data));\n          postImages = res.data;\n          stateCopy.map(post => {\n            console.log(post.ID);\n            post.image = Object.values(res.data).filter(image => image.albumID == post.ID).map(postImage => {\n              return postImage;\n            });\n          });\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL, err)));\n        console.log(postImages);\n        console.log(stateCopy);\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POSTS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/posts.reducer.js"],"names":["ACTIONS","mainAction","_","initialState","postsReducer","state","action","type","LOAD_POSTS","fetch","then","data","json","res","asyncDispatch","LOAD_POSTS_SUCCESS","catch","err","LOAD_POSTS_FAIL","stateCopy","payload","postImages","LOAD_POST_IMAGES_SUCCESS","map","post","console","log","ID","image","Object","values","filter","albumID","postImage","LOAD_POST_IMAGES_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,YAAT,CAAuBC,KAAK,GAAGF,YAA/B,EAA6CG,MAA7C,EAAqD;AAChE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,OAAO,CAACQ,UAAb;AAAyB;AAExBC,QAAAA,KAAK,CAAC,qCAAD,CAAL,CACEC,IADF,CACQC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADjB,EAEEF,IAFF,CAEQG,GAAD,IAAS;AAIbP,UAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACe,kBAAT,EAA4BF,GAAG,CAACF,IAAhC,CAA/B;AACD,SAPF,EAOIK,KAPJ,CAOUC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACkB,eAAT,EAAyBD,GAAzB,CAA/B,CAPjB;AASC,eAAOZ,KAAP;AACD;;AACD,SAAKL,OAAO,CAACe,kBAAb;AAAiC;AAC/B,YAAII,SAAS,GAAGb,MAAM,CAACc,OAAvB;AACA,YAAIC,UAAU,GAAG,EAAjB;AACAZ,QAAAA,KAAK,CAAC,0CAAD,CAAL,CACKC,IADL,CACWC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADpB,EAEKF,IAFL,CAEWG,GAAD,IAAS;AACbP,UAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACsB,wBAAT,EAAkCT,GAAG,CAACF,IAAtC,CAA/B;AACAU,UAAAA,UAAU,GAAGR,GAAG,CAACF,IAAjB;AACAQ,UAAAA,SAAS,CAACI,GAAV,CAAcC,IAAI,IAAI;AACpBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,EAAjB;AACAH,YAAAA,IAAI,CAACI,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAcjB,GAAG,CAACF,IAAlB,EAAwBoB,MAAxB,CAA+BH,KAAK,IAAIA,KAAK,CAACI,OAAN,IAAiBR,IAAI,CAACG,EAA9D,EAAkEJ,GAAlE,CAAsEU,SAAS,IAAG;AAC7F,qBAAOA,SAAP;AACD,aAFY,CAAb;AAID,WAND;AAOD,SAZL,EAYOjB,KAZP,CAYaC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACkC,qBAAT,EAA+BjB,GAA/B,CAA/B,CAZpB;AAcIQ,QAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AAGAI,QAAAA,OAAO,CAACC,GAAR,CAAYP,SAAZ;AACJ,eAAOb,MAAM,CAACc,OAAd;AACD;;AACD,SAAKpB,OAAO,CAACkB,eAAb;AAA8B;AAE5B,eAAOb,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA5CJ;AAgDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport _ from \"lodash\"\n\nconst initialState = {};\nexport default function postsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_POSTS: {\n        \n       fetch('http://localhost:3001/api/loadPosts')\n        .then((data) => data.json())\n        .then((res) => {\n          \n           \n\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,res.data))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_FAIL,err)))\n       \n        return state\n      }\n      case ACTIONS.LOAD_POSTS_SUCCESS: {\n        let stateCopy = action.payload\n        let postImages = [];\n        fetch('http://localhost:3001/api/loadPostImages')\n            .then((data) => data.json())\n            .then((res) => {\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n              postImages = res.data\n              stateCopy.map(post => {\n                console.log(post.ID)\n                post.image = Object.values(res.data).filter(image => image.albumID == post.ID).map(postImage =>{\n                  return postImage\n                })\n  \n              })\n            }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\n            \n            console.log(postImages)\n            \n            \n            console.log(stateCopy)\n        return action.payload\n      }\n      case ACTIONS.LOAD_POSTS_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}