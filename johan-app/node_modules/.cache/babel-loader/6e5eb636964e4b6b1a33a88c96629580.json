{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        //   let stateCopy = _.cloneDeep(state)\n        //  fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        //   .then((data) => data.json())\n        //   .then((res) => {\n        //     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n        //     stateCopy.agendaTotal = res.data.length\n        //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        let stateCopy = [];\n        db.collection(\"agendas\").where(\"year\", \"==\", \"2020\").orderBy('month').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          let x = action.payload.limit - action.payload.skip;\n          console.log(x);\n          data.map((newData, i) => {\n            if (i < action.payload.limit && i > action.payload.skip) stateCopy.push(newData);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, stateCopy));\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              post.title = title[0];\n              post.date = `${post.year}-${post.month}-${post.day}`;\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","collection","where","orderBy","get","then","querySnapshot","data","docs","map","doc","x","payload","limit","skip","console","log","newData","i","push","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","agendas","d","Date","day","getDay","month","getMonth","toString","year","getFullYear","post","title","filter","presentation","id","cd","cdName","date","LOAD_AGENDAS_SUCCESS","cloneDeep","LOAD_AGENDAS_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n      //   let stateCopy = _.cloneDeep(state)\n      //  fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n      //   .then((data) => data.json())\n      //   .then((res) => {\n      //     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n      //     stateCopy.agendaTotal = res.data.length\n      //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n\n        let stateCopy = []\n        db.collection(\"agendas\")\n        .where(\"year\",\"==\",\"2020\")\n        .orderBy('month')\n       .get()\n       .then(querySnapshot => {\n         const data = querySnapshot.docs.map(doc => doc.data());\n         let x =  action.payload.limit - action.payload.skip;\n         console.log(x)\n         data.map((newData,i)=>{\n           if(i < action.payload.limit && i > action.payload.skip)\n           stateCopy.push(newData)\n         })\n         action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n       });\n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n              post.title = title[0]; \n              post.date=`${post.year}-${post.month}-${post.day}`\n              return post\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}