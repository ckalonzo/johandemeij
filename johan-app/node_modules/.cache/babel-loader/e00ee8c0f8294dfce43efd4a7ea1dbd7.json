{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { updateEvent } from \"API/indexAPI\";\nconst initialState = {};\nexport default function eventsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_EVENTS:\n      {\n        fetch('http://localhost:3001/api/loadEvents').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENTS_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENTS_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_EVENTS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_EVENTS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_EVENT:\n      {\n        fetch('http://localhost:3001/api/loadEventByID/' + action.payload).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_EVENT_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_EVENT_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_EVENT:\n      {\n        updateEvent(action.payload).then(json => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_SUCCESS, json.data.data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_FAIL, err));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_EVENT_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.UPDATE_EVENT_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/events.reducer.js"],"names":["ACTIONS","mainAction","updateEvent","initialState","eventsReducer","state","action","type","LOAD_EVENTS","fetch","then","data","json","res","asyncDispatch","LOAD_EVENTS_SUCCESS","catch","err","LOAD_EVENTS_FAIL","payload","LOAD_EVENT","LOAD_EVENT_SUCCESS","LOAD_EVENT_FAIL","UPDATE_EVENT","UPDATE_EVENT_SUCCESS","UPDATE_EVENT_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAAQC,WAAR,QAA0B,cAA1B;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AACjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,OAAO,CAACQ,WAAb;AAA0B;AACzBC,QAAAA,KAAK,CAAC,sCAAD,CAAL,CACEC,IADF,CACQC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADjB,EAEEF,IAFF,CAEQG,GAAD,IAAS;AACbP,UAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACe,mBAAT,EAA6BF,GAAG,CAACF,IAAjC,CAA/B;AACD,SAJF,EAIIK,KAJJ,CAIUC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACkB,gBAAT,EAA0BD,GAA1B,CAA/B,CAJjB;AAMC,eAAOZ,KAAP;AACD;;AACD,SAAKL,OAAO,CAACe,mBAAb;AAAkC;AAChC,eAAOT,MAAM,CAACa,OAAd;AACD;;AACD,SAAKnB,OAAO,CAACkB,gBAAb;AAA+B;AAE7B,eAAOb,KAAP;AACD;;AACD,SAAKL,OAAO,CAACoB,UAAb;AAAwB;AACtBX,QAAAA,KAAK,CAAC,6CAA2CH,MAAM,CAACa,OAAnD,CAAL,CACCT,IADD,CACOC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADhB,EAECF,IAFD,CAEOG,GAAD,IAAS;AACbP,UAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACqB,kBAAT,EAA4BR,GAAG,CAACF,IAAhC,CAA/B;AACD,SAJD,EAIGK,KAJH,CAISC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACsB,eAAT,EAAyBL,GAAzB,CAA/B,CAJhB;AAMA,eAAOZ,KAAP;AACD;;AACD,SAAKL,OAAO,CAACqB,kBAAb;AAAgC;AAC9B,eAAOf,MAAM,CAACa,OAAd;AACD;;AACD,SAAKnB,OAAO,CAACsB,eAAb;AAA6B;AAC3B,eAAOjB,KAAP;AACD;;AACD,SAAKL,OAAO,CAACuB,YAAb;AAA2B;AACzBrB,QAAAA,WAAW,CAACI,MAAM,CAACa,OAAR,CAAX,CAA4BT,IAA5B,CAAiCE,IAAI,IAAE;AACrCN,UAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACwB,oBAAT,EAA8BZ,IAAI,CAACD,IAAL,CAAUA,IAAxC,CAA/B;AACD,SAFD,EAEGK,KAFH,CAESC,GAAG,IAAE;AACZX,UAAAA,MAAM,CAACQ,aAAP,CAAqBb,UAAU,CAACD,OAAO,CAACyB,iBAAT,EAA2BR,GAA3B,CAA/B;AACD,SAJD;AAMA,eAAOZ,KAAP;AACD;;AACD,SAAKL,OAAO,CAACwB,oBAAb;AAAmC;AACjC,eAAOlB,MAAM,CAACa,OAAd;AACD;;AACD,SAAKnB,OAAO,CAACyB,iBAAb;AAAgC;AAE9B,eAAOpB,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AAnDJ;AAuDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updateEvent} from \"API/indexAPI\"\nconst initialState = {};\nexport default function eventsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_EVENTS: {\n       fetch('http://localhost:3001/api/loadEvents')\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENTS_SUCCESS,res.data))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENTS_FAIL,err)))\n\n        return state\n      }\n      case ACTIONS.LOAD_EVENTS_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_EVENTS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_EVENT:{\n        fetch('http://localhost:3001/api/loadEventByID/'+action.payload)\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_SUCCESS,res.data))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_FAIL,err)))\n\n        return state\n      }\n      case ACTIONS.LOAD_EVENT_SUCCESS:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_EVENT_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_EVENT: {\n        updateEvent(action.payload).then(json=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_SUCCESS,json.data.data))\n        }).catch(err=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_FAIL,err))\n        })\n\n        return state\n      }\n      case ACTIONS.UPDATE_EVENT_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.UPDATE_EVENT_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}