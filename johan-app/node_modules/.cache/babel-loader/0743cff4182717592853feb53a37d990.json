{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { database, db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nlet d = new Date();\nlet day = d.getDate();\nlet month = d.getMonth() + 1;\nlet year = d.getFullYear();\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"agendas\").add(stateCopy).then(function (docRef) {\n          console.log(docRef);\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        window.location.reload(true);\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"year\", \">=\", year.toString()).orderBy(\"year\", \"asc\").orderBy(\"month\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_CD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"year\", \">=\", year.toString()).orderBy(\"year\", \"asc\").orderBy(\"month\", \"asc\").orderBy(\"day\", \"desc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_CD_AGENDA_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['year', 'month', 'day'], ['asc', 'asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_CD_AGENDA_SUCCESS:\n      {\n        return _.orderBy(action.payload, ['year', 'month', 'day'], ['asc', 'asc', 'asc']);\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        db.collection(\"agendas\").where(\"year\", \">=\", year.toString()).orderBy(\"year\", \"asc\").orderBy(\"month\", \"asc\").get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          let agendas = [];\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            if (+agenda.month >= +month) return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, agendas));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        db.collection(\"agendas\").where(\"year\", \"==\", action.payload.year.toString()).orderBy(\"month\", \"asc\").get().then(snapshot => {\n          let agendas = [];\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          Object.values(data).map(agenda => {\n            agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`;\n            agenda.month = +agenda.month;\n            return agendas.push(agenda);\n          });\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, _.orderBy(agendas, ['month', 'day'], ['asc', 'asc'])));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FILTERED:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => doc.data());\n          if (data.length > 0) action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, { ...data\n          }));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return action.payload ? action.payload[0] : state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        let _id = '';\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload.id).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          db.collection(\"agendas\").doc(_id).update(action.payload).then(() => {\n            console.log(\"success\");\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA, stateCopy.id));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Users/carlkalonzo/Documents/DEV/johandemeij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","database","db","_","initialState","d","Date","day","getDate","month","getMonth","year","getFullYear","agendaReducer","state","action","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","collection","add","then","docRef","console","log","_id","id","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","window","location","reload","DELETE_AGENDA","where","get","querySnapshot","forEach","doc","ref","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","toString","orderBy","snapshot","data","docs","map","LOAD_CD_AGENDA_SUCCESS","LOAD_DASHBOARD_CD_AGENDA","LOAD_DASHBOARD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","agendas","Object","values","agenda","date","push","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDAS_FILTERED","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","UPDATE_AGENDA","update","UPDATE_AGENDA_SUCCESS","UPDATE_AGENDA_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { database,db} from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nlet d = new Date();\nlet day = d.getDate();\nlet month = d.getMonth()+1;\nlet year = d.getFullYear()\nexport default function agendaReducer (state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:{\n\n    let stateCopy = _.cloneDeep(action.payload)\n        db.collection(\"agendas\")\n          .add(stateCopy)\n          .then(function(docRef){\n            console.log(docRef)\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n          });\n    return state\n    }\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n    window.location.reload(true)\n    return action.payload\n    }\n    case ACTIONS.DELETE_AGENDA:{\n    db.collection(\"agendas\")\n    .where('id','==',action.payload)\n     .get()\n     .then((querySnapshot) => {\n       querySnapshot.forEach((doc)=> doc.ref.delete())\n       action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n     });\n\n    return state\n    }  \n    case ACTIONS.DELETE_AGENDA_SUCCESS:{\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n    return state\n    }  \n    case ACTIONS.LOAD_CD_AGENDA: {\n    db.collection(\"agendas\")\n    .where(\"year\",\">=\",year.toString())\n    .orderBy(\"year\",\"asc\")\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_DASHBOARD_CD_AGENDA: {\n      db.collection(\"agendas\")\n      .where(\"year\",\">=\",year.toString())\n      .orderBy(\"year\",\"asc\")\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"desc\")\n      .get()\n      .then(snapshot => {\n        const data = snapshot.docs.map(doc => {return doc.data()});\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_CD_AGENDA_SUCCESS,data))\n      })\n    return state\n    }\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n    return _.orderBy(action.payload,['year','month','day'],['asc','asc','asc'])\n    }\n    case ACTIONS.LOAD_DASHBOARD_CD_AGENDA_SUCCESS: {\n      return _.orderBy(action.payload,['year','month','day'],['asc','asc','asc'])\n      }\n    case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS: {\n\n    db.collection(\"agendas\")\n    .where(\"year\",\">=\",year.toString())\n    .orderBy(\"year\",\"asc\")\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      let agendas = []\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n       if(+agenda.month >= +month )\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,agendas))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n\n    return action.payload\n    }\n    case ACTIONS.LOAD_AGENDAS_FAIL:{\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n    db.collection(\"agendas\")\n    .where(\"year\",\"==\",action.payload.year.toString())\n    .orderBy(\"month\",\"asc\")\n    .get()\n    .then(snapshot => {\n      let agendas = []\n      const data = snapshot.docs.map(doc => {return doc.data()});\n      Object.values(data).map(agenda=>{\n        agenda.date = `${agenda.month}-${agenda.day}-${agenda.year}`\n        agenda.month = +agenda.month\n        return agendas.push(agenda)\n      })\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,_.orderBy(agendas,['month','day'],['asc','asc'])))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDAS_FILTERED:{\n      return action.payload\n    }\n    case ACTIONS.LOAD_AGENDA:{\n    db.collection(\"agendas\")\n    .where(\"id\",\"==\",action.payload)\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => doc.data());\n      if(data.length > 0)\n      action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,{...data}))\n    })\n    return state\n    }\n    case ACTIONS.LOAD_AGENDA_SUCCESS:{\n\n     return action.payload ? action.payload[0] : state\n\n    }\n    case ACTIONS.LOAD_AGENDA_FAIL:{\n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA:{\n      let _id =''\n      db.collection(\"agendas\")\n    .where(\"id\",\"==\",action.payload.id)\n    .get()\n    .then(snapshot => {\n      const data = snapshot.docs.map(doc => {\n        _id = doc.id\n        return doc.data()});\n        db.collection(\"agendas\").doc(_id)\n        .update(action.payload).then(()=>{\n          console.log(\"success\")\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n     });\n    })\n     \n    return state\n    }\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n    let stateCopy = _.cloneDeep(action.payload)\n    action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA,stateCopy.id))\n    return stateCopy\n    }\n    case ACTIONS.UPDATE_AGENDA_FAIL:{\n   \n    return state\n    }\n    default: \n      return {\n        ...state\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}