{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function orderReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_ORDER_LOCATIONS:\n      {\n        db.collection(\"orders\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_ORDER_LOCATIONS_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATIONS_SUCCESS:\n      {\n        return action.payload ? action.payload : state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATIONS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATION:\n      {\n        db.collection(\"orders\").where(\"id\", '==', action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_ORDER_LOCATION_SUCCESS, ...data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATION_SUCCESS:\n      {\n        return action.payload ? action.payload : state;\n      }\n\n    case ACTIONS.LOAD_ORDER_LOCATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_ORDER_LOCATION:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let _id = console.log(stateCopy.id);\n\n        db.collection(\"orders\").where(\"id\", '==', stateCopy.id).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          consle.log(data);\n          db.collection(\"orders\").doc(_id).update(stateCopy).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_ORDER_LOCATION_SUCCESS, stateCopy));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_ORDER_LOCATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/orderLocations.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","orderReducer","state","action","type","LOAD_ORDER_LOCATIONS","collection","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_ORDER_LOCATIONS_SUCCESS","payload","LOAD_ORDER_LOCATIONS_FAIL","LOAD_ORDER_LOCATION","where","LOAD_ORDER_LOCATION_SUCCESS","LOAD_ORDER_LOCATION_FAIL","UPDATE_ORDER_LOCATION","console","log","stateCopy","cloneDeep","_id","id","consle","update","UPDATE_ORDER_LOCATION_SUCCESS"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,YAAT,CAAuBC,KAAK,GAAGF,YAA/B,EAA6CG,MAA7C,EAAqD;AAChE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKR,OAAO,CAACS,oBAAb;AAAmC;AACnCP,QAAAA,EAAE,CAACQ,UAAH,CAAc,QAAd,EACCC,GADD,GAECC,IAFD,CAEMC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,UAAAA,MAAM,CAACW,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACmB,4BAAT,EAAsCL,IAAtC,CAA/B;AACD,SALD;AAOE,eAAOR,KAAP;AACD;;AACD,SAAKN,OAAO,CAACmB,4BAAb;AAA2C;AACzC,eAAOZ,MAAM,CAACa,OAAP,GAAiBb,MAAM,CAACa,OAAxB,GAAkCd,KAAzC;AACD;;AACD,SAAKN,OAAO,CAACqB,yBAAb;AAAwC;AAEtC,eAAOf,KAAP;AACD;;AACD,SAAKN,OAAO,CAACsB,mBAAb;AAAkC;AAChCpB,QAAAA,EAAE,CAACQ,UAAH,CAAc,QAAd,EACCa,KADD,CACO,IADP,EACY,IADZ,EACiBhB,MAAM,CAACa,OADxB,EAEGT,GAFH,GAGGC,IAHH,CAGQC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,UAAAA,MAAM,CAACW,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACwB,2BAAT,EAAqC,GAAGV,IAAxC,CAA/B;AACD,SANH;AAOA,eAAOR,KAAP;AACD;;AACD,SAAKN,OAAO,CAACwB,2BAAb;AAA0C;AACxC,eAAOjB,MAAM,CAACa,OAAP,GAAiBb,MAAM,CAACa,OAAxB,GAAkCd,KAAzC;AACD;;AACD,SAAKN,OAAO,CAACyB,wBAAb;AAAuC;AACrC,eAAOnB,KAAP;AACD;;AACD,SAAKN,OAAO,CAAC0B,qBAAb;AAAmC;AACjCC,QAAAA,OAAO,CAACC,GAAR,CAAYrB,MAAZ;;AACA,YAAIsB,SAAS,GAAG1B,CAAC,CAAC2B,SAAF,CAAYvB,MAAM,CAACa,OAAnB,CAAhB;;AACA,YAAIW,GAAG,GACPJ,OAAO,CAACC,GAAR,CAAYC,SAAS,CAACG,EAAtB,CADA;;AAGA9B,QAAAA,EAAE,CAACQ,UAAH,CAAc,QAAd,EACCa,KADD,CACO,IADP,EACY,IADZ,EACiBM,SAAS,CAACG,EAD3B,EAEGrB,GAFH,GAGGC,IAHH,CAGQC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAI;AACzCc,YAAAA,GAAG,GAAGd,GAAG,CAACe,EAAV;AACA,mBAAOf,GAAG,CAACH,IAAJ,EAAP;AAAkB,WAFP,CAAb;AAGEmB,UAAAA,MAAM,CAACL,GAAP,CAAWd,IAAX;AACHZ,UAAAA,EAAE,CAACQ,UAAH,CAAc,QAAd,EAAwBO,GAAxB,CAA4Bc,GAA5B,EACEG,MADF,CACSL,SADT,EACoBjB,IADpB,CACyB,MAAI;AAC1BL,YAAAA,MAAM,CAACW,aAAP,CAAqBjB,UAAU,CAACD,OAAO,CAACmC,6BAAT,EAAuCN,SAAvC,CAA/B;AACD,WAHF;AAIA,SAZH;AAaA,eAAOvB,KAAP;AACD;;AACD,SAAKN,OAAO,CAACmC,6BAAb;AAA2C;AACzC,eAAO5B,MAAM,CAACa,OAAd;AACD;;AACD;AACE,aAAO,EACL,GAAGd;AADE,OAAP;AA5DJ;AAgED","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\"\nconst initialState = {};\nexport default function orderReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_ORDER_LOCATIONS: {\n      db.collection(\"orders\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_ORDER_LOCATIONS_SUCCESS,data))\n      });\n\n        return state\n      }\n      case ACTIONS.LOAD_ORDER_LOCATIONS_SUCCESS: {\n        return action.payload ? action.payload : state\n      }\n      case ACTIONS.LOAD_ORDER_LOCATIONS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_ORDER_LOCATION: {\n        db.collection(\"orders\")\n        .where(\"id\",'==',action.payload)\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_ORDER_LOCATION_SUCCESS,...data))\n          });\n        return state\n      }\n      case ACTIONS.LOAD_ORDER_LOCATION_SUCCESS: {\n        return action.payload ? action.payload : state\n      }\n      case ACTIONS.LOAD_ORDER_LOCATION_FAIL: {\n        return state\n      }\n      case ACTIONS.UPDATE_ORDER_LOCATION:{\n        console.log(action)\n        let stateCopy = _.cloneDeep(action.payload)\n        let _id = \n        console.log(stateCopy.id)\n\n        db.collection(\"orders\")\n        .where(\"id\",'==',stateCopy.id)\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => {\n              _id = doc.id\n              return doc.data()});\n              consle.log(data)\n           db.collection(\"orders\").doc(_id)\n            .update(stateCopy).then(()=>{\n              action.asyncDispatch(mainAction(ACTIONS.UPDATE_ORDER_LOCATION_SUCCESS,stateCopy))\n            });\n          });\n        return state\n      }\n      case ACTIONS.UPDATE_ORDER_LOCATION_SUCCESS:{\n        return action.payload\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}