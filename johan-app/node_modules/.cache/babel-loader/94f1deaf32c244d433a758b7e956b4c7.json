{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, storage } from \"../../firebase\";\nconst initialState = {\n  gallery: {},\n  galleries: [],\n  photos: []\n};\nexport default function galleryReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_GALLERY:\n      {\n        db.collection(\"photoGalleryImages\") // .where(\"galleryId\", \"==\", action.payload)\n        .get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          console.log(data);\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_GALLERY_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_GALLERY_SUCCESS:\n      {\n        state.gallery = action.payload;\n        return state;\n      }\n\n    case ACTIONS.LOAD_GALLERY_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_GALLERIES:\n      {\n        db.collection(\"photoGallery\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          console.log(data);\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_GALLERIES_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_GALLERIES_SUCCESS:\n      {\n        state.gallery = { ...action.payload[0]\n        };\n        return state;\n      }\n\n    case ACTIONS.LOAD_GALLERIES_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_GALLERY:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_GALLERY_SUCCESS:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_GALLERY_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_GALLERY:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_GALLERY_SUCCESS:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_GALLERY_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.INSERT_GALLERY_IMAGE:\n      {\n        let postImageRef = storage.ref('gallery/' + action.payload.name).put(action.payload.file);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('gallery/').child(action.payload.name).getDownloadURL().then(url => {\n            console.log(url);\n            action.asyncDispatch(mainAction(ACTIONS.INSERT_GALLERY_IMAGE_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.INSERT_GALLERY_IMAGE_SUCCESS:\n      {\n        let image = {\n          id: action.payload.id,\n          date: action.payload.date,\n          caption: action.payload.caption,\n          // file: action.payload.path,\n          name: action.payload.name\n        };\n        db.collection(\"photoGalleryImages\").doc().set(image).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_GALLERY, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.INSERT_GALLERY_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_GALLERY_IMAGE:\n      {\n        db.collection(\"photoGalleryImages\").where(\"id\", \"==\", action.payload.ID).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_GALLERY_IMAGE_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_GALLERY_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('gallery/' + action.payload.name);\n        postImageRef.delete().then(() => console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_GALLERY, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_GALLERY_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_GALLERY_IMAGE:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_GALLERY_IMAGE_SUCCESS:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_GALLERY_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/gallery.reducer.js"],"names":["ACTIONS","mainAction","db","storage","initialState","gallery","galleries","photos","galleryReducer","state","action","type","LOAD_GALLERY","collection","get","then","querySnapshot","data","docs","map","doc","console","log","asyncDispatch","LOAD_GALLERY_SUCCESS","payload","LOAD_GALLERY_FAIL","LOAD_GALLERIES","LOAD_GALLERIES_SUCCESS","LOAD_GALLERIES_FAIL","DELETE_GALLERY","DELETE_GALLERY_SUCCESS","DELETE_GALLERY_FAIL","UPDATE_GALLERY","UPDATE_GALLERY_SUCCESS","UPDATE_GALLERY_FAIL","INSERT_GALLERY_IMAGE","postImageRef","ref","name","put","file","on","snapshot","error","child","getDownloadURL","url","INSERT_GALLERY_IMAGE_SUCCESS","image","id","date","caption","set","INSERT_GALLERY_IMAGE_FAIL","DELETE_GALLERY_IMAGE","where","ID","forEach","delete","DELETE_GALLERY_IMAGE_SUCCESS","DELETE_GALLERY_IMAGE_FAIL","UPDATE_GALLERY_IMAGE","UPDATE_GALLERY_IMAGE_SUCCESS","UPDATE_GALLERY_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import {\n    ACTIONS\n} from 'redux/actions/types.js'\nimport {\n    mainAction\n} from \"redux/actions/index.actions\"\nimport {\n    db,\n    storage\n} from \"../../firebase\";\nconst initialState = {\n    gallery: {},\n    galleries:[],\n    photos: []\n};\nexport default function galleryReducer(state = initialState, action) {\n    switch (action.type) {\n        case ACTIONS.LOAD_GALLERY: {\n            db.collection(\"photoGalleryImages\")\n               // .where(\"galleryId\", \"==\", action.payload)\n                .get()\n                .then(querySnapshot => {\n                    const data = querySnapshot.docs.map(doc => doc.data());\n                    console.log(data)\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_GALLERY_SUCCESS, data))\n                });\n            return state\n        }\n        case ACTIONS.LOAD_GALLERY_SUCCESS: {\n            state.gallery = action.payload\n            return state\n        }\n\n        case ACTIONS.LOAD_GALLERY_FAIL: {\n\n            return state\n        }\n        case ACTIONS.LOAD_GALLERIES: {\n            db.collection(\"photoGallery\")\n                .get()\n                .then(querySnapshot => {\n                    const data = querySnapshot.docs.map(doc => doc.data());\n                    console.log(data)\n                    action.asyncDispatch(mainAction(ACTIONS.LOAD_GALLERIES_SUCCESS, data))\n                });\n            return state\n        }\n        case ACTIONS.LOAD_GALLERIES_SUCCESS: {\n            state.gallery = {...action.payload[0]}\n            return state\n        }\n\n        case ACTIONS.LOAD_GALLERIES_FAIL: {\n\n            return state\n        }\n\n        case ACTIONS.DELETE_GALLERY: {\n\n            return state\n        }\n\n        case ACTIONS.DELETE_GALLERY_SUCCESS: {\n\n            return state\n        }\n\n        case ACTIONS.DELETE_GALLERY_FAIL: {\n\n            return state\n        }\n\n\n        case ACTIONS.UPDATE_GALLERY: {\n\n            return state\n        }\n\n        case ACTIONS.UPDATE_GALLERY_SUCCESS: {\n\n            return state\n        }\n\n        case ACTIONS.UPDATE_GALLERY_FAIL: {\n\n            return state\n        }\n\n\n        case ACTIONS.INSERT_GALLERY_IMAGE: {\n\n            \n              let postImageRef = storage.ref('gallery/'+action.payload.name).put(action.payload.file);\n              postImageRef.on('state_changed',(snapshot)=>{\n                //progress function\n              },(error)=>{\n                //error\n                console.log(error)\n              },()=>{\n                //complete\n                storage.ref('gallery/').child(action.payload.name).getDownloadURL().then(url=>{\n                  console.log(url)\n                  action.asyncDispatch(mainAction(ACTIONS.INSERT_GALLERY_IMAGE_SUCCESS,action.payload))\n                })\n              })\n       \n            return state\n        }\n\n        case ACTIONS.INSERT_GALLERY_IMAGE_SUCCESS: {\n            let image = {\n                id: action.payload.id,\n                date:action.payload.date,\n                caption: action.payload.caption,\n               // file: action.payload.path,\n                name:action.payload.name\n              }\n            db.collection(\"photoGalleryImages\")\n            .doc()\n            .set(image)\n            .then(() => {\n                action.asyncDispatch(mainAction(ACTIONS.LOAD_GALLERY,[]))\n            });\n            return state\n        }\n\n        case ACTIONS.INSERT_GALLERY_IMAGE_FAIL: {\n\n            return state\n        }\n\n        case ACTIONS.DELETE_GALLERY_IMAGE: {\n            db.collection(\"photoGalleryImages\")\n            .where(\"id\",\"==\",action.payload.ID)\n            .get()\n            .then((querySnapshot)=>{\n                querySnapshot.forEach((doc)=> doc.ref.delete())\n                action.asyncDispatch(mainAction(ACTIONS.DELETE_GALLERY_IMAGE_SUCCESS, action.payload))\n            })\n            return state\n        }\n\n        case ACTIONS.DELETE_GALLERY_IMAGE_SUCCESS: {\n        let postImageRef = storage.ref('gallery/'+action.payload.name)\n        postImageRef.delete().then(()=>console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_GALLERY,[]))\n\n            return state\n        }\n\n        case ACTIONS.DELETE_GALLERY_IMAGE_FAIL: {\n\n            return state\n        }\n\n\n        case ACTIONS.UPDATE_GALLERY_IMAGE: {\n\n            return state\n        }\n\n        case ACTIONS.UPDATE_GALLERY_IMAGE_SUCCESS: {\n\n            return state\n        }\n\n        case ACTIONS.UPDATE_GALLERY_IMAGE_FAIL: {\n\n            return state\n        }\n\n\n        default:\n            return state\n\n    }\n}"]},"metadata":{},"sourceType":"module"}