{"ast":null,"code":"import _objectSpread from\"/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ACTIONS}from'redux/actions/types.js';import{mainAction}from\"redux/actions/index.actions\";import _ from\"lodash\";var initialState={};export default function agendaReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.LOAD_CD_AGENDA:{var stateCopy=_.cloneDeep(state);fetch('http://localhost:3001/api/loadAgendas').then(function(data){return data.json();}).then(function(res){action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data));stateCopy.agendaTotal=res.data.length;}).catch(function(err){return action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err));});return stateCopy;}case ACTIONS.LOAD_CD_AGENDA_SUCCESS:{var _stateCopy=[];_.orderBy(action.payload,['year','month','day'],['desc','desc','desc']).map(function(agenda,index){if(index<=300)return _stateCopy.push(agenda);});_stateCopy.total=action.payload.length;return _stateCopy;}case ACTIONS.LOAD_CD_AGENDA_FAIL:{return state;}case ACTIONS.LOAD_AGENDAS:{var d=new Date();var day=d.getDay();var month=d.getMonth()+1;var year=d.getFullYear();console.log('http://localhost:3001/api/loadfilteredAgendas/'+action.payload.skip+\"/\"+action.payload.limit+\"/\"+year+\"/\"+month);fetch('http://localhost:3001/api/loadfilteredAgendas/'+action.payload.skip+\"/\"+action.payload.limit+\"/\"+year+\"/\"+month).then(function(data){return data.json();}).then(function(res){console.log(res.data);action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,res.data));}).catch(function(err){return action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_FAIL,err));});return state;}case ACTIONS.LOAD_AGENDAS_SUCCESS:{var _d=new Date();var _day=_d.getDate();var _stateCopy2=[];action.payload.map(function(agenda){// if(agenda.day > day)\nreturn _stateCopy2.push(agenda);});return _stateCopy2;}case ACTIONS.LOAD_AGENDAS_FAIL:{return state;}default:return _objectSpread({},state);}}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","cloneDeep","fetch","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","agendaTotal","length","catch","err","LOAD_CD_AGENDA_FAIL","orderBy","payload","map","agenda","index","push","total","LOAD_AGENDAS","d","Date","day","getDay","month","getMonth","year","getFullYear","console","log","skip","limit","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","getDate"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport _ from \"lodash\"\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n        let stateCopy = _.cloneDeep(state)\n       fetch('http://localhost:3001/api/loadAgendas')\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n          stateCopy.agendaTotal = res.data.length\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n       let stateCopy = []\n\n       _.orderBy(action.payload,['year','month','day'],['desc','desc','desc']).map((agenda,index)=>{\n         if(index <= 300)\n         return stateCopy.push(agenda)\n       })\n      stateCopy.total = action.payload.length;\n      \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let d = new Date();\n        let day = d.getDay();\n        let month = d.getMonth() + 1\n        let year = d.getFullYear();\n        console.log('http://localhost:3001/api/loadfilteredAgendas/'+action.payload.skip+\"/\"+action.payload.limit+\"/\"+year+\"/\"+month)\n        fetch ('http://localhost:3001/api/loadfilteredAgendas/'+action.payload.skip+\"/\"+action.payload.limit+\"/\"+year+\"/\"+month)\n        .then((data)=> data.json())\n        .then((res) => {\n          console.log(res.data)\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,res.data))\n        \n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_FAIL,err)))\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let d = new Date();\n        let day = d.getDate();\n        let stateCopy = []\n        action.payload.map(agenda=>{\n         // if(agenda.day > day)\n          return stateCopy.push(agenda)\n        })\n        return stateCopy\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}