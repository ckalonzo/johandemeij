{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst http2 = require(\"http2\");\n\nconst constants_1 = require(\"./constants\");\n\nconst metadata_1 = require(\"./metadata\");\n\nconst stream_decoder_1 = require(\"./stream-decoder\");\n\nconst logging = require(\"./logging\");\n\nconst constants_2 = require(\"./constants\");\n\nconst TRACER_NAME = 'call_stream';\nconst {\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE,\n  NGHTTP2_CANCEL\n} = http2.constants;\n\nfunction isInterceptingListener(listener) {\n  return listener.onReceiveMetadata !== undefined && listener.onReceiveMetadata.length === 1;\n}\n\nexports.isInterceptingListener = isInterceptingListener;\n\nclass InterceptingListenerImpl {\n  constructor(listener, nextListener) {\n    this.listener = listener;\n    this.nextListener = nextListener;\n    this.processingMessage = false;\n    this.pendingStatus = null;\n  }\n\n  onReceiveMetadata(metadata) {\n    this.listener.onReceiveMetadata(metadata, metadata => {\n      this.nextListener.onReceiveMetadata(metadata);\n    });\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  onReceiveMessage(message) {\n    /* If this listener processes messages asynchronously, the last message may\n     * be reordered with respect to the status */\n    this.processingMessage = true;\n    this.listener.onReceiveMessage(message, msg => {\n      this.processingMessage = false;\n      this.nextListener.onReceiveMessage(msg);\n\n      if (this.pendingStatus) {\n        this.nextListener.onReceiveStatus(this.pendingStatus);\n      }\n    });\n  }\n\n  onReceiveStatus(status) {\n    this.listener.onReceiveStatus(status, processedStatus => {\n      if (this.processingMessage) {\n        this.pendingStatus = processedStatus;\n      } else {\n        this.nextListener.onReceiveStatus(processedStatus);\n      }\n    });\n  }\n\n}\n\nexports.InterceptingListenerImpl = InterceptingListenerImpl;\n\nclass Http2CallStream {\n  constructor(methodName, channel, options, filterStackFactory, channelCallCredentials, callNumber) {\n    this.methodName = methodName;\n    this.channel = channel;\n    this.options = options;\n    this.channelCallCredentials = channelCallCredentials;\n    this.callNumber = callNumber;\n    this.http2Stream = null;\n    this.pendingRead = false;\n    this.isWriteFilterPending = false;\n    this.pendingWrite = null;\n    this.pendingWriteCallback = null;\n    this.writesClosed = false;\n    this.decoder = new stream_decoder_1.StreamDecoder();\n    this.isReadFilterPending = false;\n    this.canPush = false;\n    /**\n     * Indicates that an 'end' event has come from the http2 stream, so there\n     * will be no more data events.\n     */\n\n    this.readsClosed = false;\n    this.statusOutput = false;\n    this.unpushedReadMessages = [];\n    this.unfilteredReadMessages = []; // Status code mapped from :status. To be used if grpc-status is not received\n\n    this.mappedStatusCode = constants_1.Status.UNKNOWN; // This is populated (non-null) if and only if the call has ended\n\n    this.finalStatus = null;\n    this.subchannel = null;\n    this.listener = null;\n    this.filterStack = filterStackFactory.createFilter(this);\n    this.credentials = channelCallCredentials;\n\n    this.disconnectListener = () => {\n      this.endCall({\n        code: constants_1.Status.UNAVAILABLE,\n        details: 'Connection dropped',\n        metadata: new metadata_1.Metadata()\n      });\n    };\n  }\n\n  outputStatus() {\n    /* Precondition: this.finalStatus !== null */\n    if (!this.statusOutput) {\n      this.statusOutput = true;\n      const filteredStatus = this.filterStack.receiveTrailers(this.finalStatus);\n      this.listener.onReceiveStatus(filteredStatus);\n\n      if (this.subchannel) {\n        this.subchannel.callUnref();\n        this.subchannel.removeDisconnectListener(this.disconnectListener);\n      }\n    }\n  }\n\n  trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n  }\n  /**\n   * On first call, emits a 'status' event with the given StatusObject.\n   * Subsequent calls are no-ops.\n   * @param status The status of the call.\n   */\n\n\n  endCall(status) {\n    this.destroyHttp2Stream();\n    /* If the status is OK and a new status comes in (e.g. from a\n     * deserialization failure), that new status takes priority */\n\n    if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\n      this.trace('ended with status: code=' + status.code + ' details=\"' + status.details + '\"');\n      this.finalStatus = status;\n      this.maybeOutputStatus();\n    }\n  }\n\n  maybeOutputStatus() {\n    if (this.finalStatus !== null) {\n      /* The combination check of readsClosed and that the two message buffer\n       * arrays are empty checks that there all incoming data has been fully\n       * processed */\n      if (this.finalStatus.code !== constants_1.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && this.unfilteredReadMessages.length === 0 && !this.isReadFilterPending) {\n        this.outputStatus();\n      }\n    }\n  }\n\n  push(message) {\n    this.trace('pushing to reader message of length ' + (message instanceof Buffer ? message.length : null));\n    this.canPush = false;\n    process.nextTick(() => {\n      this.listener.onReceiveMessage(message);\n      this.maybeOutputStatus();\n    });\n  }\n\n  handleFilterError(error) {\n    this.cancelWithStatus(constants_1.Status.INTERNAL, error.message);\n  }\n\n  handleFilteredRead(message) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n\n    this.isReadFilterPending = false;\n\n    if (this.canPush) {\n      this.http2Stream.pause();\n      this.push(message);\n    } else {\n      this.trace('unpushedReadMessages.push message of length ' + message.length);\n      this.unpushedReadMessages.push(message);\n    }\n\n    if (this.unfilteredReadMessages.length > 0) {\n      /* nextMessage is guaranteed not to be undefined because\n         unfilteredReadMessages is non-empty */\n      const nextMessage = this.unfilteredReadMessages.shift();\n      this.filterReceivedMessage(nextMessage);\n    }\n  }\n\n  filterReceivedMessage(framedMessage) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n\n    this.trace('filterReceivedMessage of length ' + framedMessage.length);\n    this.isReadFilterPending = true;\n    this.filterStack.receiveMessage(Promise.resolve(framedMessage)).then(this.handleFilteredRead.bind(this), this.handleFilterError.bind(this));\n  }\n\n  tryPush(messageBytes) {\n    if (this.isReadFilterPending) {\n      this.trace('unfilteredReadMessages.push message of length ' + (messageBytes && messageBytes.length));\n      this.unfilteredReadMessages.push(messageBytes);\n    } else {\n      this.filterReceivedMessage(messageBytes);\n    }\n  }\n\n  handleTrailers(headers) {\n    let headersString = '';\n\n    for (const header of Object.keys(headers)) {\n      headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n    }\n\n    this.trace('Received server trailers:\\n' + headersString);\n    let metadata;\n\n    try {\n      metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n    } catch (e) {\n      metadata = new metadata_1.Metadata();\n    }\n\n    const metadataMap = metadata.getMap();\n    let code = this.mappedStatusCode;\n\n    if (code === constants_1.Status.UNKNOWN && typeof metadataMap['grpc-status'] === 'string') {\n      const receivedStatus = Number(metadataMap['grpc-status']);\n\n      if (receivedStatus in constants_1.Status) {\n        code = receivedStatus;\n        this.trace('received status code ' + receivedStatus + ' from server');\n      }\n\n      metadata.remove('grpc-status');\n    }\n\n    let details = '';\n\n    if (typeof metadataMap['grpc-message'] === 'string') {\n      details = decodeURI(metadataMap['grpc-message']);\n      metadata.remove('grpc-message');\n      this.trace('received status details string \"' + details + '\" from server');\n    }\n\n    const status = {\n      code,\n      details,\n      metadata\n    };\n    let finalStatus;\n\n    try {\n      // Attempt to assign final status.\n      finalStatus = this.filterStack.receiveTrailers(status);\n    } catch (error) {\n      // This is a no-op if the call was already ended when handling headers.\n      this.endCall({\n        code: constants_1.Status.INTERNAL,\n        details: 'Failed to process received status',\n        metadata: new metadata_1.Metadata()\n      });\n      return;\n    } // This is a no-op if the call was already ended when handling headers.\n\n\n    this.endCall(finalStatus);\n  }\n\n  attachHttp2Stream(stream, subchannel) {\n    if (this.finalStatus !== null) {\n      stream.close(NGHTTP2_CANCEL);\n    } else {\n      this.trace('attachHttp2Stream from subchannel ' + subchannel.getAddress());\n      this.http2Stream = stream;\n      this.subchannel = subchannel;\n      subchannel.addDisconnectListener(this.disconnectListener);\n      subchannel.callRef();\n      stream.on('response', (headers, flags) => {\n        let headersString = '';\n\n        for (const header of Object.keys(headers)) {\n          headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n        }\n\n        this.trace('Received server headers:\\n' + headersString);\n\n        switch (headers[':status']) {\n          // TODO(murgatroid99): handle 100 and 101\n          case 400:\n            this.mappedStatusCode = constants_1.Status.INTERNAL;\n            break;\n\n          case 401:\n            this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\n            break;\n\n          case 403:\n            this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\n            break;\n\n          case 404:\n            this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\n            break;\n\n          case 429:\n          case 502:\n          case 503:\n          case 504:\n            this.mappedStatusCode = constants_1.Status.UNAVAILABLE;\n            break;\n\n          default:\n            this.mappedStatusCode = constants_1.Status.UNKNOWN;\n        }\n\n        if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n          this.handleTrailers(headers);\n        } else {\n          let metadata;\n\n          try {\n            metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n          } catch (error) {\n            this.endCall({\n              code: constants_1.Status.UNKNOWN,\n              details: error.message,\n              metadata: new metadata_1.Metadata()\n            });\n            return;\n          }\n\n          try {\n            const finalMetadata = this.filterStack.receiveMetadata(metadata);\n            this.listener.onReceiveMetadata(finalMetadata);\n          } catch (error) {\n            this.destroyHttp2Stream();\n            this.endCall({\n              code: constants_1.Status.UNKNOWN,\n              details: error.message,\n              metadata: new metadata_1.Metadata()\n            });\n          }\n        }\n      });\n      stream.on('trailers', this.handleTrailers.bind(this));\n      stream.on('data', data => {\n        this.trace('receive HTTP/2 data frame of length ' + data.length);\n        const messages = this.decoder.write(data);\n\n        for (const message of messages) {\n          this.trace('parsed message of length ' + message.length);\n          this.tryPush(message);\n        }\n      });\n      stream.on('end', () => {\n        this.readsClosed = true;\n        this.maybeOutputStatus();\n      });\n      stream.on('close', () => {\n        var _a;\n\n        this.trace('HTTP/2 stream closed with code ' + stream.rstCode);\n        /* If we have a final status with an OK status code, that means that\n         * we have received all of the messages and we have processed the\n         * trailers and the call completed successfully, so it doesn't matter\n         * how the stream ends after that */\n\n        if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n          return;\n        }\n\n        let code;\n        let details = '';\n\n        switch (stream.rstCode) {\n          case http2.constants.NGHTTP2_NO_ERROR:\n            /* If we get a NO_ERROR code and we already have a status, the\n             * stream completed properly and we just haven't fully processed\n             * it yet */\n            if (this.finalStatus !== null) {\n              return;\n            }\n\n            code = constants_1.Status.INTERNAL;\n            details = `Received RST_STREAM with code ${stream.rstCode}`;\n            break;\n\n          case http2.constants.NGHTTP2_REFUSED_STREAM:\n            code = constants_1.Status.UNAVAILABLE;\n            details = 'Stream refused by server';\n            break;\n\n          case http2.constants.NGHTTP2_CANCEL:\n            code = constants_1.Status.CANCELLED;\n            details = 'Call cancelled';\n            break;\n\n          case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n            code = constants_1.Status.RESOURCE_EXHAUSTED;\n            details = 'Bandwidth exhausted';\n            break;\n\n          case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n            code = constants_1.Status.PERMISSION_DENIED;\n            details = 'Protocol not secure enough';\n            break;\n\n          default:\n            code = constants_1.Status.INTERNAL;\n            details = `Received RST_STREAM with code ${stream.rstCode}`;\n        } // This is a no-op if trailers were received at all.\n        // This is OK, because status codes emitted here correspond to more\n        // catastrophic issues that prevent us from receiving trailers in the\n        // first place.\n\n\n        this.endCall({\n          code,\n          details,\n          metadata: new metadata_1.Metadata()\n        });\n      });\n      stream.on('error', err => {\n        /* We need an error handler here to stop \"Uncaught Error\" exceptions\n         * from bubbling up. However, errors here should all correspond to\n         * \"close\" events, where we will handle the error more granularly */\n      });\n\n      if (!this.pendingRead) {\n        stream.pause();\n      }\n\n      if (this.pendingWrite) {\n        if (!this.pendingWriteCallback) {\n          throw new Error('Invalid state in write handling code');\n        }\n\n        this.trace('sending data chunk of length ' + this.pendingWrite.length + ' (deferred)');\n        stream.write(this.pendingWrite, this.pendingWriteCallback);\n      }\n\n      this.maybeCloseWrites();\n    }\n  }\n\n  start(metadata, listener) {\n    this.trace('Sending metadata');\n    this.listener = listener;\n\n    this.channel._startCallStream(this, metadata);\n  }\n\n  destroyHttp2Stream() {\n    var _a; // The http2 stream could already have been destroyed if cancelWithStatus\n    // is called in response to an internal http2 error.\n\n\n    if (this.http2Stream !== null && !this.http2Stream.destroyed) {\n      /* If the call has ended with an OK status, communicate that when closing\n       * the stream, partly to avoid a situation in which we detect an error\n       * RST_STREAM as a result after we have the status */\n      let code;\n\n      if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n        code = http2.constants.NGHTTP2_NO_ERROR;\n      } else {\n        code = http2.constants.NGHTTP2_CANCEL;\n      }\n\n      this.http2Stream.close(code);\n    }\n  }\n\n  cancelWithStatus(status, details) {\n    this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n    this.destroyHttp2Stream();\n    this.endCall({\n      code: status,\n      details,\n      metadata: new metadata_1.Metadata()\n    });\n  }\n\n  getDeadline() {\n    return this.options.deadline;\n  }\n\n  getCredentials() {\n    return this.credentials;\n  }\n\n  setCredentials(credentials) {\n    this.credentials = this.channelCallCredentials.compose(credentials);\n  }\n\n  getStatus() {\n    return this.finalStatus;\n  }\n\n  getPeer() {\n    throw new Error('Not yet implemented');\n  }\n\n  getMethod() {\n    return this.methodName;\n  }\n\n  getHost() {\n    return this.options.host;\n  }\n\n  startRead() {\n    /* If the stream has ended with an error, we should not emit any more\n     * messages and we should communicate that the stream has ended */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.readsClosed = true;\n      this.maybeOutputStatus();\n      return;\n    }\n\n    this.canPush = true;\n\n    if (this.http2Stream === null) {\n      this.pendingRead = true;\n    } else {\n      if (this.unpushedReadMessages.length > 0) {\n        const nextMessage = this.unpushedReadMessages.shift();\n        this.push(nextMessage);\n        return;\n      }\n      /* Only resume reading from the http2Stream if we don't have any pending\n       * messages to emit */\n\n\n      this.http2Stream.resume();\n    }\n  }\n\n  maybeCloseWrites() {\n    if (this.writesClosed && !this.isWriteFilterPending && this.http2Stream !== null) {\n      this.trace('calling end() on HTTP/2 stream');\n      this.http2Stream.end();\n    }\n  }\n\n  sendMessageWithContext(context, message) {\n    var _a;\n\n    this.trace('write() called with message of length ' + message.length);\n    const writeObj = {\n      message,\n      flags: context.flags\n    };\n    const cb = (_a = context.callback) !== null && _a !== void 0 ? _a : () => {};\n    this.isWriteFilterPending = true;\n    this.filterStack.sendMessage(Promise.resolve(writeObj)).then(message => {\n      this.isWriteFilterPending = false;\n\n      if (this.http2Stream === null) {\n        this.trace('deferring writing data chunk of length ' + message.message.length);\n        this.pendingWrite = message.message;\n        this.pendingWriteCallback = cb;\n      } else {\n        this.trace('sending data chunk of length ' + message.message.length);\n        this.http2Stream.write(message.message, cb);\n        this.maybeCloseWrites();\n      }\n    }, this.handleFilterError.bind(this));\n  }\n\n  halfClose() {\n    this.trace('end() called');\n    this.writesClosed = true;\n    this.maybeCloseWrites();\n  }\n\n}\n\nexports.Http2CallStream = Http2CallStream;","map":{"version":3,"sources":["../../src/call-stream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http2 = require(\"http2\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst stream_decoder_1 = require(\"./stream-decoder\");\nconst logging = require(\"./logging\");\nconst constants_2 = require(\"./constants\");\nconst TRACER_NAME = 'call_stream';\nconst { HTTP2_HEADER_STATUS, HTTP2_HEADER_CONTENT_TYPE, NGHTTP2_CANCEL, } = http2.constants;\nfunction isInterceptingListener(listener) {\n    return (listener.onReceiveMetadata !== undefined &&\n        listener.onReceiveMetadata.length === 1);\n}\nexports.isInterceptingListener = isInterceptingListener;\nclass InterceptingListenerImpl {\n    constructor(listener, nextListener) {\n        this.listener = listener;\n        this.nextListener = nextListener;\n        this.processingMessage = false;\n        this.pendingStatus = null;\n    }\n    onReceiveMetadata(metadata) {\n        this.listener.onReceiveMetadata(metadata, (metadata) => {\n            this.nextListener.onReceiveMetadata(metadata);\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onReceiveMessage(message) {\n        /* If this listener processes messages asynchronously, the last message may\n         * be reordered with respect to the status */\n        this.processingMessage = true;\n        this.listener.onReceiveMessage(message, (msg) => {\n            this.processingMessage = false;\n            this.nextListener.onReceiveMessage(msg);\n            if (this.pendingStatus) {\n                this.nextListener.onReceiveStatus(this.pendingStatus);\n            }\n        });\n    }\n    onReceiveStatus(status) {\n        this.listener.onReceiveStatus(status, (processedStatus) => {\n            if (this.processingMessage) {\n                this.pendingStatus = processedStatus;\n            }\n            else {\n                this.nextListener.onReceiveStatus(processedStatus);\n            }\n        });\n    }\n}\nexports.InterceptingListenerImpl = InterceptingListenerImpl;\nclass Http2CallStream {\n    constructor(methodName, channel, options, filterStackFactory, channelCallCredentials, callNumber) {\n        this.methodName = methodName;\n        this.channel = channel;\n        this.options = options;\n        this.channelCallCredentials = channelCallCredentials;\n        this.callNumber = callNumber;\n        this.http2Stream = null;\n        this.pendingRead = false;\n        this.isWriteFilterPending = false;\n        this.pendingWrite = null;\n        this.pendingWriteCallback = null;\n        this.writesClosed = false;\n        this.decoder = new stream_decoder_1.StreamDecoder();\n        this.isReadFilterPending = false;\n        this.canPush = false;\n        /**\n         * Indicates that an 'end' event has come from the http2 stream, so there\n         * will be no more data events.\n         */\n        this.readsClosed = false;\n        this.statusOutput = false;\n        this.unpushedReadMessages = [];\n        this.unfilteredReadMessages = [];\n        // Status code mapped from :status. To be used if grpc-status is not received\n        this.mappedStatusCode = constants_1.Status.UNKNOWN;\n        // This is populated (non-null) if and only if the call has ended\n        this.finalStatus = null;\n        this.subchannel = null;\n        this.listener = null;\n        this.filterStack = filterStackFactory.createFilter(this);\n        this.credentials = channelCallCredentials;\n        this.disconnectListener = () => {\n            this.endCall({\n                code: constants_1.Status.UNAVAILABLE,\n                details: 'Connection dropped',\n                metadata: new metadata_1.Metadata(),\n            });\n        };\n    }\n    outputStatus() {\n        /* Precondition: this.finalStatus !== null */\n        if (!this.statusOutput) {\n            this.statusOutput = true;\n            const filteredStatus = this.filterStack.receiveTrailers(this.finalStatus);\n            this.listener.onReceiveStatus(filteredStatus);\n            if (this.subchannel) {\n                this.subchannel.callUnref();\n                this.subchannel.removeDisconnectListener(this.disconnectListener);\n            }\n        }\n    }\n    trace(text) {\n        logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n    }\n    /**\n     * On first call, emits a 'status' event with the given StatusObject.\n     * Subsequent calls are no-ops.\n     * @param status The status of the call.\n     */\n    endCall(status) {\n        this.destroyHttp2Stream();\n        /* If the status is OK and a new status comes in (e.g. from a\n         * deserialization failure), that new status takes priority */\n        if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\n            this.trace('ended with status: code=' +\n                status.code +\n                ' details=\"' +\n                status.details +\n                '\"');\n            this.finalStatus = status;\n            this.maybeOutputStatus();\n        }\n    }\n    maybeOutputStatus() {\n        if (this.finalStatus !== null) {\n            /* The combination check of readsClosed and that the two message buffer\n             * arrays are empty checks that there all incoming data has been fully\n             * processed */\n            if (this.finalStatus.code !== constants_1.Status.OK ||\n                (this.readsClosed &&\n                    this.unpushedReadMessages.length === 0 &&\n                    this.unfilteredReadMessages.length === 0 &&\n                    !this.isReadFilterPending)) {\n                this.outputStatus();\n            }\n        }\n    }\n    push(message) {\n        this.trace('pushing to reader message of length ' +\n            (message instanceof Buffer ? message.length : null));\n        this.canPush = false;\n        process.nextTick(() => {\n            this.listener.onReceiveMessage(message);\n            this.maybeOutputStatus();\n        });\n    }\n    handleFilterError(error) {\n        this.cancelWithStatus(constants_1.Status.INTERNAL, error.message);\n    }\n    handleFilteredRead(message) {\n        /* If we the call has already ended with an error, we don't want to do\n         * anything with this message. Dropping it on the floor is correct\n         * behavior */\n        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n            this.maybeOutputStatus();\n            return;\n        }\n        this.isReadFilterPending = false;\n        if (this.canPush) {\n            this.http2Stream.pause();\n            this.push(message);\n        }\n        else {\n            this.trace('unpushedReadMessages.push message of length ' + message.length);\n            this.unpushedReadMessages.push(message);\n        }\n        if (this.unfilteredReadMessages.length > 0) {\n            /* nextMessage is guaranteed not to be undefined because\n               unfilteredReadMessages is non-empty */\n            const nextMessage = this.unfilteredReadMessages.shift();\n            this.filterReceivedMessage(nextMessage);\n        }\n    }\n    filterReceivedMessage(framedMessage) {\n        /* If we the call has already ended with an error, we don't want to do\n         * anything with this message. Dropping it on the floor is correct\n         * behavior */\n        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n            this.maybeOutputStatus();\n            return;\n        }\n        this.trace('filterReceivedMessage of length ' + framedMessage.length);\n        this.isReadFilterPending = true;\n        this.filterStack\n            .receiveMessage(Promise.resolve(framedMessage))\n            .then(this.handleFilteredRead.bind(this), this.handleFilterError.bind(this));\n    }\n    tryPush(messageBytes) {\n        if (this.isReadFilterPending) {\n            this.trace('unfilteredReadMessages.push message of length ' +\n                (messageBytes && messageBytes.length));\n            this.unfilteredReadMessages.push(messageBytes);\n        }\n        else {\n            this.filterReceivedMessage(messageBytes);\n        }\n    }\n    handleTrailers(headers) {\n        let headersString = '';\n        for (const header of Object.keys(headers)) {\n            headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n        }\n        this.trace('Received server trailers:\\n' + headersString);\n        let metadata;\n        try {\n            metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n        }\n        catch (e) {\n            metadata = new metadata_1.Metadata();\n        }\n        const metadataMap = metadata.getMap();\n        let code = this.mappedStatusCode;\n        if (code === constants_1.Status.UNKNOWN &&\n            typeof metadataMap['grpc-status'] === 'string') {\n            const receivedStatus = Number(metadataMap['grpc-status']);\n            if (receivedStatus in constants_1.Status) {\n                code = receivedStatus;\n                this.trace('received status code ' + receivedStatus + ' from server');\n            }\n            metadata.remove('grpc-status');\n        }\n        let details = '';\n        if (typeof metadataMap['grpc-message'] === 'string') {\n            details = decodeURI(metadataMap['grpc-message']);\n            metadata.remove('grpc-message');\n            this.trace('received status details string \"' + details + '\" from server');\n        }\n        const status = { code, details, metadata };\n        let finalStatus;\n        try {\n            // Attempt to assign final status.\n            finalStatus = this.filterStack.receiveTrailers(status);\n        }\n        catch (error) {\n            // This is a no-op if the call was already ended when handling headers.\n            this.endCall({\n                code: constants_1.Status.INTERNAL,\n                details: 'Failed to process received status',\n                metadata: new metadata_1.Metadata(),\n            });\n            return;\n        }\n        // This is a no-op if the call was already ended when handling headers.\n        this.endCall(finalStatus);\n    }\n    attachHttp2Stream(stream, subchannel) {\n        if (this.finalStatus !== null) {\n            stream.close(NGHTTP2_CANCEL);\n        }\n        else {\n            this.trace('attachHttp2Stream from subchannel ' + subchannel.getAddress());\n            this.http2Stream = stream;\n            this.subchannel = subchannel;\n            subchannel.addDisconnectListener(this.disconnectListener);\n            subchannel.callRef();\n            stream.on('response', (headers, flags) => {\n                let headersString = '';\n                for (const header of Object.keys(headers)) {\n                    headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n                }\n                this.trace('Received server headers:\\n' + headersString);\n                switch (headers[':status']) {\n                    // TODO(murgatroid99): handle 100 and 101\n                    case 400:\n                        this.mappedStatusCode = constants_1.Status.INTERNAL;\n                        break;\n                    case 401:\n                        this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\n                        break;\n                    case 403:\n                        this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\n                        break;\n                    case 404:\n                        this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\n                        break;\n                    case 429:\n                    case 502:\n                    case 503:\n                    case 504:\n                        this.mappedStatusCode = constants_1.Status.UNAVAILABLE;\n                        break;\n                    default:\n                        this.mappedStatusCode = constants_1.Status.UNKNOWN;\n                }\n                if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n                    this.handleTrailers(headers);\n                }\n                else {\n                    let metadata;\n                    try {\n                        metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n                    }\n                    catch (error) {\n                        this.endCall({\n                            code: constants_1.Status.UNKNOWN,\n                            details: error.message,\n                            metadata: new metadata_1.Metadata(),\n                        });\n                        return;\n                    }\n                    try {\n                        const finalMetadata = this.filterStack.receiveMetadata(metadata);\n                        this.listener.onReceiveMetadata(finalMetadata);\n                    }\n                    catch (error) {\n                        this.destroyHttp2Stream();\n                        this.endCall({\n                            code: constants_1.Status.UNKNOWN,\n                            details: error.message,\n                            metadata: new metadata_1.Metadata(),\n                        });\n                    }\n                }\n            });\n            stream.on('trailers', this.handleTrailers.bind(this));\n            stream.on('data', (data) => {\n                this.trace('receive HTTP/2 data frame of length ' + data.length);\n                const messages = this.decoder.write(data);\n                for (const message of messages) {\n                    this.trace('parsed message of length ' + message.length);\n                    this.tryPush(message);\n                }\n            });\n            stream.on('end', () => {\n                this.readsClosed = true;\n                this.maybeOutputStatus();\n            });\n            stream.on('close', () => {\n                var _a;\n                this.trace('HTTP/2 stream closed with code ' + stream.rstCode);\n                /* If we have a final status with an OK status code, that means that\n                 * we have received all of the messages and we have processed the\n                 * trailers and the call completed successfully, so it doesn't matter\n                 * how the stream ends after that */\n                if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n                    return;\n                }\n                let code;\n                let details = '';\n                switch (stream.rstCode) {\n                    case http2.constants.NGHTTP2_NO_ERROR:\n                        /* If we get a NO_ERROR code and we already have a status, the\n                         * stream completed properly and we just haven't fully processed\n                         * it yet */\n                        if (this.finalStatus !== null) {\n                            return;\n                        }\n                        code = constants_1.Status.INTERNAL;\n                        details = `Received RST_STREAM with code ${stream.rstCode}`;\n                        break;\n                    case http2.constants.NGHTTP2_REFUSED_STREAM:\n                        code = constants_1.Status.UNAVAILABLE;\n                        details = 'Stream refused by server';\n                        break;\n                    case http2.constants.NGHTTP2_CANCEL:\n                        code = constants_1.Status.CANCELLED;\n                        details = 'Call cancelled';\n                        break;\n                    case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n                        code = constants_1.Status.RESOURCE_EXHAUSTED;\n                        details = 'Bandwidth exhausted';\n                        break;\n                    case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n                        code = constants_1.Status.PERMISSION_DENIED;\n                        details = 'Protocol not secure enough';\n                        break;\n                    default:\n                        code = constants_1.Status.INTERNAL;\n                        details = `Received RST_STREAM with code ${stream.rstCode}`;\n                }\n                // This is a no-op if trailers were received at all.\n                // This is OK, because status codes emitted here correspond to more\n                // catastrophic issues that prevent us from receiving trailers in the\n                // first place.\n                this.endCall({ code, details, metadata: new metadata_1.Metadata() });\n            });\n            stream.on('error', (err) => {\n                /* We need an error handler here to stop \"Uncaught Error\" exceptions\n                 * from bubbling up. However, errors here should all correspond to\n                 * \"close\" events, where we will handle the error more granularly */\n            });\n            if (!this.pendingRead) {\n                stream.pause();\n            }\n            if (this.pendingWrite) {\n                if (!this.pendingWriteCallback) {\n                    throw new Error('Invalid state in write handling code');\n                }\n                this.trace('sending data chunk of length ' +\n                    this.pendingWrite.length +\n                    ' (deferred)');\n                stream.write(this.pendingWrite, this.pendingWriteCallback);\n            }\n            this.maybeCloseWrites();\n        }\n    }\n    start(metadata, listener) {\n        this.trace('Sending metadata');\n        this.listener = listener;\n        this.channel._startCallStream(this, metadata);\n    }\n    destroyHttp2Stream() {\n        var _a;\n        // The http2 stream could already have been destroyed if cancelWithStatus\n        // is called in response to an internal http2 error.\n        if (this.http2Stream !== null && !this.http2Stream.destroyed) {\n            /* If the call has ended with an OK status, communicate that when closing\n             * the stream, partly to avoid a situation in which we detect an error\n             * RST_STREAM as a result after we have the status */\n            let code;\n            if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n                code = http2.constants.NGHTTP2_NO_ERROR;\n            }\n            else {\n                code = http2.constants.NGHTTP2_CANCEL;\n            }\n            this.http2Stream.close(code);\n        }\n    }\n    cancelWithStatus(status, details) {\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n        this.destroyHttp2Stream();\n        this.endCall({ code: status, details, metadata: new metadata_1.Metadata() });\n    }\n    getDeadline() {\n        return this.options.deadline;\n    }\n    getCredentials() {\n        return this.credentials;\n    }\n    setCredentials(credentials) {\n        this.credentials = this.channelCallCredentials.compose(credentials);\n    }\n    getStatus() {\n        return this.finalStatus;\n    }\n    getPeer() {\n        throw new Error('Not yet implemented');\n    }\n    getMethod() {\n        return this.methodName;\n    }\n    getHost() {\n        return this.options.host;\n    }\n    startRead() {\n        /* If the stream has ended with an error, we should not emit any more\n         * messages and we should communicate that the stream has ended */\n        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n            this.readsClosed = true;\n            this.maybeOutputStatus();\n            return;\n        }\n        this.canPush = true;\n        if (this.http2Stream === null) {\n            this.pendingRead = true;\n        }\n        else {\n            if (this.unpushedReadMessages.length > 0) {\n                const nextMessage = this.unpushedReadMessages.shift();\n                this.push(nextMessage);\n                return;\n            }\n            /* Only resume reading from the http2Stream if we don't have any pending\n             * messages to emit */\n            this.http2Stream.resume();\n        }\n    }\n    maybeCloseWrites() {\n        if (this.writesClosed &&\n            !this.isWriteFilterPending &&\n            this.http2Stream !== null) {\n            this.trace('calling end() on HTTP/2 stream');\n            this.http2Stream.end();\n        }\n    }\n    sendMessageWithContext(context, message) {\n        var _a;\n        this.trace('write() called with message of length ' + message.length);\n        const writeObj = {\n            message,\n            flags: context.flags,\n        };\n        const cb = (_a = context.callback) !== null && _a !== void 0 ? _a : (() => { });\n        this.isWriteFilterPending = true;\n        this.filterStack.sendMessage(Promise.resolve(writeObj)).then((message) => {\n            this.isWriteFilterPending = false;\n            if (this.http2Stream === null) {\n                this.trace('deferring writing data chunk of length ' + message.message.length);\n                this.pendingWrite = message.message;\n                this.pendingWriteCallback = cb;\n            }\n            else {\n                this.trace('sending data chunk of length ' + message.message.length);\n                this.http2Stream.write(message.message, cb);\n                this.maybeCloseWrites();\n            }\n        }, this.handleFilterError.bind(this));\n    }\n    halfClose() {\n        this.trace('end() called');\n        this.writesClosed = true;\n        this.maybeCloseWrites();\n    }\n}\nexports.Http2CallStream = Http2CallStream;\n//# sourceMappingURL=call-stream.js.map"]},"metadata":{},"sourceType":"script"}