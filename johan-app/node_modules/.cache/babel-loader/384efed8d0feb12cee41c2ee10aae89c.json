{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nconst initialState = {};\nexport default function postsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_POSTS:\n      {\n        //  fetch('http://127.0.0.1:5021/api/loadPosts')\n        //   .then((data) => data.json())\n        //   .then((res) => {\n        //     action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,res.data))\n        //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_FAIL,err)))\n        db.collection(\"posts\").where(\"showPost\", '==', '1').orderBy('postDate', 'desc').get() // .orderBy('postDate','desc')\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS, data)); // this.setState({ posts: data });\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_POSTS_SUCCESS:\n      {\n        console.log(action, state);\n        let stateCopy = action.payload;\n        let images = '';\n        db.collection(\"postimages\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          images = data;\n          console.log(images.filter((image, i) => image.albumID === '188'));\n        });\n        stateCopy.map(post => {\n          console.log(Object.values(images).filter(image => image.albumID === post.ID));\n          return post.image = Object.values(images).filter(image => image.albumID === post.ID);\n        }); //let imageName = []\n        // fetch('http://127.0.0.1:5021/api/loadPostImages')\n        //     .then((data) => data.json())\n        //     .then((res) => {\n        //       action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n        //       imageName = stateCopy.map(post => {\n        //         post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage =>{\n        //           return postImage\n        //         })\n        //       })\n        //     }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\n\n        console.log(stateCopy);\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_POSTS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS:\n      {\n        fetch('http://127.0.0.1:5021/api/loadAllPosts').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS:\n      {\n        let stateCopy = action.payload;\n        let imageName = [];\n        fetch('http://127.0.0.1:5021/api/loadPostImages').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS, res.data));\n          imageName = stateCopy.map(post => {\n            post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage => {\n              return postImage;\n            });\n          });\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/posts.reducer.js"],"names":["ACTIONS","mainAction","db","initialState","postsReducer","state","action","type","LOAD_POSTS","collection","where","orderBy","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_POSTS_SUCCESS","console","log","stateCopy","payload","images","filter","image","i","albumID","post","Object","values","ID","LOAD_POSTS_FAIL","LOAD_DASHBOARD_POSTS","fetch","json","res","LOAD_DASHBOARD_POSTS_SUCCESS","catch","err","LOAD_DASHBOARD_POSTS_FAIL","imageName","LOAD_POST_IMAGES_SUCCESS","postImage","LOAD_POST_IMAGES_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nconst initialState = {};\nexport default function postsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_POSTS: {\n        \n      //  fetch('http://127.0.0.1:5021/api/loadPosts')\n      //   .then((data) => data.json())\n      //   .then((res) => {\n      //     action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,res.data))\n      //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_FAIL,err)))\n      db.collection(\"posts\")\n      .where(\"showPost\",'==','1')\n      .orderBy('postDate','desc')\n      .get()\n    // .orderBy('postDate','desc')\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,data))\n       // this.setState({ posts: data });\n      });\n        return state\n      }\n      case ACTIONS.LOAD_POSTS_SUCCESS: {\n       \n        console.log(action, state)\n        let stateCopy = action.payload\n        let images =''\n        db.collection(\"postimages\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          images=data\n          console.log(images.filter((image,i) => image.albumID ==='188'))  \n        });\n        stateCopy.map(post=>{\n          console.log(Object.values(images).filter(image => image.albumID === post.ID))\n          return post.image = Object.values(images).filter(image => image.albumID === post.ID)\n        })\n        //let imageName = []\n        // fetch('http://127.0.0.1:5021/api/loadPostImages')\n        //     .then((data) => data.json())\n        //     .then((res) => {\n        //       action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n        //       imageName = stateCopy.map(post => {\n        //         post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage =>{\n        //           return postImage\n        //         })\n  \n        //       })\n        //     }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\n\n    \n            console.log(stateCopy)\n        return stateCopy\n      }\n      case ACTIONS.LOAD_POSTS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_DASHBOARD_POSTS: {\n        \n        fetch('http://127.0.0.1:5021/api/loadAllPosts')\n         .then((data) => data.json())\n         .then((res) => {\n           action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS,res.data))\n         }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_FAIL,err)))\n        \n         return state\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS: {\n         let stateCopy = action.payload\n         let imageName = []\n         fetch('http://127.0.0.1:5021/api/loadPostImages')\n             .then((data) => data.json())\n             .then((res) => {\n               action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n               imageName = stateCopy.map(post => {\n                 post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage =>{\n                   return postImage\n                 })\n   \n               })\n             }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\n             \n         return stateCopy\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL: {\n \n         return state\n       }\n      default: \n        return state\n        \n    }\n  }"]},"metadata":{},"sourceType":"module"}