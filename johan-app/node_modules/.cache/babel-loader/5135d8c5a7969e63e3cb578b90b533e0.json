{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        fetch('http://127.0.0.1:5021/api/loadAgendasByPage/' + action.payload.skip + \"/\" + action.payload.limit).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, res.data));\n          stateCopy.agendaTotal = res.data.length;\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString(); //   db.collection(\"agendas\")\n        //  .where(\"year\",'==',year)\n        //  .where(\"month\",'>=',month)\n        //    .get()\n        //    .then(querySnapshot => {\n        //      const data = querySnapshot.docs.map(doc => doc.data());\n        //      agendas = data\n        //     action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,data))\n        //    });\n\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\").where(\"year\", '==', year).where(\"month\", '>=', month).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              return stateCopy[i].title = data.filter(agenda => agenda.cd === stateCopy[i].ID);\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        stateCopy.map((agenda, i) => {\n          db.collection(\"presentations\").where(\"id\", \"==\", agenda.cd.toString()).get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            agenda.title = data[0].cdName; // action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,data))\n          });\n        });\n        console.log(stateCopy);\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","stateCopy","cloneDeep","fetch","payload","skip","limit","then","data","json","res","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","agendaTotal","length","catch","err","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","agendas","d","Date","day","getDay","month","getMonth","toString","year","getFullYear","collection","where","get","querySnapshot","docs","map","doc","post","i","title","filter","agenda","cd","ID","LOAD_AGENDAS_SUCCESS","cdName","console","log","LOAD_AGENDAS_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n        let stateCopy = _.cloneDeep(state)\n       fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n          stateCopy.agendaTotal = res.data.length\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        \n        return stateCopy\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n      //   db.collection(\"agendas\")\n      //  .where(\"year\",'==',year)\n      //  .where(\"month\",'>=',month)\n      //    .get()\n      //    .then(querySnapshot => {\n      //      const data = querySnapshot.docs.map(doc => doc.data());\n      //      agendas = data\n      //     action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,data))\n          \n      //    });\n\n\n\n\n\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       .where(\"year\",'==',year)\n       .where(\"month\",'>=',month)\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n              stateCopy.map((post,i)=>{\n              return stateCopy[i].title = data.filter(agenda => agenda.cd=== stateCopy[i].ID)\n              })\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        \n        stateCopy.map((agenda,i)=>{\n          \n          db.collection(\"presentations\")\n          .where(\"id\",\"==\",agenda.cd.toString())\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            agenda.title=data[0].cdName\n           // action.asyncDispatch(mainAction(ACTIONS.LOAD_ALL_AGENDAS_SUCCESS,data))\n          });\n        })\n        console.log(stateCopy)\n\n        return action.payload\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}