{"ast":null,"code":"export var asyncDispatchMiddleware=function asyncDispatchMiddleware(store){return function(next){return function(action){var syncActivityFinished=false;var actionQueue=[];function flushQueue(){actionQueue.forEach(function(a){store.dispatch(a);});// flush queue\nactionQueue=[];}function asyncDispatch(asyncAction,param){if(!param){actionQueue=actionQueue.concat([asyncAction]);}else{actionQueue=actionQueue.concat([asyncAction]);}if(syncActivityFinished){flushQueue();}}var actionWithAsyncDispatch=Object.assign({},action,{asyncDispatch:asyncDispatch});next(actionWithAsyncDispatch);syncActivityFinished=true;flushQueue();};};};","map":{"version":3,"sources":["/Users/laurakalonzo/Documents/DEV/johandemeij/johan-app/src/utils/reducerAsyncHelper.js"],"names":["asyncDispatchMiddleware","store","next","action","syncActivityFinished","actionQueue","flushQueue","forEach","a","dispatch","asyncDispatch","asyncAction","param","concat","actionWithAsyncDispatch","Object","assign"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,KAAK,QAAI,UAAAC,IAAI,QAAI,UAAAC,MAAM,CAAI,CAC9D,GAAIC,CAAAA,oBAAoB,CAAG,KAA3B,CACA,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CAEA,QAASC,CAAAA,UAAT,EAAsB,CACpBD,WAAW,CAACE,OAAZ,CAAoB,SAAAC,CAAC,CAAI,CACvBP,KAAK,CAACQ,QAAN,CAAeD,CAAf,EACD,CAFD,EAEI;AACJH,WAAW,CAAG,EAAd,CACD,CAED,QAASK,CAAAA,aAAT,CAAuBC,WAAvB,CAAoCC,KAApC,CAA2C,CACzC,GAAI,CAACA,KAAL,CAAW,CACTP,WAAW,CAAGA,WAAW,CAACQ,MAAZ,CAAmB,CAACF,WAAD,CAAnB,CAAd,CACD,CAFD,IAEO,CACLN,WAAW,CAAGA,WAAW,CAACQ,MAAZ,CAAmB,CAACF,WAAD,CAAnB,CAAd,CACD,CAED,GAAIP,oBAAJ,CAA0B,CACxBE,UAAU,GACX,CACF,CAED,GAAMQ,CAAAA,uBAAuB,CACzBC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBb,MAAlB,CAA0B,CAAEO,aAAa,CAAbA,aAAF,CAA1B,CADJ,CAGAR,IAAI,CAACY,uBAAD,CAAJ,CACAV,oBAAoB,CAAG,IAAvB,CACAE,UAAU,GACX,CA7BiD,EAAR,EAArC","sourcesContent":["export const asyncDispatchMiddleware = store => next => action => {\n    let syncActivityFinished = false;\n    let actionQueue = [];\n  \n    function flushQueue() {\n      actionQueue.forEach(a => {\n        store.dispatch(a)\n      }); // flush queue\n      actionQueue = [];\n    }\n  \n    function asyncDispatch(asyncAction, param) {\n      if (!param){\n        actionQueue = actionQueue.concat([asyncAction]);\n      } else {\n        actionQueue = actionQueue.concat([asyncAction]);\n      }\n      \n      if (syncActivityFinished) {\n        flushQueue();\n      }\n    }\n  \n    const actionWithAsyncDispatch =\n        Object.assign({}, action, { asyncDispatch });\n  \n    next(actionWithAsyncDispatch);\n    syncActivityFinished = true;\n    flushQueue();\n  };   "]},"metadata":{},"sourceType":"module"}