{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\";\nconst initialState = {};\nexport default function catalogueReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_MUSIC_CATALOGUE:\n      {\n        db.collection(\"musicalbums\").orderBy(\"catalogueNumber\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_CATALOGUE_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_CATALOGUE_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_MUSIC_CATALOGUE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.CREATE_CATALOGUE:\n      {\n        console.log(action);\n\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"musicalbums\").add(stateCopy).then(function (docRef) {\n          console.log(docRef);\n          stateCopy._id = docRef.id;\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_CATALOGUE_SUCCESS, stateCopy));\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_CATALOGUE_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_CATALOGUE:\n      {\n        db.collection(\"musicalbums\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_CATALOGUE_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_CATALOGUE_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_CATALOGUE, []));\n        return state;\n      }\n\n    case ACTIONS.DELETE_CATALOGUE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_CATALOGUE:\n      {\n        db.collection(\"musicalbums\").where(\"id\", '==', action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CATALOGUE_SUCCESS, ...data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CATALOGUE_SUCCESS:\n      {\n        return action.payload ? action.payload : state;\n      }\n\n    case ACTIONS.LOAD_CATALOGUE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CATALOGUE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        if (stateCopy.id) db.collection(\"musicalbums\").where(\"id\", '==', stateCopy.id).get().then(querySnapshot => {\n          let _id = '';\n          const data = querySnapshot.docs.map(doc => {\n            _id = doc.id;\n            return doc.data();\n          });\n          db.collection(\"musicalbums\").doc(_id).update(stateCopy).then(() => {\n            console.log(data);\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_CATALOGUE_SUCCESS, stateCopy));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CATALOGUE_SUCCESS:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CATALOGUE_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/musicCatalogue.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","catalogueReducer","state","action","type","LOAD_MUSIC_CATALOGUE","collection","orderBy","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_MUSIC_CATALOGUE_SUCCESS","payload","LOAD_MUSIC_CATALOGUE_FAIL","CREATE_CATALOGUE","console","log","stateCopy","cloneDeep","add","docRef","_id","id","CREATE_CATALOGUE_SUCCESS","DELETE_CATALOGUE","where","forEach","ref","delete","DELETE_CATALOGUE_SUCCESS","DELETE_CATALOGUE_FAIL","LOAD_CATALOGUE","LOAD_CATALOGUE_SUCCESS","LOAD_CATALOGUE_FAIL","UPDATE_CATALOGUE","update","UPDATE_CATALOGUE_SUCCESS","UPDATE_CATALOGUE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from \"lodash\"\nconst initialState = {};\nexport default function catalogueReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_MUSIC_CATALOGUE: {\n      db.collection(\"musicalbums\")\n      .orderBy(\"catalogueNumber\",\"asc\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_CATALOGUE_SUCCESS,data))\n      });\n\n\n        return state\n      }\n      case ACTIONS.LOAD_MUSIC_CATALOGUE_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_MUSIC_CATALOGUE_FAIL: {\n\n        return state\n      }\n      case ACTIONS.CREATE_CATALOGUE:{\n        console.log(action)\n        let stateCopy = _.cloneDeep(action.payload)\n      \n        db.collection(\"musicalbums\")\n          .add(stateCopy)\n          .then(function(docRef){\n            console.log(docRef)\n            stateCopy._id = docRef.id\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_CATALOGUE_SUCCESS,stateCopy))\n          });\n          return state\n      }\n      case ACTIONS.CREATE_CATALOGUE_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.DELETE_CATALOGUE:{\n        db.collection(\"musicalbums\")\n        .where('id','==',action.payload)\n         .get()\n         .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=> doc.ref.delete())\n           action.asyncDispatch(mainAction(ACTIONS.DELETE_CATALOGUE_SUCCESS,[]))\n         });\n        return state\n      }\n      case ACTIONS.DELETE_CATALOGUE_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_CATALOGUE,[]))\n        return state\n      }\n      case ACTIONS.DELETE_CATALOGUE_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_CATALOGUE:{\n        db.collection(\"musicalbums\")\n        .where(\"id\",'==',action.payload)\n          .get()\n          .then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_CATALOGUE_SUCCESS,...data))\n          });\n        return state\n      }\n      case ACTIONS.LOAD_CATALOGUE_SUCCESS:{\n        \n        return action.payload ? action.payload : state\n      }\n      case ACTIONS.LOAD_CATALOGUE_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_CATALOGUE:{\n        let stateCopy = _.cloneDeep(action.payload)\n        \n        if(stateCopy.id)\n        db.collection(\"musicalbums\")\n        .where(\"id\",'==',stateCopy.id)\n          .get()\n          .then(querySnapshot => {\n            let _id = ''\n            const data = querySnapshot.docs.map(doc => {\n              _id = doc.id\n              return doc.data()});\n           db.collection(\"musicalbums\").doc(_id)\n            .update(stateCopy).then(()=>{\n              console.log(data)\n              action.asyncDispatch(mainAction(ACTIONS.UPDATE_CATALOGUE_SUCCESS,stateCopy))\n            });\n          });\n       \n        return state\n      }\n      case ACTIONS.UPDATE_CATALOGUE_SUCCESS:{\n        return state\n      }\n      case ACTIONS.UPDATE_CATALOGUE_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}