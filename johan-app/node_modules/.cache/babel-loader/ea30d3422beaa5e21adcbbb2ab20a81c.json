{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        //   let stateCopy = _.cloneDeep(state)\n        //  fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n        //   .then((data) => data.json())\n        //   .then((res) => {\n        //     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n        //     stateCopy.agendaTotal = res.data.length\n        //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n        db.collection(\"agendas\").where(\"year\", \"==\", \"2020\").orderBy('month', 'asc').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, data));\n        }); //   let stateCopy = []\n        //   db.collection(\"agendas\")\n        //   .where(\"year\",\"==\",\"2020\")\n        //   .orderBy('month')\n        //  .get()\n        //  .then(querySnapshot => {\n        //    const data = querySnapshot.docs.map(doc => doc.data());\n        //    let x =  action.payload.limit - action.payload.skip;\n        //    console.log(x)\n        //    data.map((newData,i)=>{\n        //      if(i < action.payload.limit && i > action.payload.skip)\n        //      stateCopy.push(newData)\n        //    })\n        //    action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n        //  });\n        // db.collection(\"agendas\")\n        // .where(\"year\",\"==\",\"2020\")\n        // .orderBy('month')\n        // .get()\n        // .then(querySnapshot => {\n        //   const data = querySnapshot.docs.map(doc => doc.data());\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n        // });\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              post.title = title[0];\n              post.date = `${post.year}-${post.month}-${post.day}`;\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"year\", \"==\", action.payload).orderBy('month', 'asc').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","LOAD_CD_AGENDA","collection","where","orderBy","get","then","querySnapshot","data","docs","map","doc","asyncDispatch","LOAD_CD_AGENDA_SUCCESS","payload","LOAD_CD_AGENDA_FAIL","LOAD_AGENDAS","agendas","d","Date","day","getDay","month","getMonth","toString","year","getFullYear","stateCopy","post","i","title","filter","presentation","id","cd","cdName","date","LOAD_AGENDAS_SUCCESS","cloneDeep","LOAD_AGENDAS_FAIL","LOAD_AGENDA","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      \n      case ACTIONS.LOAD_CD_AGENDA: {\n      //   let stateCopy = _.cloneDeep(state)\n      //  fetch('http://127.0.0.1:5021/api/loadAgendasByPage/'+action.payload.skip+\"/\"+action.payload.limit)\n      //   .then((data) => data.json())\n      //   .then((res) => {\n      //     action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,res.data))\n      //     stateCopy.agendaTotal = res.data.length\n      //   }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_FAIL,err)))\n      db.collection(\"agendas\")\n      .where(\"year\",\"==\",\"2020\")\n      .orderBy('month','asc')\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n      });\n      \n\n      //   let stateCopy = []\n      //   db.collection(\"agendas\")\n      //   .where(\"year\",\"==\",\"2020\")\n      //   .orderBy('month')\n      //  .get()\n      //  .then(querySnapshot => {\n      //    const data = querySnapshot.docs.map(doc => doc.data());\n      //    let x =  action.payload.limit - action.payload.skip;\n      //    console.log(x)\n      //    data.map((newData,i)=>{\n      //      if(i < action.payload.limit && i > action.payload.skip)\n      //      stateCopy.push(newData)\n      //    })\n      //    action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n      //  });\n      // db.collection(\"agendas\")\n      // .where(\"year\",\"==\",\"2020\")\n      // .orderBy('month')\n      // .get()\n      // .then(querySnapshot => {\n      //   const data = querySnapshot.docs.map(doc => doc.data());\n      //   action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n      // });\n      \n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n              post.title = title[0]; \n              post.date=`${post.year}-${post.month}-${post.day}`\n              return post\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_AGENDA:{\n        db.collection(\"agendas\")\n      .where(\"year\",\"==\",action.payload)\n      .orderBy('month','asc')\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,data))\n      });\n      return state\n      }\n      case ACTIONS.LOAD_AGENDA_SUCCESS:{\n        return state\n      }\n      case ACTIONS.LOAD_AGENDA_FAIL:{\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}