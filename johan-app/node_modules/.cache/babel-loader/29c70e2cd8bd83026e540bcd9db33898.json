{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function agendaReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_NEW_AGENDA:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"agendas\").add({\n          stateCopy\n        }).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS, stateCopy));\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.DELETE_AGENDA:\n      {\n        db.collection(\"agendas\").where('id', '==', action.payload).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS, []));\n        });\n        return state;\n      }\n\n    case ACTIONS.DELETE_AGENDA_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS, []));\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA:\n      {\n        console.log(action);\n        let stateCopy = [];\n        db.collection(\"agendas\").where(\"year\", \"==\", action.payload.year).orderBy('month', 'desc').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS, stateCopy));\n        }); //     let agendas = []\n        //     let d = new Date();\n        //     let day = d.getDay();\n        //     let month = (d.getMonth() + 1).toString()\n        //     let year = d.getFullYear().toString();\n        //      let stateCopy = ''\n        //      db.collection(\"agendas\")\n        //    .where(\"year\",'==',action.payload.year)\n        //   //.where(\"month\",'>=',month)\n        //  .orderBy(\"month\",\"desc\")\n        //  // .orderBy(\"day\",\"asc\")\n        //     .get()\n        //     .then(querySnapshot => {\n        //       const data = querySnapshot.docs.map(doc => doc.data());\n        //       stateCopy = data;\n        //           action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n        //     });\n\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS:\n      {\n        let agendas = [];\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString();\n        let year = d.getFullYear().toString();\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"agendas\") //.where(\"year\",'==',year)\n        .where(\"month\", '>=', month).orderBy(\"month\", \"asc\").orderBy(\"day\", \"asc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\") // .where(\"id\",\"==\",stateCopy.cd.toString())\n          .get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              let title = data.filter(presentation => presentation.id === post.cd).map(presentation => {\n                return presentation.cdName;\n              });\n              post.title = title[0];\n              post.date = `${post.year}-${post.month}-${post.day}`;\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDAS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        return stateCopy.filter(agendas => agendas.year === year);\n      }\n\n    case ACTIONS.LOAD_AGENDAS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA:\n      {\n        db.collection(\"agendas\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n\n          if (data.length > 0) {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS, data));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL, {\n              error: \"Failed to retrieve agenda\"\n            }));\n          }\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_AGENDA_SUCCESS:\n      {\n        return { ...action.payload[0]\n        };\n      }\n\n    case ACTIONS.LOAD_AGENDA_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA:\n      {\n        console.log(action);\n        db.collection(\"agendas\").doc(action.payload.id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_AGENDA_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.AGENDA, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/agenda.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","agendaReducer","state","action","type","CREATE_NEW_AGENDA","stateCopy","cloneDeep","payload","collection","add","then","asyncDispatch","CREATE_NEW_AGENDA_SUCCESS","DELETE_AGENDA","where","get","querySnapshot","forEach","doc","ref","delete","DELETE_AGENDA_SUCCESS","LOAD_AGENDAS","LOAD_CD_AGENDA","console","log","year","orderBy","data","docs","map","LOAD_CD_AGENDA_SUCCESS","LOAD_CD_AGENDA_FAIL","agendas","d","Date","day","getDay","month","getMonth","toString","getFullYear","post","i","title","filter","presentation","id","cd","cdName","date","LOAD_AGENDAS_SUCCESS","LOAD_AGENDAS_FAIL","LOAD_AGENDA","length","LOAD_AGENDA_SUCCESS","LOAD_AGENDA_FAIL","error","UPDATE_AGENDA","update","UPDATE_AGENDA_SUCCESS","AGENDA"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {\n};\nexport default function agendaReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.CREATE_NEW_AGENDA:{\n        let stateCopy = _.cloneDeep(action.payload)\n        db.collection(\"agendas\")\n        .add({stateCopy}).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_AGENDA_SUCCESS,stateCopy))\n        })\n      return stateCopy\n      }\n      case ACTIONS.CREATE_NEW_AGENDA_SUCCESS:{\n        return action.payload\n      }\n      case ACTIONS.DELETE_AGENDA:{\n\n        db.collection(\"agendas\")\n        .where('id','==',action.payload)\n         .get()\n         .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=> doc.ref.delete())\n           action.asyncDispatch(mainAction(ACTIONS.DELETE_AGENDA_SUCCESS,[]))\n         });\n       return state\n     }  \n     case ACTIONS.DELETE_AGENDA_SUCCESS:{\n       action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS,[]))\n       return state\n     }  \n      case ACTIONS.LOAD_CD_AGENDA: {\n        console.log(action)\n      let stateCopy = []\n      db.collection(\"agendas\")\n      .where(\"year\",\"==\",action.payload.year)\n      .orderBy('month','desc')\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        stateCopy = data;\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n      });\n      \n  //     let agendas = []\n  //     let d = new Date();\n  //     let day = d.getDay();\n  //     let month = (d.getMonth() + 1).toString()\n  //     let year = d.getFullYear().toString();\n\n  //      let stateCopy = ''\n  //      db.collection(\"agendas\")\n  //    .where(\"year\",'==',action.payload.year)\n  //   //.where(\"month\",'>=',month)\n  //  .orderBy(\"month\",\"desc\")\n  //  // .orderBy(\"day\",\"asc\")\n  //     .get()\n  //     .then(querySnapshot => {\n  //       const data = querySnapshot.docs.map(doc => doc.data());\n  //       stateCopy = data;\n  //           action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_AGENDA_SUCCESS,stateCopy))\n  //     });\n        return state\n      }\n      case ACTIONS.LOAD_CD_AGENDA_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_AGENDA_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS: {\n        let agendas = []\n        let d = new Date();\n        let day = d.getDay();\n        let month = (d.getMonth() + 1).toString()\n        let year = d.getFullYear().toString();\n\n         let stateCopy = ''\n         //=======================================================\n         db.collection(\"agendas\")\n       //.where(\"year\",'==',year)\n      .where(\"month\",'>=',month)\n      .orderBy(\"month\",\"asc\")\n      .orderBy(\"day\",\"asc\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n  \n          //=======================================================\n            db.collection(\"presentations\")\n           // .where(\"id\",\"==\",stateCopy.cd.toString())\n           .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => doc.data());\n\n              stateCopy.map((post,i)=>{\n\n              let title = data.filter(presentation=>presentation.id===post.cd).map(presentation=>{return presentation.cdName})\n              post.title = title[0]; \n              post.date=`${post.year}-${post.month}-${post.day}`\n              return post\n              })\n\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDAS_SUCCESS,stateCopy))\n            });\n          //========================================================\n        });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_AGENDAS_SUCCESS:{\n        let stateCopy = _.cloneDeep(action.payload)\n        let d = new Date();\n        let year = d.getFullYear().toString();\n        \n       \n        return stateCopy.filter(agendas=>agendas.year === year)\n      }\n      case ACTIONS.LOAD_AGENDAS_FAIL:{\n        return state\n      }\n      case ACTIONS.LOAD_AGENDA:{\n       \n      db.collection(\"agendas\")\n      .where(\"id\",\"==\",action.payload)\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        if(data.length > 0){\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_SUCCESS,data))\n        } else {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_AGENDA_FAIL,{error:\"Failed to retrieve agenda\"}))\n        }\n      });\n      return state\n      }\n      case ACTIONS.LOAD_AGENDA_SUCCESS:{\n        return {...action.payload[0]}\n      }\n      case ACTIONS.LOAD_AGENDA_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_AGENDA:{\n        console.log(action)\n          db.collection(\"agendas\")\n          .doc(action.payload.id)\n          .update(action.payload).then(()=>{\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_AGENDA_SUCCESS,action.payload))\n          });\n          return state\n          }\n          case ACTIONS.UPDATE_AGENDA_SUCCESS:{\n          let stateCopy = _.cloneDeep(state)\n          action.asyncDispatch(mainAction(ACTIONS.AGENDA,stateCopy.id))\n          return {state,...action.payload}\n          }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}