{"ast":null,"code":"/*! firebase-admin v8.12.1 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar remote_config_utils_1 = require(\"./remote-config-utils\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\"); // Remote Config backend constants\n\n\nvar FIREBASE_REMOTE_CONFIG_V1_API = 'https://firebaseremoteconfig.googleapis.com/v1';\nvar FIREBASE_REMOTE_CONFIG_HEADERS = {\n  'X-Firebase-Client': 'fire-admin-node/8.12.1',\n  // There is a known issue in which the ETag is not properly returned in cases where the request\n  // does not specify a compression type. Currently, it is required to include the header\n  // `Accept-Encoding: gzip` or equivalent in all requests.\n  // https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\n  'Accept-Encoding': 'gzip'\n};\nvar TagColor;\n\n(function (TagColor) {\n  TagColor[\"BLUE\"] = \"Blue\";\n  TagColor[\"BROWN\"] = \"Brown\";\n  TagColor[\"CYAN\"] = \"Cyan\";\n  TagColor[\"DEEP_ORANGE\"] = \"Red Orange\";\n  TagColor[\"GREEN\"] = \"Green\";\n  TagColor[\"INDIGO\"] = \"Indigo\";\n  TagColor[\"LIME\"] = \"Lime\";\n  TagColor[\"ORANGE\"] = \"Orange\";\n  TagColor[\"PINK\"] = \"Pink\";\n  TagColor[\"PURPLE\"] = \"Purple\";\n  TagColor[\"TEAL\"] = \"Teal\";\n})(TagColor = exports.TagColor || (exports.TagColor = {}));\n/**\n * Class that facilitates sending requests to the Firebase Remote Config backend API.\n *\n * @private\n */\n\n\nvar RemoteConfigApiClient =\n/** @class */\nfunction () {\n  function RemoteConfigApiClient(app) {\n    this.app = app;\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'First argument passed to admin.remoteConfig() must be a valid Firebase app instance.');\n    }\n\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n\n  RemoteConfigApiClient.prototype.getTemplate = function () {\n    var _this = this;\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/remoteConfig\",\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS\n      };\n      return _this.httpClient.send(request);\n    }).then(function (resp) {\n      if (!validator.isNonEmptyString(resp.headers['etag'])) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n      }\n\n      return {\n        conditions: resp.data.conditions,\n        parameters: resp.data.parameters,\n        parameterGroups: resp.data.parameterGroups,\n        etag: resp.headers['etag']\n      };\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.validateTemplate = function (template) {\n    var _this = this;\n\n    this.validateRemoteConfigTemplate(template);\n    return this.sendPutRequest(template, template.etag, true).then(function (resp) {\n      if (!validator.isNonEmptyString(resp.headers['etag'])) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n      }\n\n      return {\n        conditions: resp.data.conditions,\n        parameters: resp.data.parameters,\n        parameterGroups: resp.data.parameterGroups,\n        // validating a template returns an etag with the suffix -0 means that your update \n        // was successfully validated. We set the etag back to the original etag of the template\n        // to allow future operations.\n        etag: template.etag\n      };\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.publishTemplate = function (template, options) {\n    var _this = this;\n\n    this.validateRemoteConfigTemplate(template);\n    var ifMatch = template.etag;\n\n    if (options && options.force == true) {\n      // setting `If-Match: *` forces the Remote Config template to be updated\n      // and circumvent the ETag, and the protection from that it provides.\n      ifMatch = '*';\n    }\n\n    return this.sendPutRequest(template, ifMatch).then(function (resp) {\n      if (!validator.isNonEmptyString(resp.headers['etag'])) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n      }\n\n      return {\n        conditions: resp.data.conditions,\n        parameters: resp.data.parameters,\n        parameterGroups: resp.data.parameterGroups,\n        etag: resp.headers['etag']\n      };\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.sendPutRequest = function (template, etag, validateOnly) {\n    var _this = this;\n\n    var path = 'remoteConfig';\n\n    if (validateOnly) {\n      path += '?validate_only=true';\n    }\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'PUT',\n        url: url + \"/\" + path,\n        headers: __assign(__assign({}, FIREBASE_REMOTE_CONFIG_HEADERS), {\n          'If-Match': etag\n        }),\n        data: {\n          conditions: template.conditions,\n          parameters: template.parameters,\n          parameterGroups: template.parameterGroups\n        }\n      };\n      return _this.httpClient.send(request);\n    });\n  };\n\n  RemoteConfigApiClient.prototype.getUrl = function () {\n    return this.getProjectIdPrefix().then(function (projectIdPrefix) {\n      return FIREBASE_REMOTE_CONFIG_V1_API + \"/\" + projectIdPrefix;\n    });\n  };\n\n  RemoteConfigApiClient.prototype.getProjectIdPrefix = function () {\n    var _this = this;\n\n    if (this.projectIdPrefix) {\n      return Promise.resolve(this.projectIdPrefix);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('unknown-error', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n\n      _this.projectIdPrefix = \"projects/\" + projectId;\n      return _this.projectIdPrefix;\n    });\n  };\n\n  RemoteConfigApiClient.prototype.toFirebaseError = function (err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n\n    var response = err.response;\n\n    if (!response.isJson()) {\n      return new remote_config_utils_1.FirebaseRemoteConfigError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n    }\n\n    var error = response.data.error || {};\n    var code = 'unknown-error';\n\n    if (error.status && error.status in ERROR_CODE_MAPPING) {\n      code = ERROR_CODE_MAPPING[error.status];\n    }\n\n    var message = error.message || \"Unknown server error: \" + response.text;\n    return new remote_config_utils_1.FirebaseRemoteConfigError(code, message);\n  };\n  /**\n   * Checks if the given RemoteConfigTemplate object is valid.\n   * The object must have valid parameters, parameter groups, conditions, and an etag.\n   *\n   * @param {RemoteConfigTemplate} template A RemoteConfigTemplate object to be validated.\n   */\n\n\n  RemoteConfigApiClient.prototype.validateRemoteConfigTemplate = function (template) {\n    if (!validator.isNonNullObject(template)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config template: \" + JSON.stringify(template));\n    }\n\n    if (!validator.isNonEmptyString(template.etag)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag must be a non-empty string.');\n    }\n\n    if (!validator.isNonNullObject(template.parameters)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n    }\n\n    if (!validator.isNonNullObject(template.parameterGroups)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n    }\n\n    if (!validator.isArray(template.conditions)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n    }\n  };\n\n  return RemoteConfigApiClient;\n}();\n\nexports.RemoteConfigApiClient = RemoteConfigApiClient;\nvar ERROR_CODE_MAPPING = {\n  ABORTED: 'aborted',\n  ALREADY_EXISTS: \"already-exists\",\n  INVALID_ARGUMENT: 'invalid-argument',\n  FAILED_PRECONDITION: 'failed-precondition',\n  NOT_FOUND: 'not-found',\n  OUT_OF_RANGE: 'out-of-range',\n  PERMISSION_DENIED: 'permission-denied',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNKNOWN: 'unknown-error'\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/firebase-admin/lib/remote-config/remote-config-api-client.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","api_request_1","require","error_1","remote_config_utils_1","utils","validator","FIREBASE_REMOTE_CONFIG_V1_API","FIREBASE_REMOTE_CONFIG_HEADERS","TagColor","RemoteConfigApiClient","app","isNonNullObject","FirebaseRemoteConfigError","httpClient","AuthorizedHttpClient","getTemplate","_this","getUrl","then","url","request","method","headers","send","resp","isNonEmptyString","conditions","data","parameters","parameterGroups","etag","catch","err","toFirebaseError","validateTemplate","template","validateRemoteConfigTemplate","sendPutRequest","publishTemplate","options","ifMatch","force","validateOnly","path","getProjectIdPrefix","projectIdPrefix","Promise","resolve","findProjectId","projectId","PrefixedFirebaseError","response","isJson","status","text","error","code","ERROR_CODE_MAPPING","message","JSON","stringify","isArray","ABORTED","ALREADY_EXISTS","INVALID_ARGUMENT","FAILED_PRECONDITION","NOT_FOUND","OUT_OF_RANGE","PERMISSION_DENIED","RESOURCE_EXHAUSTED","UNAUTHENTICATED","UNKNOWN"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.12.1 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar api_request_1 = require(\"../utils/api-request\");\nvar error_1 = require(\"../utils/error\");\nvar remote_config_utils_1 = require(\"./remote-config-utils\");\nvar utils = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\n// Remote Config backend constants\nvar FIREBASE_REMOTE_CONFIG_V1_API = 'https://firebaseremoteconfig.googleapis.com/v1';\nvar FIREBASE_REMOTE_CONFIG_HEADERS = {\n    'X-Firebase-Client': 'fire-admin-node/8.12.1',\n    // There is a known issue in which the ETag is not properly returned in cases where the request\n    // does not specify a compression type. Currently, it is required to include the header\n    // `Accept-Encoding: gzip` or equivalent in all requests.\n    // https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\n    'Accept-Encoding': 'gzip',\n};\nvar TagColor;\n(function (TagColor) {\n    TagColor[\"BLUE\"] = \"Blue\";\n    TagColor[\"BROWN\"] = \"Brown\";\n    TagColor[\"CYAN\"] = \"Cyan\";\n    TagColor[\"DEEP_ORANGE\"] = \"Red Orange\";\n    TagColor[\"GREEN\"] = \"Green\";\n    TagColor[\"INDIGO\"] = \"Indigo\";\n    TagColor[\"LIME\"] = \"Lime\";\n    TagColor[\"ORANGE\"] = \"Orange\";\n    TagColor[\"PINK\"] = \"Pink\";\n    TagColor[\"PURPLE\"] = \"Purple\";\n    TagColor[\"TEAL\"] = \"Teal\";\n})(TagColor = exports.TagColor || (exports.TagColor = {}));\n/**\n * Class that facilitates sending requests to the Firebase Remote Config backend API.\n *\n * @private\n */\nvar RemoteConfigApiClient = /** @class */ (function () {\n    function RemoteConfigApiClient(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'First argument passed to admin.remoteConfig() must be a valid Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    RemoteConfigApiClient.prototype.getTemplate = function () {\n        var _this = this;\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'GET',\n                url: url + \"/remoteConfig\",\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS\n            };\n            return _this.httpClient.send(request);\n        })\n            .then(function (resp) {\n            if (!validator.isNonEmptyString(resp.headers['etag'])) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n            }\n            return {\n                conditions: resp.data.conditions,\n                parameters: resp.data.parameters,\n                parameterGroups: resp.data.parameterGroups,\n                etag: resp.headers['etag'],\n            };\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    RemoteConfigApiClient.prototype.validateTemplate = function (template) {\n        var _this = this;\n        this.validateRemoteConfigTemplate(template);\n        return this.sendPutRequest(template, template.etag, true)\n            .then(function (resp) {\n            if (!validator.isNonEmptyString(resp.headers['etag'])) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n            }\n            return {\n                conditions: resp.data.conditions,\n                parameters: resp.data.parameters,\n                parameterGroups: resp.data.parameterGroups,\n                // validating a template returns an etag with the suffix -0 means that your update \n                // was successfully validated. We set the etag back to the original etag of the template\n                // to allow future operations.\n                etag: template.etag,\n            };\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    RemoteConfigApiClient.prototype.publishTemplate = function (template, options) {\n        var _this = this;\n        this.validateRemoteConfigTemplate(template);\n        var ifMatch = template.etag;\n        if (options && options.force == true) {\n            // setting `If-Match: *` forces the Remote Config template to be updated\n            // and circumvent the ETag, and the protection from that it provides.\n            ifMatch = '*';\n        }\n        return this.sendPutRequest(template, ifMatch)\n            .then(function (resp) {\n            if (!validator.isNonEmptyString(resp.headers['etag'])) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n            }\n            return {\n                conditions: resp.data.conditions,\n                parameters: resp.data.parameters,\n                parameterGroups: resp.data.parameterGroups,\n                etag: resp.headers['etag'],\n            };\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    RemoteConfigApiClient.prototype.sendPutRequest = function (template, etag, validateOnly) {\n        var _this = this;\n        var path = 'remoteConfig';\n        if (validateOnly) {\n            path += '?validate_only=true';\n        }\n        return this.getUrl()\n            .then(function (url) {\n            var request = {\n                method: 'PUT',\n                url: url + \"/\" + path,\n                headers: __assign(__assign({}, FIREBASE_REMOTE_CONFIG_HEADERS), { 'If-Match': etag }),\n                data: {\n                    conditions: template.conditions,\n                    parameters: template.parameters,\n                    parameterGroups: template.parameterGroups,\n                }\n            };\n            return _this.httpClient.send(request);\n        });\n    };\n    RemoteConfigApiClient.prototype.getUrl = function () {\n        return this.getProjectIdPrefix()\n            .then(function (projectIdPrefix) {\n            return FIREBASE_REMOTE_CONFIG_V1_API + \"/\" + projectIdPrefix;\n        });\n    };\n    RemoteConfigApiClient.prototype.getProjectIdPrefix = function () {\n        var _this = this;\n        if (this.projectIdPrefix) {\n            return Promise.resolve(this.projectIdPrefix);\n        }\n        return utils.findProjectId(this.app)\n            .then(function (projectId) {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('unknown-error', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            _this.projectIdPrefix = \"projects/\" + projectId;\n            return _this.projectIdPrefix;\n        });\n    };\n    RemoteConfigApiClient.prototype.toFirebaseError = function (err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        var response = err.response;\n        if (!response.isJson()) {\n            return new remote_config_utils_1.FirebaseRemoteConfigError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n        }\n        var error = response.data.error || {};\n        var code = 'unknown-error';\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\n            code = ERROR_CODE_MAPPING[error.status];\n        }\n        var message = error.message || \"Unknown server error: \" + response.text;\n        return new remote_config_utils_1.FirebaseRemoteConfigError(code, message);\n    };\n    /**\n     * Checks if the given RemoteConfigTemplate object is valid.\n     * The object must have valid parameters, parameter groups, conditions, and an etag.\n     *\n     * @param {RemoteConfigTemplate} template A RemoteConfigTemplate object to be validated.\n     */\n    RemoteConfigApiClient.prototype.validateRemoteConfigTemplate = function (template) {\n        if (!validator.isNonNullObject(template)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config template: \" + JSON.stringify(template));\n        }\n        if (!validator.isNonEmptyString(template.etag)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag must be a non-empty string.');\n        }\n        if (!validator.isNonNullObject(template.parameters)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n        }\n        if (!validator.isNonNullObject(template.parameterGroups)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n        }\n        if (!validator.isArray(template.conditions)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n        }\n    };\n    return RemoteConfigApiClient;\n}());\nexports.RemoteConfigApiClient = RemoteConfigApiClient;\nvar ERROR_CODE_MAPPING = {\n    ABORTED: 'aborted',\n    ALREADY_EXISTS: \"already-exists\",\n    INVALID_ARGUMENT: 'invalid-argument',\n    FAILED_PRECONDITION: 'failed-precondition',\n    NOT_FOUND: 'not-found',\n    OUT_OF_RANGE: 'out-of-range',\n    PERMISSION_DENIED: 'permission-denied',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'unauthenticated',\n    UNKNOWN: 'unknown-error',\n};\n"]},"metadata":{},"sourceType":"script"}