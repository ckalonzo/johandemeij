{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, storage } from \"../../firebase\";\nconst initialState = {};\nexport default function presentationMusicReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.CREATE_PUBLICATION_MUSIC:\n      {\n        let stateCopy = action.payload;\n        let file = {\n          id: action.payload.id,\n          musicName: action.payload.file.name,\n          pres_id: action.payload.pres_id,\n          file: action.payload.file,\n          url: action.payload.fileurl\n        };\n        console.log(file); // db.collection(\"presentationmusic\")\n        //     .doc()\n        //     .set(file)\n        //     .then(() => {\n        //       action.asyncDispatch(mainAction(ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS,action.payload))\n        //     })\n\n        return state;\n      }\n\n    case ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS:\n      {\n        let postImageRef = storage.ref('music/' + action.payload.file.name).put(action.payload.file);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('/music').child(action.payload.image.name).getDownloadURL().then(url => {\n            console.log(url);\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC, action.payload.pres_id));\n          });\n        });\n      }\n\n    case ACTIONS.CREATE_PUBLICATION_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_PUBLICATION_MUSIC:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_PUBLICATION_MUSIC_SUCCESS:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_PUBLICATION_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PUBLICATION_MUSIC:\n      {\n        db.collection(\"presentationmusic\").where(\"pres_id\", \"==\", action.payload).get().then(snapshot => {\n          const data = snapshot.docs.map(doc => {\n            return doc.data();\n          });\n          console.log();\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC_SUCCESS, data));\n        }).catch(err => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC_FAIL, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PUBLICATION_MUSIC_SUCCESS:\n      {\n        return action.payload[0];\n      }\n\n    case ACTIONS.LOAD_PUBLICATION_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Users/carlkalonzo/Documents/DEV/johandemeij/johan-app/src/redux/reducers/presentationMusic.reducer.js"],"names":["ACTIONS","mainAction","db","storage","initialState","presentationMusicReducer","state","action","type","CREATE_PUBLICATION_MUSIC","stateCopy","payload","file","id","musicName","name","pres_id","url","fileurl","console","log","CREATE_PUBLICATION_MUSIC_SUCCESS","postImageRef","ref","put","on","snapshot","error","child","image","getDownloadURL","then","asyncDispatch","LOAD_PUBLICATION_MUSIC","CREATE_PUBLICATION_MUSIC_FAIL","DELETE_PUBLICATION_MUSIC","DELETE_PUBLICATION_MUSIC_SUCCESS","DELETE_PUBLICATION_MUSIC_FAIL","collection","where","get","data","docs","map","doc","LOAD_PUBLICATION_MUSIC_SUCCESS","catch","err","LOAD_PUBLICATION_MUSIC_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db,storage} from \"../../firebase\";\nconst initialState = {\n   \n};\nexport default function presentationMusicReducer (state = initialState, action) {\n    switch (action.type) {\n  \n     case ACTIONS.CREATE_PUBLICATION_MUSIC : {\n      let stateCopy = action.payload\n      let file = {\n        id: action.payload.id,\n        musicName: action.payload.file.name,\n        pres_id: action.payload.pres_id,\n        file:action.payload.file, \n        url:action.payload.fileurl\n      }\n      console.log(file)\n      // db.collection(\"presentationmusic\")\n      //     .doc()\n      //     .set(file)\n      //     .then(() => {\n      //       action.asyncDispatch(mainAction(ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS,action.payload))\n      //     })\n      return state\n     }\n     case ACTIONS.CREATE_PUBLICATION_MUSIC_SUCCESS : {\n      let postImageRef = storage.ref('music/'+action.payload.file.name).put(action.payload.file);\n      postImageRef.on('state_changed',(snapshot)=>{\n        //progress function\n      },(error)=>{\n        //error\n        console.log(error)\n      },()=>{\n        //complete\n        storage.ref('/music').child(action.payload.image.name).getDownloadURL().then(url=>{\n          console.log(url)\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC,action.payload.pres_id))\n        })\n      })\n\n     }\n     case ACTIONS.CREATE_PUBLICATION_MUSIC_FAIL : {\n      return state\n     }\n     case ACTIONS.DELETE_PUBLICATION_MUSIC : {\n      return state\n     }\n     case ACTIONS.DELETE_PUBLICATION_MUSIC_SUCCESS : {\n      return state\n     }\n     case ACTIONS.DELETE_PUBLICATION_MUSIC_FAIL : {\n      return state\n     }\n     case ACTIONS.LOAD_PUBLICATION_MUSIC : {\n       db.collection(\"presentationmusic\")\n       .where(\"pres_id\",\"==\",action.payload)\n       .get()\n       .then(snapshot=>{\n         const data = snapshot.docs.map(doc => {return doc.data()})\n         console.log()\n         action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC_SUCCESS,data))\n       })\n       .catch(err=>{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PUBLICATION_MUSIC_FAIL,action.payload))\n       })\n\n      return state\n     }\n     case ACTIONS.LOAD_PUBLICATION_MUSIC_SUCCESS : {\n      return action.payload[0]\n     }\n     case ACTIONS.LOAD_PUBLICATION_MUSIC_FAIL : {\n      return state\n     }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}