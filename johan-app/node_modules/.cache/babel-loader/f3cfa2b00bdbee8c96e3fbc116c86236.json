{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function postsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_POSTS:\n      {\n        let stateCopy = '';\n        db.collection(\"posts\").where(\"showPost\", '==', '1').orderBy('postDate', 'desc').get() // .orderBy('postDate','desc')\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data;\n          db.collection(\"postimages\").get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              return stateCopy[i].image = data.filter(image => image.albumID === stateCopy[i].ID);\n            });\n          }); // console.log(stateCopy)\n\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS, stateCopy)); //  action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,data))\n          // this.setState({ posts: data });\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_POSTS_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        console.log(stateCopy);\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_POSTS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS:\n      {\n        fetch('http://127.0.0.1:5021/api/loadAllPosts').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS:\n      {\n        let stateCopy = action.payload;\n        let imageName = [];\n        fetch('http://127.0.0.1:5021/api/loadPostImages').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS, res.data));\n          imageName = stateCopy.map(post => {\n            post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage => {\n              return postImage;\n            });\n          });\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL, err)));\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/posts.reducer.js"],"names":["ACTIONS","mainAction","db","_","initialState","postsReducer","state","action","type","LOAD_POSTS","stateCopy","collection","where","orderBy","get","then","querySnapshot","data","docs","map","doc","post","i","image","filter","albumID","ID","asyncDispatch","LOAD_POSTS_SUCCESS","cloneDeep","payload","console","log","LOAD_POSTS_FAIL","LOAD_DASHBOARD_POSTS","fetch","json","res","LOAD_DASHBOARD_POSTS_SUCCESS","catch","err","LOAD_DASHBOARD_POSTS_FAIL","imageName","LOAD_POST_IMAGES_SUCCESS","Object","values","postImage","LOAD_POST_IMAGES_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {};\nexport default function postsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_POSTS: {\n      let stateCopy = ''\n      db.collection(\"posts\")\n      .where(\"showPost\",'==','1')\n      .orderBy('postDate','desc')\n      .get()\n    // .orderBy('postDate','desc')\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        stateCopy = data\n        db.collection(\"postimages\")\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy.map((post,i)=>{\n           return stateCopy[i].image = data.filter(image => image.albumID === stateCopy[i].ID)\n          })\n        });\n        // console.log(stateCopy)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,stateCopy))\n       \n      //  action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,data))\n       // this.setState({ posts: data });\n      });\n      \n      \n        return stateCopy\n      }\n      case ACTIONS.LOAD_POSTS_SUCCESS: {\n       let stateCopy = _.cloneDeep(action.payload)\n       console.log(stateCopy)\n        return action.payload\n      }\n      case ACTIONS.LOAD_POSTS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_DASHBOARD_POSTS: {\n        \n        fetch('http://127.0.0.1:5021/api/loadAllPosts')\n         .then((data) => data.json())\n         .then((res) => {\n           action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS,res.data))\n         }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_DASHBOARD_POSTS_FAIL,err)))\n        \n         return state\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_SUCCESS: {\n         let stateCopy = action.payload\n         let imageName = []\n         fetch('http://127.0.0.1:5021/api/loadPostImages')\n             .then((data) => data.json())\n             .then((res) => {\n               action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_SUCCESS,res.data))\n               imageName = stateCopy.map(post => {\n                 post.image = Object.values(res.data).filter(image => image.albumID === post.ID).map(postImage =>{\n                   return postImage\n                 })\n   \n               })\n             }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_POST_IMAGES_FAIL,err)))\n             \n         return stateCopy\n       }\n       case ACTIONS.LOAD_DASHBOARD_POSTS_FAIL: {\n \n         return state\n       }\n      default: \n        return state\n        \n    }\n  }"]},"metadata":{},"sourceType":"module"}