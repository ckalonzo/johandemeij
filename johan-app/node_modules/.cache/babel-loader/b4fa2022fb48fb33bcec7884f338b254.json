{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nconst initialState = {};\nexport default function cdInfoReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_INFO:\n      {\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"cd_info\").where(\"cdId\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\").get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              post.title = { ...data.filter(track => track.id === stateCopy[i].track_title).map(title => title.cdName)\n              };\n              post.duration = data.filter(track => track.id === stateCopy[i].track_title).map(title => title.duration);\n              post.codes = data.filter(track => track.id === stateCopy[i].track_title).map(title => title.codes); // post.grade =data.filter(track => track.id === stateCopy[i].track_title).map(title=>title.grade) \n\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cdInfo.reducer.js"],"names":["ACTIONS","mainAction","db","initialState","cdInfoReducer","state","action","type","LOAD_CD_INFO","stateCopy","collection","where","payload","get","then","querySnapshot","data","docs","map","doc","post","i","title","filter","track","id","track_title","cdName","duration","codes","asyncDispatch","LOAD_CD_INFO_SUCCESS","LOAD_CD_INFO_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AACjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,OAAO,CAACQ,YAAb;AAA2B;AAEzB,YAAIC,SAAS,GAAG,EAAhB,CAFyB,CAGzB;;AACAP,QAAAA,EAAE,CAACQ,UAAH,CAAc,SAAd,EACCC,KADD,CACO,MADP,EACc,IADd,EACmBL,MAAM,CAACM,OAD1B,EAEAC,GAFA,GAGAC,IAHA,CAGKC,aAAa,IAAI;AACrB,gBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AACAP,UAAAA,SAAS,GAAGO,IAAZ,CAFqB,CAIrB;;AACEd,UAAAA,EAAE,CAACQ,UAAH,CAAc,eAAd,EACCG,GADD,GAECC,IAFD,CAEMC,aAAa,IAAI;AACrB,kBAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAACH,IAAJ,EAA9B,CAAb;AAEAP,YAAAA,SAAS,CAACS,GAAV,CAAc,CAACE,IAAD,EAAMC,CAAN,KAAU;AACvBD,cAAAA,IAAI,CAACE,KAAL,GAAY,EAAC,GAAGN,IAAI,CAACO,MAAL,CAAYC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAahB,SAAS,CAACY,CAAD,CAAT,CAAaK,WAA/C,EAA4DR,GAA5D,CAAgEI,KAAK,IAAEA,KAAK,CAACK,MAA7E;AAAJ,eAAZ;AACAP,cAAAA,IAAI,CAACQ,QAAL,GAAgBZ,IAAI,CAACO,MAAL,CAAYC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAahB,SAAS,CAACY,CAAD,CAAT,CAAaK,WAA/C,EAA4DR,GAA5D,CAAgEI,KAAK,IAAEA,KAAK,CAACM,QAA7E,CAAhB;AACAR,cAAAA,IAAI,CAACS,KAAL,GAAYb,IAAI,CAACO,MAAL,CAAYC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAahB,SAAS,CAACY,CAAD,CAAT,CAAaK,WAA/C,EAA4DR,GAA5D,CAAgEI,KAAK,IAAEA,KAAK,CAACO,KAA7E,CAAZ,CAHuB,CAIxB;;AAEA,qBAAOT,IAAP;AACC,aAPD;AAQAd,YAAAA,MAAM,CAACwB,aAAP,CAAqB7B,UAAU,CAACD,OAAO,CAAC+B,oBAAT,EAA8BtB,SAA9B,CAA/B;AACD,WAdD,EALmB,CAoBrB;AACD,SAxBA;AA4BA,eAAOJ,KAAP;AACD;;AACD,SAAKL,OAAO,CAAC+B,oBAAb;AAAmC;AAEjC,eAAOzB,MAAM,CAACM,OAAd;AACD;;AACD,SAAKZ,OAAO,CAACgC,iBAAb;AAAgC;AAE9B,eAAO3B,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA9CJ;AAkDD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nconst initialState = {};\nexport default function cdInfoReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_CD_INFO: {\n\n        let stateCopy = ''\n        //=======================================================\n        db.collection(\"cd_info\")\n        .where(\"cdId\",\"==\",action.payload)\n       .get()\n       .then(querySnapshot => {\n         const data = querySnapshot.docs.map(doc => doc.data());\n         stateCopy = data;\n       \n         //=======================================================\n           db.collection(\"presentations\")\n           .get()\n           .then(querySnapshot => {\n             const data = querySnapshot.docs.map(doc => doc.data());\n\n             stateCopy.map((post,i)=>{\n              post.title ={...data.filter(track => track.id === stateCopy[i].track_title).map(title=>title.cdName) }\n              post.duration  =data.filter(track => track.id === stateCopy[i].track_title).map(title=>title.duration) \n              post.codes =data.filter(track => track.id === stateCopy[i].track_title).map(title=>title.codes) \n             // post.grade =data.filter(track => track.id === stateCopy[i].track_title).map(title=>title.grade) \n             \n             return post\n             })\n             action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS,stateCopy))\n           });\n         //========================================================\n       });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_CD_INFO_SUCCESS: {\n        \n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_INFO_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}