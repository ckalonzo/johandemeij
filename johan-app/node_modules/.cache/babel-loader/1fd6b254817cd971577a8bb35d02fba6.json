{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { updateEvent } from \"API/indexAPI\";\nimport { db } from \"../../firebase\";\nimport _ from 'lodash';\nconst initialState = {};\nexport default function eventsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_EVENTS:\n      {\n        fetch('http://127.0.0.1:5021/api/loadEvents').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENTS_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENTS_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_EVENTS_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_EVENTS_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_EVENT:\n      {\n        // fetch('http://127.0.0.1:5021/api/loadEventByID/'+action.payload)\n        // .then((data) => data.json())\n        // .then((res) => {\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_SUCCESS,res.data))\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_FAIL,err)))\n        db.collection(\"events\").where(\"id\", '==', '53').get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          console.log(data); // //=======================================================\n          //   db.collection(\"postimages\")\n          //   .get()\n          //   .then(querySnapshot => {\n          //     const data = querySnapshot.docs.map(doc => doc.data());\n          //     stateCopy.map((post,i)=>{\n          //     return stateCopy[i].image = data.filter(image => image.albumID === stateCopy[i].ID)\n          //     })\n          //     action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,stateCopy))\n          //   });\n          //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_EVENT_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_EVENT_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_EVENT:\n      {\n        console.log(action);\n        updateEvent(action.payload).then(json => {\n          console.log(json);\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_SUCCESS, json.data.data));\n        }).catch(err => {// action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_FAIL,err))\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_EVENT_SUCCESS:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_EVENT_FAIL:\n      {\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/events.reducer.js"],"names":["ACTIONS","mainAction","updateEvent","db","_","initialState","eventsReducer","state","action","type","LOAD_EVENTS","fetch","then","data","json","res","asyncDispatch","LOAD_EVENTS_SUCCESS","catch","err","LOAD_EVENTS_FAIL","payload","LOAD_EVENT","collection","where","get","querySnapshot","docs","map","doc","console","log","LOAD_EVENT_SUCCESS","LOAD_EVENT_FAIL","UPDATE_EVENT","UPDATE_EVENT_SUCCESS","UPDATE_EVENT_FAIL"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAAQC,WAAR,QAA0B,cAA1B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,aAAT,CAAwBC,KAAK,GAAGF,YAAhC,EAA8CG,MAA9C,EAAsD;AACjE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKT,OAAO,CAACU,WAAb;AAA0B;AACzBC,QAAAA,KAAK,CAAC,sCAAD,CAAL,CACEC,IADF,CACQC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADjB,EAEEF,IAFF,CAEQG,GAAD,IAAS;AACbP,UAAAA,MAAM,CAACQ,aAAP,CAAqBf,UAAU,CAACD,OAAO,CAACiB,mBAAT,EAA6BF,GAAG,CAACF,IAAjC,CAA/B;AACD,SAJF,EAIIK,KAJJ,CAIUC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBf,UAAU,CAACD,OAAO,CAACoB,gBAAT,EAA0BD,GAA1B,CAA/B,CAJjB;AAMC,eAAOZ,KAAP;AACD;;AACD,SAAKP,OAAO,CAACiB,mBAAb;AAAkC;AAChC,eAAOT,MAAM,CAACa,OAAd;AACD;;AACD,SAAKrB,OAAO,CAACoB,gBAAb;AAA+B;AAE7B,eAAOb,KAAP;AACD;;AACD,SAAKP,OAAO,CAACsB,UAAb;AAAwB;AACtB;AACA;AACA;AACA;AACA;AACAnB,QAAAA,EAAE,CAACoB,UAAH,CAAc,QAAd,EACCC,KADD,CACO,IADP,EACY,IADZ,EACiB,IADjB,EAECC,GAFD,GAGCb,IAHD,CAGMc,aAAa,IAAI;AACrB,gBAAMb,IAAI,GAAGa,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,IAAIA,GAAG,CAAChB,IAAJ,EAA9B,CAAb;AACAiB,UAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ,EAFqB,CAIrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,SAlBD;AAoBA,eAAON,KAAP;AACD;;AACD,SAAKP,OAAO,CAACgC,kBAAb;AAAgC;AAC9B,eAAOxB,MAAM,CAACa,OAAd;AACD;;AACD,SAAKrB,OAAO,CAACiC,eAAb;AAA6B;AAC3B,eAAO1B,KAAP;AACD;;AACD,SAAKP,OAAO,CAACkC,YAAb;AAA2B;AACzBJ,QAAAA,OAAO,CAACC,GAAR,CAAYvB,MAAZ;AACAN,QAAAA,WAAW,CAACM,MAAM,CAACa,OAAR,CAAX,CAA4BT,IAA5B,CAAiCE,IAAI,IAAE;AACrCgB,UAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACAN,UAAAA,MAAM,CAACQ,aAAP,CAAqBf,UAAU,CAACD,OAAO,CAACmC,oBAAT,EAA8BrB,IAAI,CAACD,IAAL,CAAUA,IAAxC,CAA/B;AACD,SAHD,EAGGK,KAHH,CAGSC,GAAG,IAAE,CACb;AACA,SALD;AAOA,eAAOZ,KAAP;AACD;;AACD,SAAKP,OAAO,CAACmC,oBAAb;AAAmC;AACjC,eAAO5B,KAAP;AACD;;AACD,SAAKP,OAAO,CAACoC,iBAAb;AAAgC;AAE9B,eAAO7B,KAAP;AACD;;AAED;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AAxEJ;AA4ED","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport {updateEvent} from \"API/indexAPI\"\nimport { db } from \"../../firebase\";\nimport _ from 'lodash'\nconst initialState = {};\nexport default function eventsReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_EVENTS: {\n       fetch('http://127.0.0.1:5021/api/loadEvents')\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENTS_SUCCESS,res.data))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENTS_FAIL,err)))\n\n        return state\n      }\n      case ACTIONS.LOAD_EVENTS_SUCCESS: {\n        return action.payload\n      }\n      case ACTIONS.LOAD_EVENTS_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_EVENT:{\n        // fetch('http://127.0.0.1:5021/api/loadEventByID/'+action.payload)\n        // .then((data) => data.json())\n        // .then((res) => {\n        //   action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_SUCCESS,res.data))\n        // }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_EVENT_FAIL,err)))\n        db.collection(\"events\")\n        .where(\"id\",'==','53')\n        .get()\n        .then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          console.log(data)\n  \n          // //=======================================================\n          //   db.collection(\"postimages\")\n          //   .get()\n          //   .then(querySnapshot => {\n          //     const data = querySnapshot.docs.map(doc => doc.data());\n          //     stateCopy.map((post,i)=>{\n          //     return stateCopy[i].image = data.filter(image => image.albumID === stateCopy[i].ID)\n          //     })\n          //     action.asyncDispatch(mainAction(ACTIONS.LOAD_POSTS_SUCCESS,stateCopy))\n          //   });\n          //========================================================\n        });\n\n        return state\n      }\n      case ACTIONS.LOAD_EVENT_SUCCESS:{\n        return action.payload\n      }\n      case ACTIONS.LOAD_EVENT_FAIL:{\n        return state\n      }\n      case ACTIONS.UPDATE_EVENT: {\n        console.log(action)\n        updateEvent(action.payload).then(json=>{\n          console.log(json)\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_SUCCESS,json.data.data))\n        }).catch(err=>{\n         // action.asyncDispatch(mainAction(ACTIONS.UPDATE_EVENT_FAIL,err))\n        })\n\n        return state\n      }\n      case ACTIONS.UPDATE_EVENT_SUCCESS: {\n        return state\n      }\n      case ACTIONS.UPDATE_EVENT_FAIL: {\n\n        return state\n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}