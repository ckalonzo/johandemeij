{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db } from \"../../firebase\";\nimport _, { orderBy } from 'lodash';\nconst initialState = {};\nexport default function cdInfoReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_CD_INFO:\n      {\n        let stateCopy = ''; //=======================================================\n\n        db.collection(\"cd_info\").where(\"cdId\", \"==\", action.payload).orderBy(\"id\", \"desc\").get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => doc.data());\n          stateCopy = data; //=======================================================\n\n          db.collection(\"presentations\").get().then(querySnapshot => {\n            const data = querySnapshot.docs.map(doc => doc.data());\n            stateCopy.map((post, i) => {\n              post.title = data.filter(track => track.id === stateCopy[i].track_title).map(title => title.cdName);\n              post.duration = data.filter(track => track.id === stateCopy[i].track_title).map(title => title.totalTime);\n              post.codes = data.filter(track => track.id === stateCopy[i].track_title).map(title => title.codes); // post.grade =data.filter(track => track.id === stateCopy[i].track_title).map(title=>title.grade) \n\n              return post;\n            });\n            action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS, stateCopy));\n          }); //========================================================\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.LOAD_CD_INFO_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_INFO:\n      {\n        let cd_id;\n        db.collection(\"cd_info\").where(\"id\", '==', action.payload.id).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            cd_id = doc.id;\n            return doc.data();\n          });\n          db.collection(\"cd_info\").doc(cd_id).update(action.payload).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_INFO_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_INFO_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO, action.payload.cdId));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_CD_INFO_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.CREATE_CD_INFO:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        console.log(action.payload);\n        db.collection(\"cd_info\").add(stateCopy).then(docRef => {\n          stateCopy._id = docRef.id;\n          db.collection(\"cd_info\").doc(docRef.id).update({\n            _id: docRef.id\n          }).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_CD_INFO_SUCCESS, stateCopy));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.CREATE_CD_INFO_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO, action.payload.cdId));\n        return state;\n      }\n\n    case ACTIONS.CREATE_CD_INFO_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.DELETE_CD_INFO:\n      {\n        console.log(action);\n        db.collection(\"cd_info\").where('id', '==', action.payload.id).get().then(querySnapshot => {\n          querySnapshot.forEach(doc => doc.ref.delete());\n          action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS, action.payload.cdId));\n        });\n      }\n\n    case ACTIONS.DELETE_CD_INFO_SUCCESS:\n      {\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO, action.payload));\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/cdInfo.reducer.js"],"names":["ACTIONS","mainAction","db","_","orderBy","initialState","cdInfoReducer","state","action","type","LOAD_CD_INFO","stateCopy","collection","where","payload","get","then","querySnapshot","data","docs","map","doc","post","i","title","filter","track","id","track_title","cdName","duration","totalTime","codes","asyncDispatch","LOAD_CD_INFO_SUCCESS","LOAD_CD_INFO_FAIL","UPDATE_CD_INFO","cd_id","update","UPDATE_CD_INFO_SUCCESS","cdId","UPDATE_CD_INFO_FAIL","CREATE_CD_INFO","cloneDeep","console","log","add","docRef","_id","CREATE_CD_INFO_SUCCESS","CREATE_CD_INFO_FAIL","DELETE_CD_INFO","forEach","ref","delete","DELETE_POST_SUCCESS","DELETE_CD_INFO_SUCCESS"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db } from \"../../firebase\";\nimport _, { orderBy } from 'lodash'\nconst initialState = {};\nexport default function cdInfoReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_CD_INFO: {\n\n        let stateCopy = ''\n        //=======================================================\n        db.collection(\"cd_info\")\n        .where(\"cdId\",\"==\",action.payload)\n        .orderBy(\"id\",\"desc\")\n       .get()\n       .then(querySnapshot => {\n         const data = querySnapshot.docs.map(doc => doc.data());\n         stateCopy = data;\n       \n         //=======================================================\n           db.collection(\"presentations\")\n           .get()\n           .then(querySnapshot => {\n             const data = querySnapshot.docs.map(doc => doc.data());\n\n             stateCopy.map((post,i)=>{\n              post.title =data.filter(track => track.id === stateCopy[i].track_title).map(title=>title.cdName) \n              post.duration  =data.filter(track => track.id === stateCopy[i].track_title).map(title=>title.totalTime) \n              post.codes =data.filter(track => track.id === stateCopy[i].track_title).map(title=>title.codes) \n             // post.grade =data.filter(track => track.id === stateCopy[i].track_title).map(title=>title.grade) \n             \n             return post\n             })\n             action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO_SUCCESS,stateCopy))\n           });\n         //========================================================\n       });\n\n\n\n        return state\n      }\n      case ACTIONS.LOAD_CD_INFO_SUCCESS: {\n        \n        return action.payload\n      }\n      case ACTIONS.LOAD_CD_INFO_FAIL: {\n\n        return state\n      }\n      case ACTIONS.UPDATE_CD_INFO:{\n       let cd_id\n        db.collection(\"cd_info\")\n        .where(\"id\",'==',action.payload.id)\n         .get()\n         .then(querySnapshot => {\n           const data = querySnapshot.docs.map(doc => {\n            cd_id=doc.id\n            return doc.data()}); \n            db.collection(\"cd_info\").doc(cd_id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_CD_INFO_SUCCESS,action.payload))\n        });\n          \n          })\n       \n        return state\n      }\n      case ACTIONS.UPDATE_CD_INFO_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO,action.payload.cdId))\n        return state\n      }\n      case ACTIONS.UPDATE_CD_INFO_FAIL:{\n        return state\n      }\n      case ACTIONS.CREATE_CD_INFO:{\n        let stateCopy = _.cloneDeep(action.payload)\n        console.log(action.payload)\n          db.collection(\"cd_info\")\n          .add(stateCopy)\n          .then((docRef)=>{\n            stateCopy._id = docRef.id\n            db.collection(\"cd_info\")\n            .doc(docRef.id)\n            .update({_id:docRef.id}).then(()=>{\n              action.asyncDispatch(mainAction(ACTIONS.CREATE_CD_INFO_SUCCESS,stateCopy))\n            });\n           \n          });\n        return state\n      }\n      case ACTIONS.CREATE_CD_INFO_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO,action.payload.cdId))\n        return state\n      }\n      case ACTIONS.CREATE_CD_INFO_FAIL:{\n        return state\n      }\n      case ACTIONS.DELETE_CD_INFO:{\n        console.log(action)\n        db.collection(\"cd_info\")\n        .where('id','==',action.payload.id)\n         .get()\n         .then((querySnapshot) => {\n           querySnapshot.forEach((doc)=> doc.ref.delete())\n           action.asyncDispatch(mainAction(ACTIONS.DELETE_POST_SUCCESS,action.payload.cdId))\n         });\n      }\n      case ACTIONS.DELETE_CD_INFO_SUCCESS:{\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_CD_INFO,action.payload))\n        return state\n      }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}