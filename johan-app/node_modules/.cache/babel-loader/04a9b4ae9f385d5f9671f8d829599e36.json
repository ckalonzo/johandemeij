{"ast":null,"code":"/*! firebase-admin v8.12.1 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar validator = require(\"../utils/validator\");\n\nvar remote_config_utils_1 = require(\"./remote-config-utils\");\n\nvar remote_config_api_client_1 = require(\"./remote-config-api-client\");\n/**\n * Internals of an RemoteConfig service instance.\n */\n\n\nvar RemoteConfigInternals =\n/** @class */\nfunction () {\n  function RemoteConfigInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n   */\n\n\n  RemoteConfigInternals.prototype.delete = function () {\n    // There are no resources to clean up\n    return Promise.resolve(undefined);\n  };\n\n  return RemoteConfigInternals;\n}();\n/**\n * Remote Config service bound to the provided app.\n */\n\n\nvar RemoteConfig =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app for this RemoteConfig service.\n   * @constructor\n   */\n  function RemoteConfig(app) {\n    this.app = app;\n    this.INTERNAL = new RemoteConfigInternals();\n    this.client = new remote_config_api_client_1.RemoteConfigApiClient(app);\n  }\n  /**\n  * Gets the current active version of the Remote Config template of the project.\n  *\n  * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when the template is available.\n  */\n\n\n  RemoteConfig.prototype.getTemplate = function () {\n    return this.client.getTemplate().then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\n   * Validates a Remote Config template.\n   *\n   * @param {RemoteConfigTemplate} template The Remote Config template to be validated.\n   *\n   * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when a template is validated.\n   */\n\n\n  RemoteConfig.prototype.validateTemplate = function (template) {\n    return this.client.validateTemplate(template).then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\n   * Publishes a Remote Config template.\n   *\n   * @param {RemoteConfigTemplate} template The Remote Config template to be validated.\n   * @param {any=} options Optional options object when publishing a Remote Config template.\n   *\n   * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when a template is published.\n   */\n\n\n  RemoteConfig.prototype.publishTemplate = function (template, options) {\n    return this.client.publishTemplate(template, options).then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\n   * Creates and returns a new Remote Config template from a JSON string.\n   *\n   * @param {string} json The JSON string to populate a Remote Config template.\n   *\n   * @return {RemoteConfigTemplate} A new template instance.\n   */\n\n\n  RemoteConfig.prototype.createTemplateFromJSON = function (json) {\n    if (!validator.isNonEmptyString(json)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'JSON string must be a valid non-empty string');\n    }\n\n    var template;\n\n    try {\n      template = JSON.parse(json);\n    } catch (e) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', \"Failed to parse the JSON string: \" + json + \". \" + e);\n    }\n\n    return new RemoteConfigTemplateImpl(template);\n  };\n\n  return RemoteConfig;\n}();\n\nexports.RemoteConfig = RemoteConfig;\n/**\n * Remote Config template internal implementation.\n */\n\nvar RemoteConfigTemplateImpl =\n/** @class */\nfunction () {\n  function RemoteConfigTemplateImpl(config) {\n    if (!validator.isNonNullObject(config) || !validator.isNonEmptyString(config.etag)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config template: \" + JSON.stringify(config));\n    }\n\n    this.etagInternal = config.etag;\n\n    if (typeof config.parameters !== 'undefined') {\n      if (!validator.isNonNullObject(config.parameters)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n      }\n\n      this.parameters = config.parameters;\n    } else {\n      this.parameters = {};\n    }\n\n    if (typeof config.parameterGroups !== 'undefined') {\n      if (!validator.isNonNullObject(config.parameterGroups)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n      }\n\n      this.parameterGroups = config.parameterGroups;\n    } else {\n      this.parameterGroups = {};\n    }\n\n    if (typeof config.conditions !== 'undefined') {\n      if (!validator.isArray(config.conditions)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n      }\n\n      this.conditions = config.conditions;\n    } else {\n      this.conditions = [];\n    }\n  }\n\n  Object.defineProperty(RemoteConfigTemplateImpl.prototype, \"etag\", {\n    /**\n     * Gets the ETag of the template.\n     *\n     * @return {string} The ETag of the Remote Config template.\n     */\n    get: function () {\n      return this.etagInternal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @return {RemoteConfigTemplate} A JSON-serializable representation of this object.\n   */\n\n  RemoteConfigTemplateImpl.prototype.toJSON = function () {\n    return {\n      conditions: this.conditions,\n      parameters: this.parameters,\n      parameterGroups: this.parameterGroups,\n      etag: this.etag\n    };\n  };\n\n  return RemoteConfigTemplateImpl;\n}();","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/firebase-admin/lib/remote-config/remote-config.js"],"names":["Object","defineProperty","exports","value","validator","require","remote_config_utils_1","remote_config_api_client_1","RemoteConfigInternals","prototype","delete","Promise","resolve","undefined","RemoteConfig","app","INTERNAL","client","RemoteConfigApiClient","getTemplate","then","templateResponse","RemoteConfigTemplateImpl","validateTemplate","template","publishTemplate","options","createTemplateFromJSON","json","isNonEmptyString","FirebaseRemoteConfigError","JSON","parse","e","config","isNonNullObject","etag","stringify","etagInternal","parameters","parameterGroups","conditions","isArray","get","enumerable","configurable","toJSON"],"mappings":"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","sourcesContent":["/*! firebase-admin v8.12.1 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar validator = require(\"../utils/validator\");\nvar remote_config_utils_1 = require(\"./remote-config-utils\");\nvar remote_config_api_client_1 = require(\"./remote-config-api-client\");\n/**\n * Internals of an RemoteConfig service instance.\n */\nvar RemoteConfigInternals = /** @class */ (function () {\n    function RemoteConfigInternals() {\n    }\n    /**\n     * Deletes the service and its associated resources.\n     *\n     * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n     */\n    RemoteConfigInternals.prototype.delete = function () {\n        // There are no resources to clean up\n        return Promise.resolve(undefined);\n    };\n    return RemoteConfigInternals;\n}());\n/**\n * Remote Config service bound to the provided app.\n */\nvar RemoteConfig = /** @class */ (function () {\n    /**\n     * @param {FirebaseApp} app The app for this RemoteConfig service.\n     * @constructor\n     */\n    function RemoteConfig(app) {\n        this.app = app;\n        this.INTERNAL = new RemoteConfigInternals();\n        this.client = new remote_config_api_client_1.RemoteConfigApiClient(app);\n    }\n    /**\n    * Gets the current active version of the Remote Config template of the project.\n    *\n    * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when the template is available.\n    */\n    RemoteConfig.prototype.getTemplate = function () {\n        return this.client.getTemplate()\n            .then(function (templateResponse) {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    };\n    /**\n     * Validates a Remote Config template.\n     *\n     * @param {RemoteConfigTemplate} template The Remote Config template to be validated.\n     *\n     * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when a template is validated.\n     */\n    RemoteConfig.prototype.validateTemplate = function (template) {\n        return this.client.validateTemplate(template)\n            .then(function (templateResponse) {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    };\n    /**\n     * Publishes a Remote Config template.\n     *\n     * @param {RemoteConfigTemplate} template The Remote Config template to be validated.\n     * @param {any=} options Optional options object when publishing a Remote Config template.\n     *\n     * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when a template is published.\n     */\n    RemoteConfig.prototype.publishTemplate = function (template, options) {\n        return this.client.publishTemplate(template, options)\n            .then(function (templateResponse) {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    };\n    /**\n     * Creates and returns a new Remote Config template from a JSON string.\n     *\n     * @param {string} json The JSON string to populate a Remote Config template.\n     *\n     * @return {RemoteConfigTemplate} A new template instance.\n     */\n    RemoteConfig.prototype.createTemplateFromJSON = function (json) {\n        if (!validator.isNonEmptyString(json)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'JSON string must be a valid non-empty string');\n        }\n        var template;\n        try {\n            template = JSON.parse(json);\n        }\n        catch (e) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', \"Failed to parse the JSON string: \" + json + \". \" + e);\n        }\n        return new RemoteConfigTemplateImpl(template);\n    };\n    return RemoteConfig;\n}());\nexports.RemoteConfig = RemoteConfig;\n/**\n * Remote Config template internal implementation.\n */\nvar RemoteConfigTemplateImpl = /** @class */ (function () {\n    function RemoteConfigTemplateImpl(config) {\n        if (!validator.isNonNullObject(config) ||\n            !validator.isNonEmptyString(config.etag)) {\n            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config template: \" + JSON.stringify(config));\n        }\n        this.etagInternal = config.etag;\n        if (typeof config.parameters !== 'undefined') {\n            if (!validator.isNonNullObject(config.parameters)) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n            }\n            this.parameters = config.parameters;\n        }\n        else {\n            this.parameters = {};\n        }\n        if (typeof config.parameterGroups !== 'undefined') {\n            if (!validator.isNonNullObject(config.parameterGroups)) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n            }\n            this.parameterGroups = config.parameterGroups;\n        }\n        else {\n            this.parameterGroups = {};\n        }\n        if (typeof config.conditions !== 'undefined') {\n            if (!validator.isArray(config.conditions)) {\n                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n            }\n            this.conditions = config.conditions;\n        }\n        else {\n            this.conditions = [];\n        }\n    }\n    Object.defineProperty(RemoteConfigTemplateImpl.prototype, \"etag\", {\n        /**\n         * Gets the ETag of the template.\n         *\n         * @return {string} The ETag of the Remote Config template.\n         */\n        get: function () {\n            return this.etagInternal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {RemoteConfigTemplate} A JSON-serializable representation of this object.\n     */\n    RemoteConfigTemplateImpl.prototype.toJSON = function () {\n        return {\n            conditions: this.conditions,\n            parameters: this.parameters,\n            parameterGroups: this.parameterGroups,\n            etag: this.etag,\n        };\n    };\n    return RemoteConfigTemplateImpl;\n}());\n"]},"metadata":{},"sourceType":"script"}