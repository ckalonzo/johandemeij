{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport _ from \"lodash\";\nconst initialState = {\n  categories: [{\n    \"Compositions\": {\n      id: 1\n    }\n  }, {\n    \"Amstel Classics\": {\n      id: 2\n    }\n  }, {\n    \"Music for the Theatre\": {\n      id: 3\n    }\n  }, {\n    \"Symphony Orchestra\": {\n      id: 4\n    }\n  }, {\n    \"The Music of S&oslash;ren Hyldgaard\": {\n      id: 5\n    }\n  }, {\n    \"Solo Concertos\": {\n      id: 6\n    }\n  }],\n  allPresentations: []\n};\nexport default function musicReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_MUSIC:\n      {\n        fetch('http://localhost:3001/api/loadPresentations/0/0').then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        stateCopy.allPresentations = action.payload;\n        return stateCopy;\n      }\n\n    case ACTIONS.LOAD_MUSIC_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_BY_CATEGORY:\n      {\n        fetch('http://localhost:3001/api/filterPresentationCategory' + action.payload).then(data => data.json()).then(res => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS, res.data));\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johandemeij-master/johan-app/src/redux/reducers/music.reducer.js"],"names":["ACTIONS","mainAction","_","initialState","categories","id","allPresentations","musicReducer","state","action","type","LOAD_MUSIC","fetch","then","data","json","res","asyncDispatch","LOAD_MUSIC_SUCCESS","catch","err","LOAD_MUSIC_FAIL","stateCopy","cloneDeep","payload","LOAD_MUSIC_BY_CATEGORY","LOAD_MUSIC_BY_CATEGORY_SUCCESS"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAC,CAAC;AAAC,oBAAe;AAACC,MAAAA,EAAE,EAAC;AAAJ;AAAhB,GAAD,EAAyB;AAAC,uBAAkB;AAACA,MAAAA,EAAE,EAAC;AAAJ;AAAnB,GAAzB,EAAoD;AAAC,6BAAwB;AAACA,MAAAA,EAAE,EAAC;AAAJ;AAAzB,GAApD,EAAqF;AAAC,0BAAqB;AAACA,MAAAA,EAAE,EAAC;AAAJ;AAAtB,GAArF,EAAmH;AAAC,2CAAsC;AAACA,MAAAA,EAAE,EAAC;AAAJ;AAAvC,GAAnH,EAAkK;AAAC,sBAAiB;AAACA,MAAAA,EAAE,EAAC;AAAJ;AAAlB,GAAlK,CADM;AAEjBC,EAAAA,gBAAgB,EAAC;AAFA,CAArB;AAIA,eAAe,SAASC,YAAT,CAAuBC,KAAK,GAAGL,YAA/B,EAA6CM,MAA7C,EAAqD;AAChE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKV,OAAO,CAACW,UAAb;AAAyB;AACxBC,QAAAA,KAAK,CAAC,iDAAD,CAAL,CACEC,IADF,CACQC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADjB,EAEEF,IAFF,CAEQG,GAAD,IAAS;AACbP,UAAAA,MAAM,CAACQ,aAAP,CAAqBhB,UAAU,CAACD,OAAO,CAACkB,kBAAT,EAA4BF,GAAG,CAACF,IAAhC,CAA/B;AACD,SAJF,EAIIK,KAJJ,CAIUC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBhB,UAAU,CAACD,OAAO,CAACqB,eAAT,EAAyBD,GAAzB,CAA/B,CAJjB;AAMC,eAAOZ,KAAP;AACD;;AAED,SAAKR,OAAO,CAACkB,kBAAb;AAAiC;AAC7B,YAAII,SAAS,GAAGpB,CAAC,CAACqB,SAAF,CAAYf,KAAZ,CAAhB;;AACAc,QAAAA,SAAS,CAAChB,gBAAV,GAA6BG,MAAM,CAACe,OAApC;AACF,eAAOF,SAAP;AACD;;AACD,SAAKtB,OAAO,CAACqB,eAAb;AAA8B;AAE5B,eAAOb,KAAP;AACD;;AACD,SAAKR,OAAO,CAACyB,sBAAb;AAAoC;AAClCb,QAAAA,KAAK,CAAC,yDAAuDH,MAAM,CAACe,OAA/D,CAAL,CACCX,IADD,CACOC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADhB,EAECF,IAFD,CAEOG,GAAD,IAAS;AACbP,UAAAA,MAAM,CAACQ,aAAP,CAAqBhB,UAAU,CAACD,OAAO,CAAC0B,8BAAT,EAAwCV,GAAG,CAACF,IAA5C,CAA/B;AACD,SAJD,EAIGK,KAJH,CAISC,GAAG,IAAIX,MAAM,CAACQ,aAAP,CAAqBhB,UAAU,CAACD,OAAO,CAACqB,eAAT,EAAyBD,GAAzB,CAA/B,CAJhB;AAKC,eAAOZ,KAAP;AACF;;AACD,SAAKR,OAAO,CAAC0B,8BAAb;AAA4C;AACzC,eAAOjB,MAAM,CAACe,OAAd;AACF;;AAED;AACE,aAAO,EACL,GAAGhB;AADE,OAAP;AAlCJ;AAsCD","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport _ from \"lodash\"\n\nconst initialState = {\n    categories:[{\"Compositions\":{id:1}},{\"Amstel Classics\":{id:2}},{\"Music for the Theatre\":{id:3}},{\"Symphony Orchestra\":{id:4}},{\"The Music of S&oslash;ren Hyldgaard\":{id:5}},{\"Solo Concertos\":{id:6}}],\n    allPresentations:[]\n};\nexport default function musicReducer (state = initialState, action) {\n    switch (action.type) {\n  \n      case ACTIONS.LOAD_MUSIC: {\n       fetch('http://localhost:3001/api/loadPresentations/0/0')\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_SUCCESS,res.data))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_FAIL,err)))\n\n        return state\n      }\n      \n      case ACTIONS.LOAD_MUSIC_SUCCESS: {\n          let stateCopy = _.cloneDeep(state)\n          stateCopy.allPresentations = action.payload\n        return stateCopy\n      }\n      case ACTIONS.LOAD_MUSIC_FAIL: {\n\n        return state\n      }\n      case ACTIONS.LOAD_MUSIC_BY_CATEGORY:{\n        fetch('http://localhost:3001/api/filterPresentationCategory'+action.payload)\n        .then((data) => data.json())\n        .then((res) => {\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS,res.data))\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.LOAD_MUSIC_FAIL,err)))\n         return state \n      }\n      case ACTIONS.LOAD_MUSIC_BY_CATEGORY_SUCCESS:{\n         return action.payload \n      }\n      \n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}