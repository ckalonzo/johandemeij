{"ast":null,"code":"import { ACTIONS } from 'redux/actions/types.js';\nimport { mainAction } from \"redux/actions/index.actions\";\nimport { db, storageRef, ref, storage } from \"../../firebase\";\nimport _ from \"lodash\";\nimport { createPresentation, updatePresentation, updatePresentationImage, uploadPresentationImage } from \"API/indexAPI\";\nconst initialState = {};\nexport default function presentationReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.DELETE_PRESENTATION_IMAGE:\n      {\n        let presentation = {};\n\n        if (action.payload.imageType === \"frontCover\") {\n          presentation = {\n            frontCover: \"\",\n            frontCaption: \"\"\n          };\n        } else {\n          presentation = {\n            backCover: \"\",\n            backCaption: \"\"\n          };\n        }\n\n        console.log(action); // db.collection(\"presentations\").doc(action.payload.docId)\n        // .update(presentation).then(()=>{   \n\n        db.collection(\"postimages\").where('albumID', '==', action.payload.ID).where('cover', '==', action.payload.imageType).get().then(querySnapshot => {\n          console.log(querySnapshot.docs);\n          querySnapshot.forEach(doc => {\n            console.log(doc.ref.id, doc.ref.parent, doc.ref.path); //doc.ref.delete()\n          }); // action.asyncDispatch(mainAction(ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS,action.payload))\n        }); // });\n\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('posts/' + action.payload.name);\n        postImageRef.delete().then(() => console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST, action.payload.ID));\n        return state;\n      }\n\n    case ACTIONS.DELETE_PRESENTATION_IMAGE_FAIL:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        db.collection(\"presentations\").add(stateCopy).then(function (docRef) {\n          stateCopy._id = docRef.id;\n          db.collection(\"presentations\").doc(docRef.id).update({\n            _id: docRef.id\n          }).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS, stateCopy));\n          });\n        });\n        return stateCopy;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS:\n      {\n        return action.payload;\n      }\n\n    case ACTIONS.CREATE_NEW_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let _id = '';\n        db.collection(\"presentations\").where(\"id\", \"==\", action.payload).get().then(querySnapshot => {\n          const data = querySnapshot.docs.map(doc => {\n            //  _id=doc.id\n            return doc.data();\n          });\n          stateCopy = data; //  stateCopy[0]._id = _id\n\n          action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS, data));\n        });\n        return state;\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_SUCCESS:\n      {\n        return action.payload.length > 0 ? action.payload[0] : [];\n      }\n\n    case ACTIONS.LOAD_PRESENTATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION:\n      {\n        console.log(action);\n        db.collection(\"presentations\").doc(action.payload._id).update(action.payload).then(() => {\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS, action.payload));\n        });\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION, stateCopy.id));\n        return {\n          state,\n          ...action.payload\n        };\n      }\n\n    case ACTIONS.UPDATE_PUBLICATION_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        let stateCopy = _.cloneDeep(action.payload);\n\n        let image = stateCopy.image;\n        updatePresentationImage(image).then(json => {\n          if (json.status !== 404 || json.status !== 500) {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS, {\n              submitted: stateCopy,\n              json\n            }));\n          } else {\n            action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, json.response.message));\n          }\n        }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL, err)));\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let stateCopy = _.cloneDeep(state);\n\n        let newImage = {\n          _id: action.payload.submitted._id,\n          albumID: action.payload.submitted.albumID,\n          caption: action.payload.submitted.caption,\n          cover: action.payload.submitted.cover,\n          imageName: action.payload.json.data.filename,\n          updatedAt: Date.now()\n        };\n        stateCopy.currentID = action.payload.submitted.albumID;\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_POST_IMAGE, newImage));\n        return stateCopy;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE:\n      {\n        console.log(action);\n        let image = {\n          albumID: action.payload.albumID,\n          caption: action.payload.caption ? action.payload.caption : \"\",\n          cover: action.payload.cover ? action.payload.cover : \"\",\n          imageName: action.payload.image.name\n        };\n        let presentation = {};\n\n        if (action.payload.cover === \"frontCover\") {\n          presentation = {\n            frontCover: action.payload.image.name,\n            frontCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        } else {\n          presentation = {\n            backCover: action.payload.image.name,\n            backCaption: action.payload.caption ? action.payload.caption : \"\"\n          };\n        }\n\n        db.collection(\"presentations\").doc(action.payload.docId).update(presentation).then(() => {\n          db.collection(\"postimages\").doc().set(image).then(() => {\n            action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS, action.payload));\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:\n      {\n        let postImageRef = storage.ref('posts/' + action.payload.image.name).put(action.payload.image);\n        postImageRef.on('state_changed', snapshot => {//progress function\n        }, error => {\n          //error\n          console.log(error);\n        }, () => {\n          //complete\n          storage.ref('/posts').child(action.payload.image.name).getDownloadURL().then(url => {\n            console.log(url);\n          });\n        });\n        return state;\n      }\n\n    case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:\n      {\n        return state;\n      }\n\n    case ACTIONS.UPDATE_PRESENTATION_IMAGE:\n      {\n        console.log(action);\n        let image = '';\n\n        if (action.submitted.cover === \"frontCover\") {\n          image = {\n            frontCover: action.json.data.filename,\n            frontCaption: action.submitted.caption\n          };\n        } else {\n          image = {\n            backCover: action.json.data.filename,\n            backCaption: action.submitted.caption\n          };\n        }\n\n        action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION, image));\n        return state;\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/src/redux/reducers/presentation.reducer.js"],"names":["ACTIONS","mainAction","db","storageRef","ref","storage","_","createPresentation","updatePresentation","updatePresentationImage","uploadPresentationImage","initialState","presentationReducer","state","action","type","DELETE_PRESENTATION_IMAGE","presentation","payload","imageType","frontCover","frontCaption","backCover","backCaption","console","log","collection","where","ID","get","then","querySnapshot","docs","forEach","doc","id","parent","path","DELETE_PRESENTATION_IMAGE_SUCCESS","postImageRef","name","delete","asyncDispatch","LOAD_POST","DELETE_PRESENTATION_IMAGE_FAIL","CREATE_NEW_PUBLICATION","stateCopy","cloneDeep","add","docRef","_id","update","CREATE_NEW_PUBLICATION_SUCCESS","CREATE_NEW_PUBLICATION_FAIL","LOAD_PRESENTATION","data","map","LOAD_PRESENTATION_SUCCESS","length","LOAD_PRESENTATION_FAIL","UPDATE_PUBLICATION","UPDATE_PUBLICATION_SUCCESS","UPDATE_PUBLICATION_FAIL","UPDATE_PRESENTATION_IMAGE","image","json","status","UPDATE_PRESENTATION_IMAGE_SUCCESS","submitted","UPDATE_PRESENTATION_IMAGE_FAIL","response","message","catch","err","newImage","albumID","caption","cover","imageName","filename","updatedAt","Date","now","currentID","UPDATE_POST_IMAGE","UPLOAD_PRESENTATION_IMAGE","docId","set","UPLOAD_PRESENTATION_IMAGE_SUCCESS","put","on","snapshot","error","child","getDownloadURL","url","UPLOAD_PRESENTATION_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import { ACTIONS } from 'redux/actions/types.js'\nimport { mainAction } from \"redux/actions/index.actions\"\nimport { db, storageRef , ref,storage} from \"../../firebase\";\nimport  _ from \"lodash\"\nimport {createPresentation,updatePresentation,updatePresentationImage,uploadPresentationImage} from \"API/indexAPI\"\nconst initialState = {};\nexport default function presentationReducer (state = initialState, action) {\n    switch (action.type) {\n      case ACTIONS.DELETE_PRESENTATION_IMAGE:{\n        let presentation= {}\n        if(action.payload.imageType === \"frontCover\"){\n         presentation = {\n           frontCover : \"\",\n           frontCaption:\"\",\n         }\n        } else {\n          presentation = {\n            backCover : \"\",\n            backCaption:\"\",\n          }\n        }\nconsole.log(action)\n       // db.collection(\"presentations\").doc(action.payload.docId)\n       // .update(presentation).then(()=>{   \n\n          db.collection(\"postimages\")\n          .where('albumID','==',action.payload.ID)\n          .where('cover','==',action.payload.imageType)\n           .get()\n           .then((querySnapshot) => {\n            console.log(querySnapshot.docs)\n            querySnapshot.forEach((doc)=>{\n               console.log(doc.ref.id,doc.ref.parent,doc.ref.path)\n               //doc.ref.delete()\n              })\n           // action.asyncDispatch(mainAction(ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS,action.payload))\n           });\n       // });\n\n        \n        return state\n      }  \n      case ACTIONS.DELETE_PRESENTATION_IMAGE_SUCCESS:{\n\n        let postImageRef = storage.ref('posts/'+action.payload.name)\n        postImageRef.delete().then(()=>console.log(\"file deleted\"));\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_POST,action.payload.ID))\n        return state\n      }  \n      case ACTIONS.DELETE_PRESENTATION_IMAGE_FAIL:{\n        \n        return action.payload\n      }  \n        case ACTIONS.CREATE_NEW_PUBLICATION: {\n          let stateCopy = _.cloneDeep(action.payload)\n      \n          db.collection(\"presentations\")\n            .add(stateCopy)\n            .then(function(docRef){\n              stateCopy._id = docRef.id\n              db.collection(\"presentations\")\n              .doc(docRef.id)\n              .update({_id:docRef.id}).then(()=>{\n                action.asyncDispatch(mainAction(ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS,stateCopy))\n              });\n             \n            });\n        return stateCopy\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_SUCCESS: {\n        return action.payload\n        }\n        case ACTIONS.CREATE_NEW_PUBLICATION_FAIL: {\n        return state\n        }\n        case ACTIONS.LOAD_PRESENTATION: {\n        let stateCopy = _.cloneDeep(state)\n        let _id = ''\n            db.collection(\"presentations\")\n            .where(\"id\",\"==\",action.payload)\n            .get()\n            .then(querySnapshot => {\n              const data = querySnapshot.docs.map(doc => {\n              //  _id=doc.id\n                return doc.data()});\n              stateCopy = data\n            //  stateCopy[0]._id = _id\n              action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION_SUCCESS,data))\n            });\n            return state\n        }\n        case  ACTIONS.LOAD_PRESENTATION_SUCCESS:{\n            \n            return action.payload.length > 0 ? action.payload[0]:[]\n        }\n        case  ACTIONS.LOAD_PRESENTATION_FAIL:{\n            return state\n        }\n        \n        case ACTIONS.UPDATE_PUBLICATION:{\n      console.log(action)\n        db.collection(\"presentations\")\n        .doc(action.payload._id)\n        .update(action.payload).then(()=>{\n          action.asyncDispatch(mainAction(ACTIONS.UPDATE_PUBLICATION_SUCCESS,action.payload))\n        });\n        return state\n        }\n        case ACTIONS.UPDATE_PUBLICATION_SUCCESS:{\n        let stateCopy = _.cloneDeep(state)\n        action.asyncDispatch(mainAction(ACTIONS.LOAD_PRESENTATION,stateCopy.id))\n        return {state,...action.payload}\n        }\n        case ACTIONS.UPDATE_PUBLICATION_FAIL:{\n        return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n            let stateCopy = _.cloneDeep(action.payload)\n             let image = stateCopy.image\n             updatePresentationImage(image).then((json)=>{\n    \n              if(json.status!==404 || json.status!==500) {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS,{submitted:stateCopy,json}))\n              } else {\n                action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,json.response.message))\n              }\n            }).catch(err => action.asyncDispatch(mainAction(ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL,err)))\n          \n            return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_SUCCESS:{\n              let stateCopy = _.cloneDeep(state)\n              \n              let newImage = {\n                _id:action.payload.submitted._id,\n                albumID:action.payload.submitted.albumID,\n                caption:action.payload.submitted.caption,\n                cover:action.payload.submitted.cover,\n                imageName:action.payload.json.data.filename,\n                updatedAt:Date.now()\n              }\n              stateCopy.currentID = action.payload.submitted.albumID\n              action.asyncDispatch(mainAction( ACTIONS.UPDATE_POST_IMAGE,newImage))\n            return stateCopy\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE_FAIL:{\n            return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE:{\n         console.log(action)\n          let image = {\n            albumID: action.payload.albumID,\n            caption: action.payload.caption ? action.payload.caption :\"\",\n            cover: action.payload.cover ? action.payload.cover:\"\",\n            imageName:action.payload.image.name\n          }\n          let presentation= {}\n          if(action.payload.cover === \"frontCover\"){\n           presentation = {\n             frontCover : action.payload.image.name,\n             frontCaption:action.payload.caption ? action.payload.caption :\"\",\n           }\n          } else {\n            presentation = {\n              backCover : action.payload.image.name,\n              backCaption:action.payload.caption ? action.payload.caption :\"\",\n            }\n          }\n\n        db.collection(\"presentations\").doc(action.payload.docId)\n        .update(presentation).then(()=>{   \n            db.collection(\"postimages\")\n            .doc()\n            .set(image)\n            .then(() => {\n              action.asyncDispatch(mainAction(ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS,action.payload))\n            });\n\n\n        });\n\n        \n         \n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_SUCCESS:{\n          let postImageRef = storage.ref('posts/'+action.payload.image.name).put(action.payload.image);\n          postImageRef.on('state_changed',(snapshot)=>{\n            //progress function\n          },(error)=>{\n            //error\n            console.log(error)\n          },()=>{\n            //complete\n            storage.ref('/posts').child(action.payload.image.name).getDownloadURL().then(url=>{\n              console.log(url)\n            })\n          })\n          return state\n        }\n        case ACTIONS.UPLOAD_PRESENTATION_IMAGE_FAIL:{\n          return state\n        }\n        case ACTIONS.UPDATE_PRESENTATION_IMAGE:{\n          console.log(action)\n          let image = ''\n          if(action.submitted.cover === \"frontCover\") {\n            image = {\n              frontCover:action.json.data.filename,\n              frontCaption:action.submitted.caption \n            }\n          } else {\n            image = {\n              backCover:action.json.data.filename,\n              backCaption:action.submitted.caption \n            }\n          }\n          action.asyncDispatch(mainAction( ACTIONS.UPDATE_PUBLICATION,image))\n          return state\n        }\n      default: \n        return {\n          ...state\n        }\n    }\n  }"]},"metadata":{},"sourceType":"module"}