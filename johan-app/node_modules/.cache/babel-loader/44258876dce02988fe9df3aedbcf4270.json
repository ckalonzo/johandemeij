{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n\nconst gapicConfig = require(\"./firestore_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  This service exposes several types of comparable timestamps:\n *\n *  *    `create_time` - The time at which a document was created. Changes only\n *       when a document is deleted, then re-created. Increases in a strict\n *        monotonic fashion.\n *  *    `update_time` - The time at which a document was last updated. Changes\n *       every time a document is modified. Does not change when a write results\n *       in no modifications. Increases in a strict monotonic fashion.\n *  *    `read_time` - The time at which a particular state was observed. Used\n *       to denote a consistent snapshot of the database or the time at which a\n *       Document was observed to not exist.\n *  *    `commit_time` - The time at which the writes in a transaction were\n *       committed. Any read with an equal or greater `read_time` is guaranteed\n *       to see the effects of the transaction.\n * @class\n * @memberof v1beta1\n */\n\n\nclass FirestoreClient {\n  /**\n   * Construct an instance of FirestoreClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    this._descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    };\n    this._terminated = false; // Ensure that options include the service address and port.\n\n    const staticMembers = this.constructor;\n    const servicePath = opts && opts.servicePath ? opts.servicePath : opts && opts.apiEndpoint ? opts.apiEndpoint : staticMembers.servicePath;\n    const port = opts && opts.port ? opts.port : staticMembers.port;\n\n    if (!opts) {\n      opts = {\n        servicePath,\n        port\n      };\n    }\n\n    opts.servicePath = opts.servicePath || servicePath;\n    opts.port = opts.port || port;\n    opts.clientConfig = opts.clientConfig || {};\n    const isBrowser = typeof window !== 'undefined';\n\n    if (isBrowser) {\n      opts.fallback = true;\n    } // If we are in browser, we are already using fallback because of the\n    // \"browser\" field in package.json.\n    // But if we were explicitly requested to use fallback, let's do it now.\n\n\n    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath); // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this._descriptors.page = {\n      listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n      listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds')\n    }; // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n\n    this._descriptors.stream = {\n      batchGetDocuments: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n      runQuery: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n      write: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n      listen: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING)\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1beta1.Firestore', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this._innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.firestoreStub) {\n      return this.firestoreStub;\n    } // Put together the \"service stub\" for\n    // google.firestore.v1beta1.Firestore.\n\n\n    this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.firestore.v1beta1.Firestore') : // tslint:disable-next-line no-any\n    this._protos.google.firestore.v1beta1.Firestore, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const firestoreStubMethods = ['getDocument', 'listDocuments', 'createDocument', 'updateDocument', 'deleteDocument', 'batchGetDocuments', 'beginTransaction', 'commit', 'rollback', 'runQuery', 'write', 'listen', 'listCollectionIds'];\n\n    for (const methodName of firestoreStubMethods) {\n      const innerCallPromise = this.firestoreStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n\n      const apiCall = this._gaxModule.createApiCall(innerCallPromise, this._defaults[methodName], this._descriptors.page[methodName] || this._descriptors.stream[methodName] || this._descriptors.longrunning[methodName]);\n\n      this._innerApiCalls[methodName] = (argument, callOptions, callback) => {\n        return apiCall(argument, callOptions, callback);\n      };\n    }\n\n    return this.firestoreStub;\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Gets a single document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The resource name of the Document to get. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   * @param {google.firestore.v1beta1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If the document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads the document in a transaction.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads the version of the document at the given time.\n   *   This may not be older than 60 seconds.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  getDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.getDocument(request, options, callback);\n  }\n  /**\n   * Creates a new document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource. For example:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`\n   * @param {string} request.collectionId\n   *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.\n   * @param {string} request.documentId\n   *   The client-assigned document ID to use for this document.\n   *\n   *   Optional. If not specified, an ID will be assigned by the service.\n   * @param {google.firestore.v1beta1.Document} request.document\n   *   Required. The document to create. `name` must not be set.\n   * @param {google.firestore.v1beta1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If the document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  createDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.createDocument(request, options, callback);\n  }\n  /**\n   * Updates or inserts a document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.firestore.v1beta1.Document} request.document\n   *   Required. The updated document.\n   *   Creates the document if it does not already exist.\n   * @param {google.firestore.v1beta1.DocumentMask} request.updateMask\n   *   The fields to update.\n   *   None of the field paths in the mask may contain a reserved name.\n   *\n   *   If the document exists on the server and has fields not referenced in the\n   *   mask, they are left unchanged.\n   *   Fields referenced in the mask, but not present in the input document, are\n   *   deleted from the document on the server.\n   * @param {google.firestore.v1beta1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If the document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {google.firestore.v1beta1.Precondition} request.currentDocument\n   *   An optional precondition on the document.\n   *   The request will fail if this is set and not met by the target document.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  updateDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'document.name': request.document.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.updateDocument(request, options, callback);\n  }\n  /**\n   * Deletes a document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The resource name of the Document to delete. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   * @param {google.firestore.v1beta1.Precondition} request.currentDocument\n   *   An optional precondition on the document.\n   *   The request will fail if this is set and not met by the target document.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  deleteDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.deleteDocument(request, options, callback);\n  }\n  /**\n   * Starts a new transaction.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {google.firestore.v1beta1.TransactionOptions} request.options\n   *   The options for the transaction.\n   *   Defaults to a read-write transaction.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [BeginTransactionResponse]{@link google.firestore.v1beta1.BeginTransactionResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  beginTransaction(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.beginTransaction(request, options, callback);\n  }\n  /**\n   * Commits a transaction, while optionally updating documents.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {number[]} request.writes\n   *   The writes to apply.\n   *\n   *   Always executed atomically and in order.\n   * @param {Buffer} request.transaction\n   *   If set, applies all writes in this transaction, and commits it.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [CommitResponse]{@link google.firestore.v1beta1.CommitResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  commit(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.commit(request, options, callback);\n  }\n  /**\n   * Rolls back a transaction.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {Buffer} request.transaction\n   *   Required. The transaction to roll back.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  rollback(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.rollback(request, options, callback);\n  }\n  /**\n   * Gets multiple documents.\n   *\n   * Documents returned by this method are not guaranteed to be returned in the\n   * same order that they were requested.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {string[]} request.documents\n   *   The names of the documents to retrieve. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   The request will fail if any of the document is not a child resource of the\n   *   given `database`. Duplicate names will be elided.\n   * @param {google.firestore.v1beta1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If a document has a field that is not present in this mask, that field will\n   *   not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n   *   Starts a new transaction and reads the documents.\n   *   Defaults to a read-only transaction.\n   *   The new transaction ID will be returned as the first response in the\n   *   stream.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 60 seconds.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits [BatchGetDocumentsResponse]{@link google.firestore.v1beta1.BatchGetDocumentsResponse} on 'data' event.\n   */\n\n\n  batchGetDocuments(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.batchGetDocuments(request, options);\n  }\n  /**\n   * Runs a query.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents` or\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n   *   A structured query.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n   *   Starts a new transaction and reads the documents.\n   *   Defaults to a read-only transaction.\n   *   The new transaction ID will be returned as the first response in the\n   *   stream.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 60 seconds.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits [RunQueryResponse]{@link google.firestore.v1beta1.RunQueryResponse} on 'data' event.\n   */\n\n\n  runQuery(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.runQuery(request, options);\n  }\n  /**\n   * Streams batches of document updates and deletes, in order.\n   *\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing [WriteRequest]{@link google.firestore.v1beta1.WriteRequest} for write() method, and\n   *   will emit objects representing [WriteResponse]{@link google.firestore.v1beta1.WriteResponse} on 'data' event asynchronously.\n   */\n\n\n  write(options) {\n    this.initialize();\n    return this._innerApiCalls.write(options);\n  }\n  /**\n   * Listens to changes.\n   *\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing [ListenRequest]{@link google.firestore.v1beta1.ListenRequest} for write() method, and\n   *   will emit objects representing [ListenResponse]{@link google.firestore.v1beta1.ListenResponse} on 'data' event asynchronously.\n   */\n\n\n  listen(options) {\n    this.initialize();\n    return this._innerApiCalls.listen({}, options);\n  }\n  /**\n   * Lists documents.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents` or\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {string} request.collectionId\n   *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n   *   or `messages`.\n   * @param {number} request.pageSize\n   *   The maximum number of documents to return.\n   * @param {string} request.pageToken\n   *   The `next_page_token` value returned from a previous List request, if any.\n   * @param {string} request.orderBy\n   *   The order to sort results by. For example: `priority desc, name`.\n   * @param {google.firestore.v1beta1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If a document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 60 seconds.\n   * @param {boolean} request.showMissing\n   *   If the list should show missing documents. A missing document is a\n   *   document that does not exist but has sub-documents. These documents will\n   *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n   *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n   *\n   *   Requests with `show_missing` may not specify `where` or\n   *   `order_by`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Document]{@link google.firestore.v1beta1.Document}.\n   *   The client library support auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Document]{@link google.firestore.v1beta1.Document} that corresponds to\n   *   the one page received from the API server.\n   *   If the second element is not null it contains the request object of type [ListDocumentsRequest]{@link google.firestore.v1beta1.ListDocumentsRequest}\n   *   that can be used to obtain the next page of the results.\n   *   If it is null, the next page does not exist.\n   *   The third element contains the raw response received from the API server. Its type is\n   *   [ListDocumentsResponse]{@link google.firestore.v1beta1.ListDocumentsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  listDocuments(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.listDocuments(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listDocuments}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listDocuments} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents` or\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {string} request.collectionId\n   *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n   *   or `messages`.\n   * @param {number} request.pageSize\n   *   The maximum number of documents to return.\n   * @param {string} request.pageToken\n   *   The `next_page_token` value returned from a previous List request, if any.\n   * @param {string} request.orderBy\n   *   The order to sort results by. For example: `priority desc, name`.\n   * @param {google.firestore.v1beta1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If a document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 60 seconds.\n   * @param {boolean} request.showMissing\n   *   If the list should show missing documents. A missing document is a\n   *   document that does not exist but has sub-documents. These documents will\n   *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n   *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n   *\n   *   Requests with `show_missing` may not specify `where` or\n   *   `order_by`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Document]{@link google.firestore.v1beta1.Document} on 'data' event.\n   */\n\n\n  listDocumentsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this._descriptors.page.listDocuments.createStream(this._innerApiCalls.listDocuments, request, callSettings);\n  }\n  /**\n   * Lists all the collection IDs underneath a document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent document. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {number} request.pageSize\n   *   The maximum number of results to return.\n   * @param {string} request.pageToken\n   *   A page token. Must be a value from\n   *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of string.\n   *   The client library support auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of string that corresponds to\n   *   the one page received from the API server.\n   *   If the second element is not null it contains the request object of type [ListCollectionIdsRequest]{@link google.firestore.v1beta1.ListCollectionIdsRequest}\n   *   that can be used to obtain the next page of the results.\n   *   If it is null, the next page does not exist.\n   *   The third element contains the raw response received from the API server. Its type is\n   *   [ListCollectionIdsResponse]{@link google.firestore.v1beta1.ListCollectionIdsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  listCollectionIds(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.listCollectionIds(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listCollectionIds}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listCollectionIds} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent document. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {number} request.pageSize\n   *   The maximum number of results to return.\n   * @param {string} request.pageToken\n   *   A page token. Must be a value from\n   *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing string on 'data' event.\n   */\n\n\n  listCollectionIdsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this._descriptors.page.listCollectionIds.createStream(this._innerApiCalls.listCollectionIds, request, callSettings);\n  }\n  /**\n   * Terminate the GRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.firestoreStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.FirestoreClient = FirestoreClient;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/websites/johan-de-meij/johan-app/node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.js"],"names":["Object","defineProperty","exports","value","gax","require","path","gapicConfig","version","FirestoreClient","constructor","opts","_descriptors","page","stream","longrunning","batching","_terminated","staticMembers","servicePath","apiEndpoint","port","clientConfig","isBrowser","window","fallback","_gaxModule","scopes","_gaxGrpc","GrpcClient","_opts","auth","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","_protos","loadProto","listDocuments","PageDescriptor","listCollectionIds","batchGetDocuments","StreamDescriptor","StreamType","SERVER_STREAMING","runQuery","write","BIDI_STREAMING","listen","_defaults","constructSettings","_innerApiCalls","initialize","firestoreStub","createStub","lookupService","google","firestore","v1beta1","Firestore","firestoreStubMethods","methodName","innerCallPromise","then","stub","args","Promise","reject","func","apply","err","apiCall","createApiCall","argument","callOptions","callback","getProjectId","getDocument","request","optionsOrCallback","options","undefined","otherArgs","headers","routingHeader","fromParams","name","createDocument","parent","updateDocument","document","deleteDocument","beginTransaction","database","commit","rollback","listDocumentsStream","callSettings","CallSettings","createStream","listCollectionIdsStream","close","resolve"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\nconst gapicConfig = require(\"./firestore_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  This service exposes several types of comparable timestamps:\n *\n *  *    `create_time` - The time at which a document was created. Changes only\n *       when a document is deleted, then re-created. Increases in a strict\n *        monotonic fashion.\n *  *    `update_time` - The time at which a document was last updated. Changes\n *       every time a document is modified. Does not change when a write results\n *       in no modifications. Increases in a strict monotonic fashion.\n *  *    `read_time` - The time at which a particular state was observed. Used\n *       to denote a consistent snapshot of the database or the time at which a\n *       Document was observed to not exist.\n *  *    `commit_time` - The time at which the writes in a transaction were\n *       committed. Any read with an equal or greater `read_time` is guaranteed\n *       to see the effects of the transaction.\n * @class\n * @memberof v1beta1\n */\nclass FirestoreClient {\n    /**\n     * Construct an instance of FirestoreClient.\n     *\n     * @param {object} [options] - The configuration object. See the subsequent\n     *   parameters for more details.\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     */\n    constructor(opts) {\n        this._descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        this._terminated = false;\n        // Ensure that options include the service address and port.\n        const staticMembers = this.constructor;\n        const servicePath = opts && opts.servicePath\n            ? opts.servicePath\n            : opts && opts.apiEndpoint\n                ? opts.apiEndpoint\n                : staticMembers.servicePath;\n        const port = opts && opts.port ? opts.port : staticMembers.port;\n        if (!opts) {\n            opts = { servicePath, port };\n        }\n        opts.servicePath = opts.servicePath || servicePath;\n        opts.port = opts.port || port;\n        opts.clientConfig = opts.clientConfig || {};\n        const isBrowser = typeof window !== 'undefined';\n        if (isBrowser) {\n            opts.fallback = true;\n        }\n        // If we are in browser, we are already using fallback because of the\n        // \"browser\" field in package.json.\n        // But if we were explicitly requested to use fallback, let's do it now.\n        this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options\n        // sent to the client.\n        opts.scopes = this.constructor.scopes;\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this._descriptors.page = {\n            listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n            listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds'),\n        };\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this._descriptors.stream = {\n            batchGetDocuments: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n            runQuery: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n            write: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n            listen: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1beta1.Firestore', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this._innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreStub) {\n            return this.firestoreStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.v1beta1.Firestore.\n        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.v1beta1.Firestore')\n            : // tslint:disable-next-line no-any\n                this._protos.google.firestore.v1beta1.Firestore, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreStubMethods = [\n            'getDocument',\n            'listDocuments',\n            'createDocument',\n            'updateDocument',\n            'deleteDocument',\n            'batchGetDocuments',\n            'beginTransaction',\n            'commit',\n            'rollback',\n            'runQuery',\n            'write',\n            'listen',\n            'listCollectionIds',\n        ];\n        for (const methodName of firestoreStubMethods) {\n            const innerCallPromise = this.firestoreStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const apiCall = this._gaxModule.createApiCall(innerCallPromise, this._defaults[methodName], this._descriptors.page[methodName] ||\n                this._descriptors.stream[methodName] ||\n                this._descriptors.longrunning[methodName]);\n            this._innerApiCalls[methodName] = (argument, callOptions, callback) => {\n                return apiCall(argument, callOptions, callback);\n            };\n        }\n        return this.firestoreStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @param {function(Error, string)} callback - the callback to\n     *   be called with the current project Id.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets a single document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to get. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads the document in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads the version of the document at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.getDocument(request, options, callback);\n    }\n    /**\n     * Creates a new document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource. For example:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.\n     * @param {string} request.documentId\n     *   The client-assigned document ID to use for this document.\n     *\n     *   Optional. If not specified, an ID will be assigned by the service.\n     * @param {google.firestore.v1beta1.Document} request.document\n     *   Required. The document to create. `name` must not be set.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    createDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.createDocument(request, options, callback);\n    }\n    /**\n     * Updates or inserts a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.firestore.v1beta1.Document} request.document\n     *   Required. The updated document.\n     *   Creates the document if it does not already exist.\n     * @param {google.firestore.v1beta1.DocumentMask} request.updateMask\n     *   The fields to update.\n     *   None of the field paths in the mask may contain a reserved name.\n     *\n     *   If the document exists on the server and has fields not referenced in the\n     *   mask, they are left unchanged.\n     *   Fields referenced in the mask, but not present in the input document, are\n     *   deleted from the document on the server.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {google.firestore.v1beta1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    updateDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            'document.name': request.document.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.updateDocument(request, options, callback);\n    }\n    /**\n     * Deletes a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to delete. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1beta1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    deleteDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.deleteDocument(request, options, callback);\n    }\n    /**\n     * Starts a new transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.options\n     *   The options for the transaction.\n     *   Defaults to a read-write transaction.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [BeginTransactionResponse]{@link google.firestore.v1beta1.BeginTransactionResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    beginTransaction(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.beginTransaction(request, options, callback);\n    }\n    /**\n     * Commits a transaction, while optionally updating documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {number[]} request.writes\n     *   The writes to apply.\n     *\n     *   Always executed atomically and in order.\n     * @param {Buffer} request.transaction\n     *   If set, applies all writes in this transaction, and commits it.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [CommitResponse]{@link google.firestore.v1beta1.CommitResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    commit(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.commit(request, options, callback);\n    }\n    /**\n     * Rolls back a transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {Buffer} request.transaction\n     *   Required. The transaction to roll back.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    rollback(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.rollback(request, options, callback);\n    }\n    /**\n     * Gets multiple documents.\n     *\n     * Documents returned by this method are not guaranteed to be returned in the\n     * same order that they were requested.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.documents\n     *   The names of the documents to retrieve. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   The request will fail if any of the document is not a child resource of the\n     *   given `database`. Duplicate names will be elided.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field will\n     *   not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [BatchGetDocumentsResponse]{@link google.firestore.v1beta1.BatchGetDocumentsResponse} on 'data' event.\n     */\n    batchGetDocuments(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.batchGetDocuments(request, options);\n    }\n    /**\n     * Runs a query.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [RunQueryResponse]{@link google.firestore.v1beta1.RunQueryResponse} on 'data' event.\n     */\n    runQuery(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.runQuery(request, options);\n    }\n    /**\n     * Streams batches of document updates and deletes, in order.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [WriteRequest]{@link google.firestore.v1beta1.WriteRequest} for write() method, and\n     *   will emit objects representing [WriteResponse]{@link google.firestore.v1beta1.WriteResponse} on 'data' event asynchronously.\n     */\n    write(options) {\n        this.initialize();\n        return this._innerApiCalls.write(options);\n    }\n    /**\n     * Listens to changes.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [ListenRequest]{@link google.firestore.v1beta1.ListenRequest} for write() method, and\n     *   will emit objects representing [ListenResponse]{@link google.firestore.v1beta1.ListenResponse} on 'data' event asynchronously.\n     */\n    listen(options) {\n        this.initialize();\n        return this._innerApiCalls.listen({}, options);\n    }\n    /**\n     * Lists documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Document]{@link google.firestore.v1beta1.Document}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Document]{@link google.firestore.v1beta1.Document} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListDocumentsRequest]{@link google.firestore.v1beta1.ListDocumentsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListDocumentsResponse]{@link google.firestore.v1beta1.ListDocumentsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listDocuments(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.listDocuments(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listDocuments}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listDocuments} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Document]{@link google.firestore.v1beta1.Document} on 'data' event.\n     */\n    listDocumentsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this._descriptors.page.listDocuments.createStream(this._innerApiCalls.listDocuments, request, callSettings);\n    }\n    /**\n     * Lists all the collection IDs underneath a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of string.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of string that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListCollectionIdsRequest]{@link google.firestore.v1beta1.ListCollectionIdsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListCollectionIdsResponse]{@link google.firestore.v1beta1.ListCollectionIdsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listCollectionIds(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.listCollectionIds(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listCollectionIds}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listCollectionIds} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing string on 'data' event.\n     */\n    listCollectionIdsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this._descriptors.page.listCollectionIds.createStream(this._innerApiCalls.listCollectionIds, request, callSettings);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.firestoreStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreClient = FirestoreClient;\n//# sourceMappingURL=firestore_client.js.map"]},"metadata":{},"sourceType":"script"}